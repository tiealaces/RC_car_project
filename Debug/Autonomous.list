
Autonomous.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008770  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08008910  08008910  00009910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089dc  080089dc  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  080089dc  080089dc  000099dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089e4  080089e4  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e4  080089e4  000099e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089e8  080089e8  000099e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080089ec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ffc  2000006c  08008a58  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005068  08008a58  0000b068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b628  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f9f  00000000  00000000  000256c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00029668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f8  00000000  00000000  0002ac68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a745  00000000  00000000  0002bd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c718  00000000  00000000  000464a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098fa3  00000000  00000000  00062bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbb60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ce8  00000000  00000000  000fbba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  0010188c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080088f8 	.word	0x080088f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080088f8 	.word	0x080088f8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_UARTEx_RxEventCallback>:
uint8_t autoDrive_flag=0;
static uint16_t speedIndex = 0;
static uint16_t speedState[] = {600, 800, 1000};

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t rxBufferSize)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	460b      	mov	r3, r1
 80004da:	807b      	strh	r3, [r7, #2]
	if (huart == &huart1)	// else if
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a37      	ldr	r2, [pc, #220]	@ (80005bc <HAL_UARTEx_RxEventCallback+0xec>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d162      	bne.n	80005aa <HAL_UARTEx_RxEventCallback+0xda>
//			str_peri[rxBufferSize] = 0;	// trans string
//		}
//		HAL_UARTEx_ReceiveToIdle_IT(&huart1, str_peri, sizeof(str_peri));


		if(str_peri[0] == 'F')
 80004e4:	4b36      	ldr	r3, [pc, #216]	@ (80005c0 <HAL_UARTEx_RxEventCallback+0xf0>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b46      	cmp	r3, #70	@ 0x46
 80004ea:	d107      	bne.n	80004fc <HAL_UARTEx_RxEventCallback+0x2c>
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
 80004ec:	4b35      	ldr	r3, [pc, #212]	@ (80005c4 <HAL_UARTEx_RxEventCallback+0xf4>)
 80004ee:	881a      	ldrh	r2, [r3, #0]
 80004f0:	4b35      	ldr	r3, [pc, #212]	@ (80005c8 <HAL_UARTEx_RxEventCallback+0xf8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	635a      	str	r2, [r3, #52]	@ 0x34
			Forward();
 80004f6:	f000 fa8b 	bl	8000a10 <Forward>
 80004fa:	e04d      	b.n	8000598 <HAL_UARTEx_RxEventCallback+0xc8>
		}
		else if(str_peri[0] == 'L')
 80004fc:	4b30      	ldr	r3, [pc, #192]	@ (80005c0 <HAL_UARTEx_RxEventCallback+0xf0>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b4c      	cmp	r3, #76	@ 0x4c
 8000502:	d107      	bne.n	8000514 <HAL_UARTEx_RxEventCallback+0x44>
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
 8000504:	4b2f      	ldr	r3, [pc, #188]	@ (80005c4 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000506:	881a      	ldrh	r2, [r3, #0]
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <HAL_UARTEx_RxEventCallback+0xf8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	635a      	str	r2, [r3, #52]	@ 0x34
			Left();
 800050e:	f000 faf7 	bl	8000b00 <Left>
 8000512:	e041      	b.n	8000598 <HAL_UARTEx_RxEventCallback+0xc8>
		}
		else if(str_peri[0] == 'B')
 8000514:	4b2a      	ldr	r3, [pc, #168]	@ (80005c0 <HAL_UARTEx_RxEventCallback+0xf0>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b42      	cmp	r3, #66	@ 0x42
 800051a:	d107      	bne.n	800052c <HAL_UARTEx_RxEventCallback+0x5c>
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
 800051c:	4b29      	ldr	r3, [pc, #164]	@ (80005c4 <HAL_UARTEx_RxEventCallback+0xf4>)
 800051e:	881a      	ldrh	r2, [r3, #0]
 8000520:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <HAL_UARTEx_RxEventCallback+0xf8>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	635a      	str	r2, [r3, #52]	@ 0x34
			Backward();
 8000526:	f000 fa91 	bl	8000a4c <Backward>
 800052a:	e035      	b.n	8000598 <HAL_UARTEx_RxEventCallback+0xc8>
		}
		else if(str_peri[0] == 'R')
 800052c:	4b24      	ldr	r3, [pc, #144]	@ (80005c0 <HAL_UARTEx_RxEventCallback+0xf0>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b52      	cmp	r3, #82	@ 0x52
 8000532:	d107      	bne.n	8000544 <HAL_UARTEx_RxEventCallback+0x74>
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
 8000534:	4b23      	ldr	r3, [pc, #140]	@ (80005c4 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000536:	881a      	ldrh	r2, [r3, #0]
 8000538:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <HAL_UARTEx_RxEventCallback+0xf8>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	635a      	str	r2, [r3, #52]	@ 0x34
			Right();
 800053e:	f000 faa3 	bl	8000a88 <Right>
 8000542:	e029      	b.n	8000598 <HAL_UARTEx_RxEventCallback+0xc8>
		}
		else if(str_peri[0] == 'P')
 8000544:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <HAL_UARTEx_RxEventCallback+0xf0>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b50      	cmp	r3, #80	@ 0x50
 800054a:	d105      	bne.n	8000558 <HAL_UARTEx_RxEventCallback+0x88>
		{
			STOP();
 800054c:	f000 fb14 	bl	8000b78 <STOP>
			autoDrive_flag = 0;
 8000550:	4b1e      	ldr	r3, [pc, #120]	@ (80005cc <HAL_UARTEx_RxEventCallback+0xfc>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
 8000556:	e01f      	b.n	8000598 <HAL_UARTEx_RxEventCallback+0xc8>
		}
		else if(str_peri[0] == 'A')
 8000558:	4b19      	ldr	r3, [pc, #100]	@ (80005c0 <HAL_UARTEx_RxEventCallback+0xf0>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b41      	cmp	r3, #65	@ 0x41
 800055e:	d11b      	bne.n	8000598 <HAL_UARTEx_RxEventCallback+0xc8>
		{
			speedIndex = (speedIndex +1) % (sizeof(speedState) / sizeof(speedState[0]));
 8000560:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <HAL_UARTEx_RxEventCallback+0x100>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4619      	mov	r1, r3
 8000568:	4b1a      	ldr	r3, [pc, #104]	@ (80005d4 <HAL_UARTEx_RxEventCallback+0x104>)
 800056a:	fba3 2301 	umull	r2, r3, r3, r1
 800056e:	085a      	lsrs	r2, r3, #1
 8000570:	4613      	mov	r3, r2
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	4413      	add	r3, r2
 8000576:	1aca      	subs	r2, r1, r3
 8000578:	b292      	uxth	r2, r2
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <HAL_UARTEx_RxEventCallback+0x100>)
 800057c:	801a      	strh	r2, [r3, #0]
			speed = speedState[speedIndex];
 800057e:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <HAL_UARTEx_RxEventCallback+0x100>)
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <HAL_UARTEx_RxEventCallback+0x108>)
 8000586:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800058a:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <HAL_UARTEx_RxEventCallback+0xf4>)
 800058c:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
 800058e:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000590:	881a      	ldrh	r2, [r3, #0]
 8000592:	4b0d      	ldr	r3, [pc, #52]	@ (80005c8 <HAL_UARTEx_RxEventCallback+0xf8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		if(str_peri[0] == 'T')
 8000598:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <HAL_UARTEx_RxEventCallback+0xf0>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b54      	cmp	r3, #84	@ 0x54
 800059e:	d104      	bne.n	80005aa <HAL_UARTEx_RxEventCallback+0xda>
		{
			STOP();
 80005a0:	f000 faea 	bl	8000b78 <STOP>
			autoDrive_flag = 1;
 80005a4:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <HAL_UARTEx_RxEventCallback+0xfc>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
		}


	}

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, str_peri, sizeof(str_peri));
 80005aa:	2201      	movs	r2, #1
 80005ac:	4904      	ldr	r1, [pc, #16]	@ (80005c0 <HAL_UARTEx_RxEventCallback+0xf0>)
 80005ae:	4803      	ldr	r0, [pc, #12]	@ (80005bc <HAL_UARTEx_RxEventCallback+0xec>)
 80005b0:	f004 fb70 	bl	8004c94 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200004ac 	.word	0x200004ac
 80005c0:	20000088 	.word	0x20000088
 80005c4:	20000000 	.word	0x20000000
 80005c8:	2000014c 	.word	0x2000014c
 80005cc:	20000089 	.word	0x20000089
 80005d0:	2000008a 	.word	0x2000008a
 80005d4:	aaaaaaab 	.word	0xaaaaaaab
 80005d8:	20000004 	.word	0x20000004

080005dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b20      	ldr	r3, [pc, #128]	@ (8000668 <MX_DMA_Init+0x8c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000668 <MX_DMA_Init+0x8c>)
 80005ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <MX_DMA_Init+0x8c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2105      	movs	r1, #5
 8000602:	200b      	movs	r0, #11
 8000604:	f001 fbb4 	bl	8001d70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000608:	200b      	movs	r0, #11
 800060a:	f001 fbcd 	bl	8001da8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2105      	movs	r1, #5
 8000612:	200d      	movs	r0, #13
 8000614:	f001 fbac 	bl	8001d70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000618:	200d      	movs	r0, #13
 800061a:	f001 fbc5 	bl	8001da8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2105      	movs	r1, #5
 8000622:	200e      	movs	r0, #14
 8000624:	f001 fba4 	bl	8001d70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000628:	200e      	movs	r0, #14
 800062a:	f001 fbbd 	bl	8001da8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2105      	movs	r1, #5
 8000632:	200f      	movs	r0, #15
 8000634:	f001 fb9c 	bl	8001d70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000638:	200f      	movs	r0, #15
 800063a:	f001 fbb5 	bl	8001da8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2105      	movs	r1, #5
 8000642:	2010      	movs	r0, #16
 8000644:	f001 fb94 	bl	8001d70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000648:	2010      	movs	r0, #16
 800064a:	f001 fbad 	bl	8001da8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2105      	movs	r1, #5
 8000652:	202f      	movs	r0, #47	@ 0x2f
 8000654:	f001 fb8c 	bl	8001d70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000658:	202f      	movs	r0, #47	@ 0x2f
 800065a:	f001 fba5 	bl	8001da8 <HAL_NVIC_EnableIRQ>

}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartDefaultTas */
  StartDefaultTasHandle = osThreadNew(echoreadTask, NULL, &StartDefaultTas_attributes);
 8000670:	4a0c      	ldr	r2, [pc, #48]	@ (80006a4 <MX_FREERTOS_Init+0x38>)
 8000672:	2100      	movs	r1, #0
 8000674:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <MX_FREERTOS_Init+0x3c>)
 8000676:	f005 faf5 	bl	8005c64 <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a0b      	ldr	r2, [pc, #44]	@ (80006ac <MX_FREERTOS_Init+0x40>)
 800067e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(autoDrivingTask, NULL, &myTask02_attributes);
 8000680:	4a0b      	ldr	r2, [pc, #44]	@ (80006b0 <MX_FREERTOS_Init+0x44>)
 8000682:	2100      	movs	r1, #0
 8000684:	480b      	ldr	r0, [pc, #44]	@ (80006b4 <MX_FREERTOS_Init+0x48>)
 8000686:	f005 faed 	bl	8005c64 <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a0a      	ldr	r2, [pc, #40]	@ (80006b8 <MX_FREERTOS_Init+0x4c>)
 800068e:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000690:	4a0a      	ldr	r2, [pc, #40]	@ (80006bc <MX_FREERTOS_Init+0x50>)
 8000692:	2100      	movs	r1, #0
 8000694:	480a      	ldr	r0, [pc, #40]	@ (80006c0 <MX_FREERTOS_Init+0x54>)
 8000696:	f005 fae5 	bl	8005c64 <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a09      	ldr	r2, [pc, #36]	@ (80006c4 <MX_FREERTOS_Init+0x58>)
 800069e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	08008950 	.word	0x08008950
 80006a8:	080006c9 	.word	0x080006c9
 80006ac:	2000008c 	.word	0x2000008c
 80006b0:	08008974 	.word	0x08008974
 80006b4:	080006e1 	.word	0x080006e1
 80006b8:	20000090 	.word	0x20000090
 80006bc:	08008998 	.word	0x08008998
 80006c0:	08000781 	.word	0x08000781
 80006c4:	20000094 	.word	0x20000094

080006c8 <echoreadTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_echoreadTask */
void echoreadTask(void *argument)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN echoreadTask */
  /* Infinite loop */
  for(;;)
  {

	echo_get();
 80006d0:	f000 faa8 	bl	8000c24 <echo_get>
    osDelay(10);
 80006d4:	200a      	movs	r0, #10
 80006d6:	f005 fb57 	bl	8005d88 <osDelay>
	echo_get();
 80006da:	bf00      	nop
 80006dc:	e7f8      	b.n	80006d0 <echoreadTask+0x8>
	...

080006e0 <autoDrivingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_autoDrivingTask */
void autoDrivingTask(void *argument)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN autoDrivingTask */

  /* Infinite loop */
  for(;;)
  {
	if(autoDrive_flag)
 80006e8:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <autoDrivingTask+0x90>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d03b      	beq.n	8000768 <autoDrivingTask+0x88>
	{
		if(echo_center_time >= 200)
 80006f0:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <autoDrivingTask+0x94>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2bc7      	cmp	r3, #199	@ 0xc7
 80006f6:	d91b      	bls.n	8000730 <autoDrivingTask+0x50>
		{
			Forward();
 80006f8:	f000 f98a 	bl	8000a10 <Forward>
			if((echo_left_time < 60) || (echo_right_time < 60))
 80006fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000778 <autoDrivingTask+0x98>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b3b      	cmp	r3, #59	@ 0x3b
 8000702:	d903      	bls.n	800070c <autoDrivingTask+0x2c>
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <autoDrivingTask+0x9c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b3b      	cmp	r3, #59	@ 0x3b
 800070a:	d82d      	bhi.n	8000768 <autoDrivingTask+0x88>
			{
				if(echo_left_time < echo_right_time)
 800070c:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <autoDrivingTask+0x98>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <autoDrivingTask+0x9c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	d202      	bcs.n	800071e <autoDrivingTask+0x3e>
				{
					Left_slow();
 8000718:	f000 fa10 	bl	8000b3c <Left_slow>
 800071c:	e024      	b.n	8000768 <autoDrivingTask+0x88>
				}
				else if(echo_right_time < echo_left_time)
 800071e:	4b17      	ldr	r3, [pc, #92]	@ (800077c <autoDrivingTask+0x9c>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <autoDrivingTask+0x98>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	429a      	cmp	r2, r3
 8000728:	d21e      	bcs.n	8000768 <autoDrivingTask+0x88>
				{
					Right_slow();
 800072a:	f000 f9cb 	bl	8000ac4 <Right_slow>
 800072e:	e01b      	b.n	8000768 <autoDrivingTask+0x88>
				}
			}
		}
		else if(echo_center_time < 200)
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <autoDrivingTask+0x94>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2bc7      	cmp	r3, #199	@ 0xc7
 8000736:	d817      	bhi.n	8000768 <autoDrivingTask+0x88>
		{
			STOP();
 8000738:	f000 fa1e 	bl	8000b78 <STOP>
			while(1)
			{
				if(echo_left_time < echo_right_time)
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <autoDrivingTask+0x98>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <autoDrivingTask+0x9c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	429a      	cmp	r2, r3
 8000746:	d201      	bcs.n	800074c <autoDrivingTask+0x6c>
				{
					Left();
 8000748:	f000 f9da 	bl	8000b00 <Left>
				}
				if(echo_right_time < echo_left_time)
 800074c:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <autoDrivingTask+0x9c>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <autoDrivingTask+0x98>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d201      	bcs.n	800075c <autoDrivingTask+0x7c>
				{
					Right();
 8000758:	f000 f996 	bl	8000a88 <Right>
				}
				if(echo_center_time >= 200)
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <autoDrivingTask+0x94>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2bc7      	cmp	r3, #199	@ 0xc7
 8000762:	d800      	bhi.n	8000766 <autoDrivingTask+0x86>
				if(echo_left_time < echo_right_time)
 8000764:	e7ea      	b.n	800073c <autoDrivingTask+0x5c>
				{
					break;
 8000766:	bf00      	nop
				}
			}
		}
	}
    osDelay(1);
 8000768:	2001      	movs	r0, #1
 800076a:	f005 fb0d 	bl	8005d88 <osDelay>
	if(autoDrive_flag)
 800076e:	e7bb      	b.n	80006e8 <autoDrivingTask+0x8>
 8000770:	20000089 	.word	0x20000089
 8000774:	2000009c 	.word	0x2000009c
 8000778:	20000098 	.word	0x20000098
 800077c:	200000a0 	.word	0x200000a0

08000780 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	filtered_center = KalmanFilter_Update(&kf_center, echo_center_time);
//	filtered_left = KalmanFilter_Update(&kf_left, echo_left_time);
//	filtered_right = KalmanFilter_Update(&kf_right, echo_right_time);
	osDelay(1);
 8000788:	2001      	movs	r0, #1
 800078a:	f005 fafd 	bl	8005d88 <osDelay>
 800078e:	e7fb      	b.n	8000788 <StartTask03+0x8>

08000790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	@ 0x28
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000898 <MX_GPIO_Init+0x108>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a3a      	ldr	r2, [pc, #232]	@ (8000898 <MX_GPIO_Init+0x108>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b38      	ldr	r3, [pc, #224]	@ (8000898 <MX_GPIO_Init+0x108>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b34      	ldr	r3, [pc, #208]	@ (8000898 <MX_GPIO_Init+0x108>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a33      	ldr	r2, [pc, #204]	@ (8000898 <MX_GPIO_Init+0x108>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b31      	ldr	r3, [pc, #196]	@ (8000898 <MX_GPIO_Init+0x108>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000898 <MX_GPIO_Init+0x108>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a2c      	ldr	r2, [pc, #176]	@ (8000898 <MX_GPIO_Init+0x108>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000898 <MX_GPIO_Init+0x108>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <MX_GPIO_Init+0x108>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a25      	ldr	r2, [pc, #148]	@ (8000898 <MX_GPIO_Init+0x108>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <MX_GPIO_Init+0x108>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2120      	movs	r1, #32
 800081a:	4820      	ldr	r0, [pc, #128]	@ (800089c <MX_GPIO_Init+0x10c>)
 800081c:	f002 f858 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	f24e 0102 	movw	r1, #57346	@ 0xe002
 8000826:	481e      	ldr	r0, [pc, #120]	@ (80008a0 <MX_GPIO_Init+0x110>)
 8000828:	f002 f852 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000832:	481c      	ldr	r0, [pc, #112]	@ (80008a4 <MX_GPIO_Init+0x114>)
 8000834:	f002 f84c 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000838:	2320      	movs	r3, #32
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4813      	ldr	r0, [pc, #76]	@ (800089c <MX_GPIO_Init+0x10c>)
 8000850:	f001 feba 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000854:	f24e 0302 	movw	r3, #57346	@ 0xe002
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <MX_GPIO_Init+0x110>)
 800086e:	f001 feab 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000872:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	@ (80008a4 <MX_GPIO_Init+0x114>)
 800088c:	f001 fe9c 	bl	80025c8 <HAL_GPIO_Init>

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	@ 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40020800 	.word	0x40020800

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f001 f966 	bl	8001b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f82e 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f7ff ff6c 	bl	8000790 <MX_GPIO_Init>
  MX_DMA_Init();
 80008b8:	f7ff fe90 	bl	80005dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80008bc:	f001 f834 	bl	8001928 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80008c0:	f000 fbe6 	bl	8001090 <MX_TIM2_Init>
  MX_TIM11_Init();
 80008c4:	f000 fd78 	bl	80013b8 <MX_TIM11_Init>
  MX_TIM3_Init();
 80008c8:	f000 fc58 	bl	800117c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80008cc:	f001 f856 	bl	800197c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80008d0:	f000 fcf2 	bl	80012b8 <MX_TIM4_Init>
  MX_TIM1_Init();
 80008d4:	f000 fb22 	bl	8000f1c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, str_peri, sizeof(str_peri));
 80008d8:	2201      	movs	r2, #1
 80008da:	490a      	ldr	r1, [pc, #40]	@ (8000904 <main+0x5c>)
 80008dc:	480a      	ldr	r0, [pc, #40]	@ (8000908 <main+0x60>)
 80008de:	f004 f9d9 	bl	8004c94 <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// pwm
 80008e2:	2100      	movs	r1, #0
 80008e4:	4809      	ldr	r0, [pc, #36]	@ (800090c <main+0x64>)
 80008e6:	f002 fde3 	bl	80034b0 <HAL_TIM_PWM_Start>

  echo_set();
 80008ea:	f000 f963 	bl	8000bb4 <echo_set>
  trigger_set();
 80008ee:	f000 f9d9 	bl	8000ca4 <trigger_set>
//  KalmanFilter_Init(&kf_left, 1.0f, 5.0f);
//  KalmanFilter_Init(&kf_right, 1.0f, 5.0f);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008f2:	f005 f96d 	bl	8005bd0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80008f6:	f7ff feb9 	bl	800066c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008fa:	f005 f98d 	bl	8005c18 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 80008fe:	bf00      	nop
 8000900:	e7fd      	b.n	80008fe <main+0x56>
 8000902:	bf00      	nop
 8000904:	20000088 	.word	0x20000088
 8000908:	200004ac 	.word	0x200004ac
 800090c:	2000014c 	.word	0x2000014c

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b094      	sub	sp, #80	@ 0x50
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	2230      	movs	r2, #48	@ 0x30
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f007 ff02 	bl	8008728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	4b27      	ldr	r3, [pc, #156]	@ (80009d8 <SystemClock_Config+0xc8>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093c:	4a26      	ldr	r2, [pc, #152]	@ (80009d8 <SystemClock_Config+0xc8>)
 800093e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000942:	6413      	str	r3, [r2, #64]	@ 0x40
 8000944:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <SystemClock_Config+0xc8>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <SystemClock_Config+0xcc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a20      	ldr	r2, [pc, #128]	@ (80009dc <SystemClock_Config+0xcc>)
 800095a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <SystemClock_Config+0xcc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000970:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000976:	2302      	movs	r3, #2
 8000978:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800097e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000980:	2304      	movs	r3, #4
 8000982:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000984:	2364      	movs	r3, #100	@ 0x64
 8000986:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000988:	2302      	movs	r3, #2
 800098a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800098c:	2304      	movs	r3, #4
 800098e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000990:	f107 0320 	add.w	r3, r7, #32
 8000994:	4618      	mov	r0, r3
 8000996:	f001 ffb5 	bl	8002904 <HAL_RCC_OscConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009a0:	f000 f830 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a4:	230f      	movs	r3, #15
 80009a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a8:	2302      	movs	r3, #2
 80009aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	2103      	movs	r1, #3
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fa17 	bl	8002df4 <HAL_RCC_ClockConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009cc:	f000 f81a 	bl	8000a04 <Error_Handler>
  }
}
 80009d0:	bf00      	nop
 80009d2:	3750      	adds	r7, #80	@ 0x50
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40007000 	.word	0x40007000

080009e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009f2:	f001 f8e5 	bl	8001bc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40014000 	.word	0x40014000

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <Forward>:
//	}
//
//}

void Forward()	// Forward
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2102      	movs	r1, #2
 8000a18:	480b      	ldr	r0, [pc, #44]	@ (8000a48 <Forward+0x38>)
 8000a1a:	f001 ff59 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a24:	4808      	ldr	r0, [pc, #32]	@ (8000a48 <Forward+0x38>)
 8000a26:	f001 ff53 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a30:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <Forward+0x38>)
 8000a32:	f001 ff4d 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a3c:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <Forward+0x38>)
 8000a3e:	f001 ff47 	bl	80028d0 <HAL_GPIO_WritePin>
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40020400 	.word	0x40020400

08000a4c <Backward>:


void Backward()	// Reverse
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2102      	movs	r1, #2
 8000a54:	480b      	ldr	r0, [pc, #44]	@ (8000a84 <Backward+0x38>)
 8000a56:	f001 ff3b 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a60:	4808      	ldr	r0, [pc, #32]	@ (8000a84 <Backward+0x38>)
 8000a62:	f001 ff35 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a6c:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <Backward+0x38>)
 8000a6e:	f001 ff2f 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a78:	4802      	ldr	r0, [pc, #8]	@ (8000a84 <Backward+0x38>)
 8000a7a:	f001 ff29 	bl	80028d0 <HAL_GPIO_WritePin>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40020400 	.word	0x40020400

08000a88 <Right>:


void Right()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2102      	movs	r1, #2
 8000a90:	480b      	ldr	r0, [pc, #44]	@ (8000ac0 <Right+0x38>)
 8000a92:	f001 ff1d 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a9c:	4808      	ldr	r0, [pc, #32]	@ (8000ac0 <Right+0x38>)
 8000a9e:	f001 ff17 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aa8:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <Right+0x38>)
 8000aaa:	f001 ff11 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab4:	4802      	ldr	r0, [pc, #8]	@ (8000ac0 <Right+0x38>)
 8000ab6:	f001 ff0b 	bl	80028d0 <HAL_GPIO_WritePin>
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <Right_slow>:

void Right_slow()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2102      	movs	r1, #2
 8000acc:	480b      	ldr	r0, [pc, #44]	@ (8000afc <Right_slow+0x38>)
 8000ace:	f001 feff 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ad8:	4808      	ldr	r0, [pc, #32]	@ (8000afc <Right_slow+0x38>)
 8000ada:	f001 fef9 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <Right_slow+0x38>)
 8000ae6:	f001 fef3 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <Right_slow+0x38>)
 8000af2:	f001 feed 	bl	80028d0 <HAL_GPIO_WritePin>
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40020400 	.word	0x40020400

08000b00 <Left>:

void Left()
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2102      	movs	r1, #2
 8000b08:	480b      	ldr	r0, [pc, #44]	@ (8000b38 <Left+0x38>)
 8000b0a:	f001 fee1 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b14:	4808      	ldr	r0, [pc, #32]	@ (8000b38 <Left+0x38>)
 8000b16:	f001 fedb 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b20:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <Left+0x38>)
 8000b22:	f001 fed5 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <Left+0x38>)
 8000b2e:	f001 fecf 	bl	80028d0 <HAL_GPIO_WritePin>
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40020400 	.word	0x40020400

08000b3c <Left_slow>:

void Left_slow()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2102      	movs	r1, #2
 8000b44:	480b      	ldr	r0, [pc, #44]	@ (8000b74 <Left_slow+0x38>)
 8000b46:	f001 fec3 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b50:	4808      	ldr	r0, [pc, #32]	@ (8000b74 <Left_slow+0x38>)
 8000b52:	f001 febd 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b5c:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <Left_slow+0x38>)
 8000b5e:	f001 feb7 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <Left_slow+0x38>)
 8000b6a:	f001 feb1 	bl	80028d0 <HAL_GPIO_WritePin>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40020400 	.word	0x40020400

08000b78 <STOP>:

void STOP()
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2102      	movs	r1, #2
 8000b80:	480b      	ldr	r0, [pc, #44]	@ (8000bb0 <STOP+0x38>)
 8000b82:	f001 fea5 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b8c:	4808      	ldr	r0, [pc, #32]	@ (8000bb0 <STOP+0x38>)
 8000b8e:	f001 fe9f 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b98:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <STOP+0x38>)
 8000b9a:	f001 fe99 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ba4:	4802      	ldr	r0, [pc, #8]	@ (8000bb0 <STOP+0x38>)
 8000ba6:	f001 fe93 	bl	80028d0 <HAL_GPIO_WritePin>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40020400 	.word	0x40020400

08000bb4 <echo_set>:
uint32_t echo_right_rise_time, echo_right_fall_time;

uint32_t right_value, left_value;

void echo_set()
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, &echo_left_rise_time, 1);
 8000bb8:	2301      	movs	r3, #1
 8000bba:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <echo_set+0x50>)
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4812      	ldr	r0, [pc, #72]	@ (8000c08 <echo_set+0x54>)
 8000bc0:	f002 fd80 	bl	80036c4 <HAL_TIM_IC_Start_DMA>
	HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_2, &echo_left_fall_time, 1);
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	4a11      	ldr	r2, [pc, #68]	@ (8000c0c <echo_set+0x58>)
 8000bc8:	2104      	movs	r1, #4
 8000bca:	480f      	ldr	r0, [pc, #60]	@ (8000c08 <echo_set+0x54>)
 8000bcc:	f002 fd7a 	bl	80036c4 <HAL_TIM_IC_Start_DMA>
	HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_3, &echo_center_rise_time, 1);
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c10 <echo_set+0x5c>)
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <echo_set+0x54>)
 8000bd8:	f002 fd74 	bl	80036c4 <HAL_TIM_IC_Start_DMA>
	HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_4, &echo_center_fall_time, 1);
 8000bdc:	2301      	movs	r3, #1
 8000bde:	4a0d      	ldr	r2, [pc, #52]	@ (8000c14 <echo_set+0x60>)
 8000be0:	210c      	movs	r1, #12
 8000be2:	4809      	ldr	r0, [pc, #36]	@ (8000c08 <echo_set+0x54>)
 8000be4:	f002 fd6e 	bl	80036c4 <HAL_TIM_IC_Start_DMA>
	HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_1, &echo_right_rise_time, 1);
 8000be8:	2301      	movs	r3, #1
 8000bea:	4a0b      	ldr	r2, [pc, #44]	@ (8000c18 <echo_set+0x64>)
 8000bec:	2100      	movs	r1, #0
 8000bee:	480b      	ldr	r0, [pc, #44]	@ (8000c1c <echo_set+0x68>)
 8000bf0:	f002 fd68 	bl	80036c4 <HAL_TIM_IC_Start_DMA>
	HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_2, &echo_right_fall_time, 1);
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <echo_set+0x6c>)
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <echo_set+0x68>)
 8000bfc:	f002 fd62 	bl	80036c4 <HAL_TIM_IC_Start_DMA>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200000a4 	.word	0x200000a4
 8000c08:	20000194 	.word	0x20000194
 8000c0c:	200000a8 	.word	0x200000a8
 8000c10:	200000ac 	.word	0x200000ac
 8000c14:	200000b0 	.word	0x200000b0
 8000c18:	200000b4 	.word	0x200000b4
 8000c1c:	200001dc 	.word	0x200001dc
 8000c20:	200000b8 	.word	0x200000b8

08000c24 <echo_get>:

void echo_get()
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
	if (echo_left_fall_time > echo_left_rise_time){
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <echo_get+0x5c>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <echo_get+0x60>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d906      	bls.n	8000c42 <echo_get+0x1e>
		echo_left_time = echo_left_fall_time - echo_left_rise_time;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <echo_get+0x5c>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <echo_get+0x60>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	4a12      	ldr	r2, [pc, #72]	@ (8000c88 <echo_get+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]
	}
	if (echo_center_fall_time > echo_center_rise_time) {
 8000c42:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <echo_get+0x68>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <echo_get+0x6c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d906      	bls.n	8000c5c <echo_get+0x38>
		echo_center_time = echo_center_fall_time - echo_center_rise_time;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <echo_get+0x68>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <echo_get+0x6c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	4a0e      	ldr	r2, [pc, #56]	@ (8000c94 <echo_get+0x70>)
 8000c5a:	6013      	str	r3, [r2, #0]
	}
	if (echo_right_fall_time > echo_right_rise_time){
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <echo_get+0x74>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <echo_get+0x78>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d906      	bls.n	8000c76 <echo_get+0x52>
		echo_right_time = echo_right_fall_time - echo_right_rise_time;
 8000c68:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <echo_get+0x74>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <echo_get+0x78>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca0 <echo_get+0x7c>)
 8000c74:	6013      	str	r3, [r2, #0]
	}

}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	200000a8 	.word	0x200000a8
 8000c84:	200000a4 	.word	0x200000a4
 8000c88:	20000098 	.word	0x20000098
 8000c8c:	200000b0 	.word	0x200000b0
 8000c90:	200000ac 	.word	0x200000ac
 8000c94:	2000009c 	.word	0x2000009c
 8000c98:	200000b8 	.word	0x200000b8
 8000c9c:	200000b4 	.word	0x200000b4
 8000ca0:	200000a0 	.word	0x200000a0

08000ca4 <trigger_set>:

void trigger_set()
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <trigger_set+0x20>)
 8000cac:	f002 fc00 	bl	80034b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	4804      	ldr	r0, [pc, #16]	@ (8000cc4 <trigger_set+0x20>)
 8000cb4:	f002 fbfc 	bl	80034b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000cb8:	2108      	movs	r1, #8
 8000cba:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <trigger_set+0x20>)
 8000cbc:	f002 fbf8 	bl	80034b0 <HAL_TIM_PWM_Start>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000104 	.word	0x20000104

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <HAL_MspInit+0x54>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	4a11      	ldr	r2, [pc, #68]	@ (8000d1c <HAL_MspInit+0x54>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cde:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <HAL_MspInit+0x54>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <HAL_MspInit+0x54>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <HAL_MspInit+0x54>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_MspInit+0x54>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	210f      	movs	r1, #15
 8000d0a:	f06f 0001 	mvn.w	r0, #1
 8000d0e:	f001 f82f 	bl	8001d70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	@ 0x30
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <HAL_InitTick+0xd0>)
 8000d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d38:	4a2d      	ldr	r2, [pc, #180]	@ (8000df0 <HAL_InitTick+0xd0>)
 8000d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <HAL_InitTick+0xd0>)
 8000d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d4c:	f107 020c 	add.w	r2, r7, #12
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f002 fa6c 	bl	8003234 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d5c:	f002 fa56 	bl	800320c <HAL_RCC_GetPCLK2Freq>
 8000d60:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d64:	4a23      	ldr	r2, [pc, #140]	@ (8000df4 <HAL_InitTick+0xd4>)
 8000d66:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6a:	0c9b      	lsrs	r3, r3, #18
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000d70:	4b21      	ldr	r3, [pc, #132]	@ (8000df8 <HAL_InitTick+0xd8>)
 8000d72:	4a22      	ldr	r2, [pc, #136]	@ (8000dfc <HAL_InitTick+0xdc>)
 8000d74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000d76:	4b20      	ldr	r3, [pc, #128]	@ (8000df8 <HAL_InitTick+0xd8>)
 8000d78:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d7c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000df8 <HAL_InitTick+0xd8>)
 8000d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d82:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000d84:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <HAL_InitTick+0xd8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000df8 <HAL_InitTick+0xd8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d90:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <HAL_InitTick+0xd8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8000d96:	4818      	ldr	r0, [pc, #96]	@ (8000df8 <HAL_InitTick+0xd8>)
 8000d98:	f002 fa7e 	bl	8003298 <HAL_TIM_Base_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000da2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d11b      	bne.n	8000de2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8000daa:	4813      	ldr	r0, [pc, #76]	@ (8000df8 <HAL_InitTick+0xd8>)
 8000dac:	f002 fac4 	bl	8003338 <HAL_TIM_Base_Start_IT>
 8000db0:	4603      	mov	r3, r0
 8000db2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000db6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d111      	bne.n	8000de2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000dbe:	2018      	movs	r0, #24
 8000dc0:	f000 fff2 	bl	8001da8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b0f      	cmp	r3, #15
 8000dc8:	d808      	bhi.n	8000ddc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	2018      	movs	r0, #24
 8000dd0:	f000 ffce 	bl	8001d70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <HAL_InitTick+0xe0>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e002      	b.n	8000de2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000de2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3730      	adds	r7, #48	@ 0x30
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	431bde83 	.word	0x431bde83
 8000df8:	200000bc 	.word	0x200000bc
 8000dfc:	40014000 	.word	0x40014000
 8000e00:	20000010 	.word	0x20000010

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <NMI_Handler+0x4>

08000e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8000e40:	4802      	ldr	r0, [pc, #8]	@ (8000e4c <DMA1_Stream0_IRQHandler+0x10>)
 8000e42:	f001 f957 	bl	80020f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200003ec 	.word	0x200003ec

08000e50 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <DMA1_Stream2_IRQHandler+0x10>)
 8000e56:	f001 f94d 	bl	80020f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000038c 	.word	0x2000038c

08000e64 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <DMA1_Stream3_IRQHandler+0x10>)
 8000e6a:	f001 f943 	bl	80020f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000044c 	.word	0x2000044c

08000e78 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <DMA1_Stream4_IRQHandler+0x10>)
 8000e7e:	f001 f939 	bl	80020f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000026c 	.word	0x2000026c

08000e8c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8000e90:	4802      	ldr	r0, [pc, #8]	@ (8000e9c <DMA1_Stream5_IRQHandler+0x10>)
 8000e92:	f001 f92f 	bl	80020f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200002cc 	.word	0x200002cc

08000ea0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ea4:	4803      	ldr	r0, [pc, #12]	@ (8000eb4 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8000ea6:	f002 fda9 	bl	80039fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8000eaa:	4803      	ldr	r0, [pc, #12]	@ (8000eb8 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8000eac:	f002 fda6 	bl	80039fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000104 	.word	0x20000104
 8000eb8:	200000bc 	.word	0x200000bc

08000ebc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ec0:	4802      	ldr	r0, [pc, #8]	@ (8000ecc <USART1_IRQHandler+0x10>)
 8000ec2:	f003 ff45 	bl	8004d50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200004ac 	.word	0x200004ac

08000ed0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ed4:	4802      	ldr	r0, [pc, #8]	@ (8000ee0 <USART2_IRQHandler+0x10>)
 8000ed6:	f003 ff3b 	bl	8004d50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200004f4 	.word	0x200004f4

08000ee4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8000ee8:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <DMA1_Stream7_IRQHandler+0x10>)
 8000eea:	f001 f903 	bl	80020f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000032c 	.word	0x2000032c

08000ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim4_ch1;
DMA_HandleTypeDef hdma_tim4_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b096      	sub	sp, #88	@ 0x58
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f22:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	615a      	str	r2, [r3, #20]
 8000f4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2220      	movs	r2, #32
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f007 fbe7 	bl	8008728 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8001088 <MX_TIM1_Init+0x16c>)
 8000f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800108c <MX_TIM1_Init+0x170>)
 8000f5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8000f60:	4b49      	ldr	r3, [pc, #292]	@ (8001088 <MX_TIM1_Init+0x16c>)
 8000f62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f68:	4b47      	ldr	r3, [pc, #284]	@ (8001088 <MX_TIM1_Init+0x16c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000f6e:	4b46      	ldr	r3, [pc, #280]	@ (8001088 <MX_TIM1_Init+0x16c>)
 8000f70:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f76:	4b44      	ldr	r3, [pc, #272]	@ (8001088 <MX_TIM1_Init+0x16c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f7c:	4b42      	ldr	r3, [pc, #264]	@ (8001088 <MX_TIM1_Init+0x16c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	4b41      	ldr	r3, [pc, #260]	@ (8001088 <MX_TIM1_Init+0x16c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f88:	483f      	ldr	r0, [pc, #252]	@ (8001088 <MX_TIM1_Init+0x16c>)
 8000f8a:	f002 f985 	bl	8003298 <HAL_TIM_Base_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f94:	f7ff fd36 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f9e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4838      	ldr	r0, [pc, #224]	@ (8001088 <MX_TIM1_Init+0x16c>)
 8000fa6:	f002 ff77 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fb0:	f7ff fd28 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fb4:	4834      	ldr	r0, [pc, #208]	@ (8001088 <MX_TIM1_Init+0x16c>)
 8000fb6:	f002 fa21 	bl	80033fc <HAL_TIM_PWM_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fc0:	f7ff fd20 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fcc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	482d      	ldr	r0, [pc, #180]	@ (8001088 <MX_TIM1_Init+0x16c>)
 8000fd4:	f003 fd3a 	bl	8004a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000fde:	f7ff fd11 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe2:	2360      	movs	r3, #96	@ 0x60
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	4820      	ldr	r0, [pc, #128]	@ (8001088 <MX_TIM1_Init+0x16c>)
 8001008:	f002 fe84 	bl	8003d14 <HAL_TIM_PWM_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001012:	f7ff fcf7 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101a:	2204      	movs	r2, #4
 800101c:	4619      	mov	r1, r3
 800101e:	481a      	ldr	r0, [pc, #104]	@ (8001088 <MX_TIM1_Init+0x16c>)
 8001020:	f002 fe78 	bl	8003d14 <HAL_TIM_PWM_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800102a:	f7ff fceb 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800102e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001032:	2208      	movs	r2, #8
 8001034:	4619      	mov	r1, r3
 8001036:	4814      	ldr	r0, [pc, #80]	@ (8001088 <MX_TIM1_Init+0x16c>)
 8001038:	f002 fe6c 	bl	8003d14 <HAL_TIM_PWM_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001042:	f7ff fcdf 	bl	8000a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800105a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800105e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	4619      	mov	r1, r3
 8001068:	4807      	ldr	r0, [pc, #28]	@ (8001088 <MX_TIM1_Init+0x16c>)
 800106a:	f003 fd5d 	bl	8004b28 <HAL_TIMEx_ConfigBreakDeadTime>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001074:	f7ff fcc6 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001078:	4803      	ldr	r0, [pc, #12]	@ (8001088 <MX_TIM1_Init+0x16c>)
 800107a:	f000 fbf7 	bl	800186c <HAL_TIM_MspPostInit>

}
 800107e:	bf00      	nop
 8001080:	3758      	adds	r7, #88	@ 0x58
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000104 	.word	0x20000104
 800108c:	40010000 	.word	0x40010000

08001090 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08e      	sub	sp, #56	@ 0x38
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	f107 0320 	add.w	r3, r7, #32
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	615a      	str	r2, [r3, #20]
 80010be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001178 <MX_TIM2_Init+0xe8>)
 80010c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 80010c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001178 <MX_TIM2_Init+0xe8>)
 80010ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b29      	ldr	r3, [pc, #164]	@ (8001178 <MX_TIM2_Init+0xe8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80010d6:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <MX_TIM2_Init+0xe8>)
 80010d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b26      	ldr	r3, [pc, #152]	@ (8001178 <MX_TIM2_Init+0xe8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <MX_TIM2_Init+0xe8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ea:	4823      	ldr	r0, [pc, #140]	@ (8001178 <MX_TIM2_Init+0xe8>)
 80010ec:	f002 f8d4 	bl	8003298 <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010f6:	f7ff fc85 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001100:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001104:	4619      	mov	r1, r3
 8001106:	481c      	ldr	r0, [pc, #112]	@ (8001178 <MX_TIM2_Init+0xe8>)
 8001108:	f002 fec6 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001112:	f7ff fc77 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001116:	4818      	ldr	r0, [pc, #96]	@ (8001178 <MX_TIM2_Init+0xe8>)
 8001118:	f002 f970 	bl	80033fc <HAL_TIM_PWM_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001122:	f7ff fc6f 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	4619      	mov	r1, r3
 8001134:	4810      	ldr	r0, [pc, #64]	@ (8001178 <MX_TIM2_Init+0xe8>)
 8001136:	f003 fc89 	bl	8004a4c <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001140:	f7ff fc60 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001144:	2360      	movs	r3, #96	@ 0x60
 8001146:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	4807      	ldr	r0, [pc, #28]	@ (8001178 <MX_TIM2_Init+0xe8>)
 800115c:	f002 fdda 	bl	8003d14 <HAL_TIM_PWM_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001166:	f7ff fc4d 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800116a:	4803      	ldr	r0, [pc, #12]	@ (8001178 <MX_TIM2_Init+0xe8>)
 800116c:	f000 fb7e 	bl	800186c <HAL_TIM_MspPostInit>

}
 8001170:	bf00      	nop
 8001172:	3738      	adds	r7, #56	@ 0x38
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000014c 	.word	0x2000014c

0800117c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011a6:	4b42      	ldr	r3, [pc, #264]	@ (80012b0 <MX_TIM3_Init+0x134>)
 80011a8:	4a42      	ldr	r2, [pc, #264]	@ (80012b4 <MX_TIM3_Init+0x138>)
 80011aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 80011ac:	4b40      	ldr	r3, [pc, #256]	@ (80012b0 <MX_TIM3_Init+0x134>)
 80011ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b4:	4b3e      	ldr	r3, [pc, #248]	@ (80012b0 <MX_TIM3_Init+0x134>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80011ba:	4b3d      	ldr	r3, [pc, #244]	@ (80012b0 <MX_TIM3_Init+0x134>)
 80011bc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c2:	4b3b      	ldr	r3, [pc, #236]	@ (80012b0 <MX_TIM3_Init+0x134>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c8:	4b39      	ldr	r3, [pc, #228]	@ (80012b0 <MX_TIM3_Init+0x134>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ce:	4838      	ldr	r0, [pc, #224]	@ (80012b0 <MX_TIM3_Init+0x134>)
 80011d0:	f002 f862 	bl	8003298 <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80011da:	f7ff fc13 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	4619      	mov	r1, r3
 80011ea:	4831      	ldr	r0, [pc, #196]	@ (80012b0 <MX_TIM3_Init+0x134>)
 80011ec:	f002 fe54 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80011f6:	f7ff fc05 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80011fa:	482d      	ldr	r0, [pc, #180]	@ (80012b0 <MX_TIM3_Init+0x134>)
 80011fc:	f002 fa08 	bl	8003610 <HAL_TIM_IC_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001206:	f7ff fbfd 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4619      	mov	r1, r3
 8001218:	4825      	ldr	r0, [pc, #148]	@ (80012b0 <MX_TIM3_Init+0x134>)
 800121a:	f003 fc17 	bl	8004a4c <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001224:	f7ff fbee 	bl	8000a04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001228:	2300      	movs	r3, #0
 800122a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800122c:	2301      	movs	r3, #1
 800122e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	4619      	mov	r1, r3
 800123e:	481c      	ldr	r0, [pc, #112]	@ (80012b0 <MX_TIM3_Init+0x134>)
 8001240:	f002 fccc 	bl	8003bdc <HAL_TIM_IC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800124a:	f7ff fbdb 	bl	8000a04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800124e:	2302      	movs	r3, #2
 8001250:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001252:	2302      	movs	r3, #2
 8001254:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	2204      	movs	r2, #4
 800125a:	4619      	mov	r1, r3
 800125c:	4814      	ldr	r0, [pc, #80]	@ (80012b0 <MX_TIM3_Init+0x134>)
 800125e:	f002 fcbd 	bl	8003bdc <HAL_TIM_IC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001268:	f7ff fbcc 	bl	8000a04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800126c:	2300      	movs	r3, #0
 800126e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001270:	2301      	movs	r3, #1
 8001272:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	2208      	movs	r2, #8
 8001278:	4619      	mov	r1, r3
 800127a:	480d      	ldr	r0, [pc, #52]	@ (80012b0 <MX_TIM3_Init+0x134>)
 800127c:	f002 fcae 	bl	8003bdc <HAL_TIM_IC_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8001286:	f7ff fbbd 	bl	8000a04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800128a:	2302      	movs	r3, #2
 800128c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800128e:	2302      	movs	r3, #2
 8001290:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001292:	463b      	mov	r3, r7
 8001294:	220c      	movs	r2, #12
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_TIM3_Init+0x134>)
 800129a:	f002 fc9f 	bl	8003bdc <HAL_TIM_IC_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 80012a4:	f7ff fbae 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	@ 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000194 	.word	0x20000194
 80012b4:	40000400 	.word	0x40000400

080012b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	@ 0x28
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0318 	add.w	r3, r7, #24
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012d6:	463b      	mov	r3, r7
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012e2:	4b33      	ldr	r3, [pc, #204]	@ (80013b0 <MX_TIM4_Init+0xf8>)
 80012e4:	4a33      	ldr	r2, [pc, #204]	@ (80013b4 <MX_TIM4_Init+0xfc>)
 80012e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 80012e8:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <MX_TIM4_Init+0xf8>)
 80012ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b2f      	ldr	r3, [pc, #188]	@ (80013b0 <MX_TIM4_Init+0xf8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80012f6:	4b2e      	ldr	r3, [pc, #184]	@ (80013b0 <MX_TIM4_Init+0xf8>)
 80012f8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fe:	4b2c      	ldr	r3, [pc, #176]	@ (80013b0 <MX_TIM4_Init+0xf8>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001304:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <MX_TIM4_Init+0xf8>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800130a:	4829      	ldr	r0, [pc, #164]	@ (80013b0 <MX_TIM4_Init+0xf8>)
 800130c:	f001 ffc4 	bl	8003298 <HAL_TIM_Base_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001316:	f7ff fb75 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001320:	f107 0318 	add.w	r3, r7, #24
 8001324:	4619      	mov	r1, r3
 8001326:	4822      	ldr	r0, [pc, #136]	@ (80013b0 <MX_TIM4_Init+0xf8>)
 8001328:	f002 fdb6 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001332:	f7ff fb67 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001336:	481e      	ldr	r0, [pc, #120]	@ (80013b0 <MX_TIM4_Init+0xf8>)
 8001338:	f002 f96a 	bl	8003610 <HAL_TIM_IC_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001342:	f7ff fb5f 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4619      	mov	r1, r3
 8001354:	4816      	ldr	r0, [pc, #88]	@ (80013b0 <MX_TIM4_Init+0xf8>)
 8001356:	f003 fb79 	bl	8004a4c <HAL_TIMEx_MasterConfigSynchronization>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001360:	f7ff fb50 	bl	8000a04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001364:	2300      	movs	r3, #0
 8001366:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001368:	2301      	movs	r3, #1
 800136a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <MX_TIM4_Init+0xf8>)
 800137c:	f002 fc2e 	bl	8003bdc <HAL_TIM_IC_ConfigChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001386:	f7ff fb3d 	bl	8000a04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800138a:	2302      	movs	r3, #2
 800138c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800138e:	2302      	movs	r3, #2
 8001390:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	2204      	movs	r2, #4
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_TIM4_Init+0xf8>)
 800139a:	f002 fc1f 	bl	8003bdc <HAL_TIM_IC_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 80013a4:	f7ff fb2e 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	@ 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200001dc 	.word	0x200001dc
 80013b4:	40000800 	.word	0x40000800

080013b8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80013bc:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <MX_TIM11_Init+0x40>)
 80013be:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <MX_TIM11_Init+0x44>)
 80013c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 80013c2:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <MX_TIM11_Init+0x40>)
 80013c4:	2263      	movs	r2, #99	@ 0x63
 80013c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <MX_TIM11_Init+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80013ce:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <MX_TIM11_Init+0x40>)
 80013d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d6:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <MX_TIM11_Init+0x40>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <MX_TIM11_Init+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <MX_TIM11_Init+0x40>)
 80013e4:	f001 ff58 	bl	8003298 <HAL_TIM_Base_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80013ee:	f7ff fb09 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000224 	.word	0x20000224
 80013fc:	40014800 	.word	0x40014800

08001400 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b090      	sub	sp, #64	@ 0x40
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a16      	ldr	r2, [pc, #88]	@ (8001478 <HAL_TIM_Base_MspInit+0x78>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d116      	bne.n	8001450 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_TIM_Base_MspInit+0x7c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	4a14      	ldr	r2, [pc, #80]	@ (800147c <HAL_TIM_Base_MspInit+0x7c>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6453      	str	r3, [r2, #68]	@ 0x44
 8001432:	4b12      	ldr	r3, [pc, #72]	@ (800147c <HAL_TIM_Base_MspInit+0x7c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800143c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2105      	movs	r1, #5
 8001442:	2018      	movs	r0, #24
 8001444:	f000 fc94 	bl	8001d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001448:	2018      	movs	r0, #24
 800144a:	f000 fcad 	bl	8001da8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800144e:	e1f9      	b.n	8001844 <HAL_TIM_Base_MspInit+0x444>
  else if(tim_baseHandle->Instance==TIM2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001458:	d112      	bne.n	8001480 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
 800145e:	4b07      	ldr	r3, [pc, #28]	@ (800147c <HAL_TIM_Base_MspInit+0x7c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	4a06      	ldr	r2, [pc, #24]	@ (800147c <HAL_TIM_Base_MspInit+0x7c>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6413      	str	r3, [r2, #64]	@ 0x40
 800146a:	4b04      	ldr	r3, [pc, #16]	@ (800147c <HAL_TIM_Base_MspInit+0x7c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001476:	e1e5      	b.n	8001844 <HAL_TIM_Base_MspInit+0x444>
 8001478:	40010000 	.word	0x40010000
 800147c:	40023800 	.word	0x40023800
  else if(tim_baseHandle->Instance==TIM3)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a8f      	ldr	r2, [pc, #572]	@ (80016c4 <HAL_TIM_Base_MspInit+0x2c4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	f040 8134 	bne.w	80016f4 <HAL_TIM_Base_MspInit+0x2f4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
 8001490:	4b8d      	ldr	r3, [pc, #564]	@ (80016c8 <HAL_TIM_Base_MspInit+0x2c8>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001494:	4a8c      	ldr	r2, [pc, #560]	@ (80016c8 <HAL_TIM_Base_MspInit+0x2c8>)
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	6413      	str	r3, [r2, #64]	@ 0x40
 800149c:	4b8a      	ldr	r3, [pc, #552]	@ (80016c8 <HAL_TIM_Base_MspInit+0x2c8>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	623b      	str	r3, [r7, #32]
 80014a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	4b86      	ldr	r3, [pc, #536]	@ (80016c8 <HAL_TIM_Base_MspInit+0x2c8>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b0:	4a85      	ldr	r2, [pc, #532]	@ (80016c8 <HAL_TIM_Base_MspInit+0x2c8>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b8:	4b83      	ldr	r3, [pc, #524]	@ (80016c8 <HAL_TIM_Base_MspInit+0x2c8>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	4b7f      	ldr	r3, [pc, #508]	@ (80016c8 <HAL_TIM_Base_MspInit+0x2c8>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014cc:	4a7e      	ldr	r2, [pc, #504]	@ (80016c8 <HAL_TIM_Base_MspInit+0x2c8>)
 80014ce:	f043 0302 	orr.w	r3, r3, #2
 80014d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d4:	4b7c      	ldr	r3, [pc, #496]	@ (80016c8 <HAL_TIM_Base_MspInit+0x2c8>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014e0:	2340      	movs	r3, #64	@ 0x40
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014f0:	2302      	movs	r3, #2
 80014f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014f8:	4619      	mov	r1, r3
 80014fa:	4874      	ldr	r0, [pc, #464]	@ (80016cc <HAL_TIM_Base_MspInit+0x2cc>)
 80014fc:	f001 f864 	bl	80025c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001500:	2301      	movs	r3, #1
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001510:	2302      	movs	r3, #2
 8001512:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001518:	4619      	mov	r1, r3
 800151a:	486d      	ldr	r0, [pc, #436]	@ (80016d0 <HAL_TIM_Base_MspInit+0x2d0>)
 800151c:	f001 f854 	bl	80025c8 <HAL_GPIO_Init>
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8001520:	4b6c      	ldr	r3, [pc, #432]	@ (80016d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8001522:	4a6d      	ldr	r2, [pc, #436]	@ (80016d8 <HAL_TIM_Base_MspInit+0x2d8>)
 8001524:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001526:	4b6b      	ldr	r3, [pc, #428]	@ (80016d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8001528:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800152c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800152e:	4b69      	ldr	r3, [pc, #420]	@ (80016d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001534:	4b67      	ldr	r3, [pc, #412]	@ (80016d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800153a:	4b66      	ldr	r3, [pc, #408]	@ (80016d4 <HAL_TIM_Base_MspInit+0x2d4>)
 800153c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001540:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001542:	4b64      	ldr	r3, [pc, #400]	@ (80016d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8001544:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001548:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800154a:	4b62      	ldr	r3, [pc, #392]	@ (80016d4 <HAL_TIM_Base_MspInit+0x2d4>)
 800154c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001550:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8001552:	4b60      	ldr	r3, [pc, #384]	@ (80016d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8001554:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001558:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800155a:	4b5e      	ldr	r3, [pc, #376]	@ (80016d4 <HAL_TIM_Base_MspInit+0x2d4>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001560:	4b5c      	ldr	r3, [pc, #368]	@ (80016d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8001562:	2200      	movs	r2, #0
 8001564:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001566:	485b      	ldr	r0, [pc, #364]	@ (80016d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8001568:	f000 fc2c 	bl	8001dc4 <HAL_DMA_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_TIM_Base_MspInit+0x176>
      Error_Handler();
 8001572:	f7ff fa47 	bl	8000a04 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a56      	ldr	r2, [pc, #344]	@ (80016d4 <HAL_TIM_Base_MspInit+0x2d4>)
 800157a:	625a      	str	r2, [r3, #36]	@ 0x24
 800157c:	4a55      	ldr	r2, [pc, #340]	@ (80016d4 <HAL_TIM_Base_MspInit+0x2d4>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a53      	ldr	r2, [pc, #332]	@ (80016d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8001586:	639a      	str	r2, [r3, #56]	@ 0x38
 8001588:	4a52      	ldr	r2, [pc, #328]	@ (80016d4 <HAL_TIM_Base_MspInit+0x2d4>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800158e:	4b53      	ldr	r3, [pc, #332]	@ (80016dc <HAL_TIM_Base_MspInit+0x2dc>)
 8001590:	4a53      	ldr	r2, [pc, #332]	@ (80016e0 <HAL_TIM_Base_MspInit+0x2e0>)
 8001592:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8001594:	4b51      	ldr	r3, [pc, #324]	@ (80016dc <HAL_TIM_Base_MspInit+0x2dc>)
 8001596:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800159a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159c:	4b4f      	ldr	r3, [pc, #316]	@ (80016dc <HAL_TIM_Base_MspInit+0x2dc>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a2:	4b4e      	ldr	r3, [pc, #312]	@ (80016dc <HAL_TIM_Base_MspInit+0x2dc>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80015a8:	4b4c      	ldr	r3, [pc, #304]	@ (80016dc <HAL_TIM_Base_MspInit+0x2dc>)
 80015aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ae:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015b0:	4b4a      	ldr	r3, [pc, #296]	@ (80016dc <HAL_TIM_Base_MspInit+0x2dc>)
 80015b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015b6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015b8:	4b48      	ldr	r3, [pc, #288]	@ (80016dc <HAL_TIM_Base_MspInit+0x2dc>)
 80015ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015be:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 80015c0:	4b46      	ldr	r3, [pc, #280]	@ (80016dc <HAL_TIM_Base_MspInit+0x2dc>)
 80015c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015c6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80015c8:	4b44      	ldr	r3, [pc, #272]	@ (80016dc <HAL_TIM_Base_MspInit+0x2dc>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ce:	4b43      	ldr	r3, [pc, #268]	@ (80016dc <HAL_TIM_Base_MspInit+0x2dc>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80015d4:	4841      	ldr	r0, [pc, #260]	@ (80016dc <HAL_TIM_Base_MspInit+0x2dc>)
 80015d6:	f000 fbf5 	bl	8001dc4 <HAL_DMA_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_TIM_Base_MspInit+0x1e4>
      Error_Handler();
 80015e0:	f7ff fa10 	bl	8000a04 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a3d      	ldr	r2, [pc, #244]	@ (80016dc <HAL_TIM_Base_MspInit+0x2dc>)
 80015e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80015ea:	4a3c      	ldr	r2, [pc, #240]	@ (80016dc <HAL_TIM_Base_MspInit+0x2dc>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 80015f0:	4b3c      	ldr	r3, [pc, #240]	@ (80016e4 <HAL_TIM_Base_MspInit+0x2e4>)
 80015f2:	4a3d      	ldr	r2, [pc, #244]	@ (80016e8 <HAL_TIM_Base_MspInit+0x2e8>)
 80015f4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 80015f6:	4b3b      	ldr	r3, [pc, #236]	@ (80016e4 <HAL_TIM_Base_MspInit+0x2e4>)
 80015f8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80015fc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015fe:	4b39      	ldr	r3, [pc, #228]	@ (80016e4 <HAL_TIM_Base_MspInit+0x2e4>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001604:	4b37      	ldr	r3, [pc, #220]	@ (80016e4 <HAL_TIM_Base_MspInit+0x2e4>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800160a:	4b36      	ldr	r3, [pc, #216]	@ (80016e4 <HAL_TIM_Base_MspInit+0x2e4>)
 800160c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001610:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001612:	4b34      	ldr	r3, [pc, #208]	@ (80016e4 <HAL_TIM_Base_MspInit+0x2e4>)
 8001614:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001618:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800161a:	4b32      	ldr	r3, [pc, #200]	@ (80016e4 <HAL_TIM_Base_MspInit+0x2e4>)
 800161c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001620:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8001622:	4b30      	ldr	r3, [pc, #192]	@ (80016e4 <HAL_TIM_Base_MspInit+0x2e4>)
 8001624:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001628:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800162a:	4b2e      	ldr	r3, [pc, #184]	@ (80016e4 <HAL_TIM_Base_MspInit+0x2e4>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001630:	4b2c      	ldr	r3, [pc, #176]	@ (80016e4 <HAL_TIM_Base_MspInit+0x2e4>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8001636:	482b      	ldr	r0, [pc, #172]	@ (80016e4 <HAL_TIM_Base_MspInit+0x2e4>)
 8001638:	f000 fbc4 	bl	8001dc4 <HAL_DMA_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_TIM_Base_MspInit+0x246>
      Error_Handler();
 8001642:	f7ff f9df 	bl	8000a04 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a26      	ldr	r2, [pc, #152]	@ (80016e4 <HAL_TIM_Base_MspInit+0x2e4>)
 800164a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800164c:	4a25      	ldr	r2, [pc, #148]	@ (80016e4 <HAL_TIM_Base_MspInit+0x2e4>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8001652:	4b26      	ldr	r3, [pc, #152]	@ (80016ec <HAL_TIM_Base_MspInit+0x2ec>)
 8001654:	4a26      	ldr	r2, [pc, #152]	@ (80016f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8001656:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8001658:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <HAL_TIM_Base_MspInit+0x2ec>)
 800165a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800165e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001660:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <HAL_TIM_Base_MspInit+0x2ec>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <HAL_TIM_Base_MspInit+0x2ec>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <HAL_TIM_Base_MspInit+0x2ec>)
 800166e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001672:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001674:	4b1d      	ldr	r3, [pc, #116]	@ (80016ec <HAL_TIM_Base_MspInit+0x2ec>)
 8001676:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800167a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800167c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <HAL_TIM_Base_MspInit+0x2ec>)
 800167e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001682:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8001684:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <HAL_TIM_Base_MspInit+0x2ec>)
 8001686:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800168a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 800168c:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <HAL_TIM_Base_MspInit+0x2ec>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <HAL_TIM_Base_MspInit+0x2ec>)
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001698:	4814      	ldr	r0, [pc, #80]	@ (80016ec <HAL_TIM_Base_MspInit+0x2ec>)
 800169a:	f000 fb93 	bl	8001dc4 <HAL_DMA_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_TIM_Base_MspInit+0x2a8>
      Error_Handler();
 80016a4:	f7ff f9ae 	bl	8000a04 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a10      	ldr	r2, [pc, #64]	@ (80016ec <HAL_TIM_Base_MspInit+0x2ec>)
 80016ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80016ae:	4a0f      	ldr	r2, [pc, #60]	@ (80016ec <HAL_TIM_Base_MspInit+0x2ec>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a0d      	ldr	r2, [pc, #52]	@ (80016ec <HAL_TIM_Base_MspInit+0x2ec>)
 80016b8:	621a      	str	r2, [r3, #32]
 80016ba:	4a0c      	ldr	r2, [pc, #48]	@ (80016ec <HAL_TIM_Base_MspInit+0x2ec>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80016c0:	e0c0      	b.n	8001844 <HAL_TIM_Base_MspInit+0x444>
 80016c2:	bf00      	nop
 80016c4:	40000400 	.word	0x40000400
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400
 80016d4:	2000026c 	.word	0x2000026c
 80016d8:	40026070 	.word	0x40026070
 80016dc:	200002cc 	.word	0x200002cc
 80016e0:	40026088 	.word	0x40026088
 80016e4:	2000032c 	.word	0x2000032c
 80016e8:	400260b8 	.word	0x400260b8
 80016ec:	2000038c 	.word	0x2000038c
 80016f0:	40026040 	.word	0x40026040
  else if(tim_baseHandle->Instance==TIM4)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a54      	ldr	r2, [pc, #336]	@ (800184c <HAL_TIM_Base_MspInit+0x44c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	f040 808f 	bne.w	800181e <HAL_TIM_Base_MspInit+0x41e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	4b52      	ldr	r3, [pc, #328]	@ (8001850 <HAL_TIM_Base_MspInit+0x450>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	4a51      	ldr	r2, [pc, #324]	@ (8001850 <HAL_TIM_Base_MspInit+0x450>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001710:	4b4f      	ldr	r3, [pc, #316]	@ (8001850 <HAL_TIM_Base_MspInit+0x450>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171c:	2300      	movs	r3, #0
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	4b4b      	ldr	r3, [pc, #300]	@ (8001850 <HAL_TIM_Base_MspInit+0x450>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001724:	4a4a      	ldr	r2, [pc, #296]	@ (8001850 <HAL_TIM_Base_MspInit+0x450>)
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	6313      	str	r3, [r2, #48]	@ 0x30
 800172c:	4b48      	ldr	r3, [pc, #288]	@ (8001850 <HAL_TIM_Base_MspInit+0x450>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001738:	2340      	movs	r3, #64	@ 0x40
 800173a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001748:	2302      	movs	r3, #2
 800174a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001750:	4619      	mov	r1, r3
 8001752:	4840      	ldr	r0, [pc, #256]	@ (8001854 <HAL_TIM_Base_MspInit+0x454>)
 8001754:	f000 ff38 	bl	80025c8 <HAL_GPIO_Init>
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8001758:	4b3f      	ldr	r3, [pc, #252]	@ (8001858 <HAL_TIM_Base_MspInit+0x458>)
 800175a:	4a40      	ldr	r2, [pc, #256]	@ (800185c <HAL_TIM_Base_MspInit+0x45c>)
 800175c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 800175e:	4b3e      	ldr	r3, [pc, #248]	@ (8001858 <HAL_TIM_Base_MspInit+0x458>)
 8001760:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001764:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001766:	4b3c      	ldr	r3, [pc, #240]	@ (8001858 <HAL_TIM_Base_MspInit+0x458>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800176c:	4b3a      	ldr	r3, [pc, #232]	@ (8001858 <HAL_TIM_Base_MspInit+0x458>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001772:	4b39      	ldr	r3, [pc, #228]	@ (8001858 <HAL_TIM_Base_MspInit+0x458>)
 8001774:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001778:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800177a:	4b37      	ldr	r3, [pc, #220]	@ (8001858 <HAL_TIM_Base_MspInit+0x458>)
 800177c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001780:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001782:	4b35      	ldr	r3, [pc, #212]	@ (8001858 <HAL_TIM_Base_MspInit+0x458>)
 8001784:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001788:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 800178a:	4b33      	ldr	r3, [pc, #204]	@ (8001858 <HAL_TIM_Base_MspInit+0x458>)
 800178c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001790:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001792:	4b31      	ldr	r3, [pc, #196]	@ (8001858 <HAL_TIM_Base_MspInit+0x458>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001798:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <HAL_TIM_Base_MspInit+0x458>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800179e:	482e      	ldr	r0, [pc, #184]	@ (8001858 <HAL_TIM_Base_MspInit+0x458>)
 80017a0:	f000 fb10 	bl	8001dc4 <HAL_DMA_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_TIM_Base_MspInit+0x3ae>
      Error_Handler();
 80017aa:	f7ff f92b 	bl	8000a04 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a29      	ldr	r2, [pc, #164]	@ (8001858 <HAL_TIM_Base_MspInit+0x458>)
 80017b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80017b4:	4a28      	ldr	r2, [pc, #160]	@ (8001858 <HAL_TIM_Base_MspInit+0x458>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 80017ba:	4b29      	ldr	r3, [pc, #164]	@ (8001860 <HAL_TIM_Base_MspInit+0x460>)
 80017bc:	4a29      	ldr	r2, [pc, #164]	@ (8001864 <HAL_TIM_Base_MspInit+0x464>)
 80017be:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 80017c0:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <HAL_TIM_Base_MspInit+0x460>)
 80017c2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017c6:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017c8:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <HAL_TIM_Base_MspInit+0x460>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <HAL_TIM_Base_MspInit+0x460>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80017d4:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <HAL_TIM_Base_MspInit+0x460>)
 80017d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017da:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017dc:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <HAL_TIM_Base_MspInit+0x460>)
 80017de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017e2:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <HAL_TIM_Base_MspInit+0x460>)
 80017e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017ea:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 80017ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <HAL_TIM_Base_MspInit+0x460>)
 80017ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017f2:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <HAL_TIM_Base_MspInit+0x460>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <HAL_TIM_Base_MspInit+0x460>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8001800:	4817      	ldr	r0, [pc, #92]	@ (8001860 <HAL_TIM_Base_MspInit+0x460>)
 8001802:	f000 fadf 	bl	8001dc4 <HAL_DMA_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_TIM_Base_MspInit+0x410>
      Error_Handler();
 800180c:	f7ff f8fa 	bl	8000a04 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a13      	ldr	r2, [pc, #76]	@ (8001860 <HAL_TIM_Base_MspInit+0x460>)
 8001814:	629a      	str	r2, [r3, #40]	@ 0x28
 8001816:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <HAL_TIM_Base_MspInit+0x460>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800181c:	e012      	b.n	8001844 <HAL_TIM_Base_MspInit+0x444>
  else if(tim_baseHandle->Instance==TIM11)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a11      	ldr	r2, [pc, #68]	@ (8001868 <HAL_TIM_Base_MspInit+0x468>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d10d      	bne.n	8001844 <HAL_TIM_Base_MspInit+0x444>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <HAL_TIM_Base_MspInit+0x450>)
 800182e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001830:	4a07      	ldr	r2, [pc, #28]	@ (8001850 <HAL_TIM_Base_MspInit+0x450>)
 8001832:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001836:	6453      	str	r3, [r2, #68]	@ 0x44
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <HAL_TIM_Base_MspInit+0x450>)
 800183a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	bf00      	nop
 8001846:	3740      	adds	r7, #64	@ 0x40
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40000800 	.word	0x40000800
 8001850:	40023800 	.word	0x40023800
 8001854:	40020400 	.word	0x40020400
 8001858:	200003ec 	.word	0x200003ec
 800185c:	40026010 	.word	0x40026010
 8001860:	2000044c 	.word	0x2000044c
 8001864:	40026058 	.word	0x40026058
 8001868:	40014800 	.word	0x40014800

0800186c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	@ 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a24      	ldr	r2, [pc, #144]	@ (800191c <HAL_TIM_MspPostInit+0xb0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d11f      	bne.n	80018ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b23      	ldr	r3, [pc, #140]	@ (8001920 <HAL_TIM_MspPostInit+0xb4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a22      	ldr	r2, [pc, #136]	@ (8001920 <HAL_TIM_MspPostInit+0xb4>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b20      	ldr	r3, [pc, #128]	@ (8001920 <HAL_TIM_MspPostInit+0xb4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80018aa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80018ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018bc:	2301      	movs	r3, #1
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	4817      	ldr	r0, [pc, #92]	@ (8001924 <HAL_TIM_MspPostInit+0xb8>)
 80018c8:	f000 fe7e 	bl	80025c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018cc:	e022      	b.n	8001914 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018d6:	d11d      	bne.n	8001914 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <HAL_TIM_MspPostInit+0xb4>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001920 <HAL_TIM_MspPostInit+0xb4>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <HAL_TIM_MspPostInit+0xb4>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018f4:	2301      	movs	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001904:	2301      	movs	r3, #1
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	4805      	ldr	r0, [pc, #20]	@ (8001924 <HAL_TIM_MspPostInit+0xb8>)
 8001910:	f000 fe5a 	bl	80025c8 <HAL_GPIO_Init>
}
 8001914:	bf00      	nop
 8001916:	3728      	adds	r7, #40	@ 0x28
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40010000 	.word	0x40010000
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000

08001928 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800192c:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 800192e:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <MX_USART1_UART_Init+0x50>)
 8001930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 8001934:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001938:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800193a:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001940:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001946:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800194c:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 800194e:	220c      	movs	r2, #12
 8001950:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001952:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 8001960:	f003 f948 	bl	8004bf4 <HAL_UART_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800196a:	f7ff f84b 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200004ac 	.word	0x200004ac
 8001978:	40011000 	.word	0x40011000

0800197c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <MX_USART2_UART_Init+0x4c>)
 8001982:	4a12      	ldr	r2, [pc, #72]	@ (80019cc <MX_USART2_UART_Init+0x50>)
 8001984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <MX_USART2_UART_Init+0x4c>)
 8001988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800198c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <MX_USART2_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <MX_USART2_UART_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800199a:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <MX_USART2_UART_Init+0x4c>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019a0:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <MX_USART2_UART_Init+0x4c>)
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <MX_USART2_UART_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <MX_USART2_UART_Init+0x4c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <MX_USART2_UART_Init+0x4c>)
 80019b4:	f003 f91e 	bl	8004bf4 <HAL_UART_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019be:	f7ff f821 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200004f4 	.word	0x200004f4
 80019cc:	40004400 	.word	0x40004400

080019d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	@ 0x30
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a49      	ldr	r2, [pc, #292]	@ (8001b14 <HAL_UART_MspInit+0x144>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d153      	bne.n	8001a9a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	4b48      	ldr	r3, [pc, #288]	@ (8001b18 <HAL_UART_MspInit+0x148>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	4a47      	ldr	r2, [pc, #284]	@ (8001b18 <HAL_UART_MspInit+0x148>)
 80019fc:	f043 0310 	orr.w	r3, r3, #16
 8001a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a02:	4b45      	ldr	r3, [pc, #276]	@ (8001b18 <HAL_UART_MspInit+0x148>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	61bb      	str	r3, [r7, #24]
 8001a0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	4b41      	ldr	r3, [pc, #260]	@ (8001b18 <HAL_UART_MspInit+0x148>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4a40      	ldr	r2, [pc, #256]	@ (8001b18 <HAL_UART_MspInit+0x148>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b18 <HAL_UART_MspInit+0x148>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b18 <HAL_UART_MspInit+0x148>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	4a39      	ldr	r2, [pc, #228]	@ (8001b18 <HAL_UART_MspInit+0x148>)
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3a:	4b37      	ldr	r3, [pc, #220]	@ (8001b18 <HAL_UART_MspInit+0x148>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a58:	2307      	movs	r3, #7
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	4619      	mov	r1, r3
 8001a62:	482e      	ldr	r0, [pc, #184]	@ (8001b1c <HAL_UART_MspInit+0x14c>)
 8001a64:	f000 fdb0 	bl	80025c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a68:	2308      	movs	r3, #8
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a78:	2307      	movs	r3, #7
 8001a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	4619      	mov	r1, r3
 8001a82:	4827      	ldr	r0, [pc, #156]	@ (8001b20 <HAL_UART_MspInit+0x150>)
 8001a84:	f000 fda0 	bl	80025c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2105      	movs	r1, #5
 8001a8c:	2025      	movs	r0, #37	@ 0x25
 8001a8e:	f000 f96f 	bl	8001d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a92:	2025      	movs	r0, #37	@ 0x25
 8001a94:	f000 f988 	bl	8001da8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a98:	e038      	b.n	8001b0c <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a21      	ldr	r2, [pc, #132]	@ (8001b24 <HAL_UART_MspInit+0x154>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d133      	bne.n	8001b0c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <HAL_UART_MspInit+0x148>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	4a1a      	ldr	r2, [pc, #104]	@ (8001b18 <HAL_UART_MspInit+0x148>)
 8001aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab4:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <HAL_UART_MspInit+0x148>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <HAL_UART_MspInit+0x148>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac8:	4a13      	ldr	r2, [pc, #76]	@ (8001b18 <HAL_UART_MspInit+0x148>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <HAL_UART_MspInit+0x148>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001adc:	230c      	movs	r3, #12
 8001ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aec:	2307      	movs	r3, #7
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	4809      	ldr	r0, [pc, #36]	@ (8001b1c <HAL_UART_MspInit+0x14c>)
 8001af8:	f000 fd66 	bl	80025c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2105      	movs	r1, #5
 8001b00:	2026      	movs	r0, #38	@ 0x26
 8001b02:	f000 f935 	bl	8001d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b06:	2026      	movs	r0, #38	@ 0x26
 8001b08:	f000 f94e 	bl	8001da8 <HAL_NVIC_EnableIRQ>
}
 8001b0c:	bf00      	nop
 8001b0e:	3730      	adds	r7, #48	@ 0x30
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40011000 	.word	0x40011000
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40020400 	.word	0x40020400
 8001b24:	40004400 	.word	0x40004400

08001b28 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b2c:	f7ff f9e4 	bl	8000ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b30:	480c      	ldr	r0, [pc, #48]	@ (8001b64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b32:	490d      	ldr	r1, [pc, #52]	@ (8001b68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b34:	4a0d      	ldr	r2, [pc, #52]	@ (8001b6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b46:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b48:	4c0a      	ldr	r4, [pc, #40]	@ (8001b74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b56:	f006 fe45 	bl	80087e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b5a:	f7fe fea5 	bl	80008a8 <main>
  bx  lr    
 8001b5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b68:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001b6c:	080089ec 	.word	0x080089ec
  ldr r2, =_sbss
 8001b70:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001b74:	20005068 	.word	0x20005068

08001b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC_IRQHandler>
	...

08001b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b80:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <HAL_Init+0x40>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <HAL_Init+0x40>)
 8001b92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b98:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a07      	ldr	r2, [pc, #28]	@ (8001bbc <HAL_Init+0x40>)
 8001b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f000 f8d8 	bl	8001d5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001baa:	2005      	movs	r0, #5
 8001bac:	f7ff f8b8 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb0:	f7ff f88a 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023c00 	.word	0x40023c00

08001bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_IncTick+0x20>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_IncTick+0x24>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <HAL_IncTick+0x24>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000014 	.word	0x20000014
 8001be4:	2000053c 	.word	0x2000053c

08001be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b03      	ldr	r3, [pc, #12]	@ (8001bfc <HAL_GetTick+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	2000053c 	.word	0x2000053c

08001c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c32:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60d3      	str	r3, [r2, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <__NVIC_GetPriorityGrouping+0x18>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f003 0307 	and.w	r3, r3, #7
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db0b      	blt.n	8001c8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	4907      	ldr	r1, [pc, #28]	@ (8001c9c <__NVIC_EnableIRQ+0x38>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	2001      	movs	r0, #1
 8001c86:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000e100 	.word	0xe000e100

08001ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	db0a      	blt.n	8001cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	490c      	ldr	r1, [pc, #48]	@ (8001cec <__NVIC_SetPriority+0x4c>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc8:	e00a      	b.n	8001ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4908      	ldr	r1, [pc, #32]	@ (8001cf0 <__NVIC_SetPriority+0x50>)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	3b04      	subs	r3, #4
 8001cd8:	0112      	lsls	r2, r2, #4
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	440b      	add	r3, r1
 8001cde:	761a      	strb	r2, [r3, #24]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000e100 	.word	0xe000e100
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	@ 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f1c3 0307 	rsb	r3, r3, #7
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	bf28      	it	cs
 8001d12:	2304      	movcs	r3, #4
 8001d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	2b06      	cmp	r3, #6
 8001d1c:	d902      	bls.n	8001d24 <NVIC_EncodePriority+0x30>
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3b03      	subs	r3, #3
 8001d22:	e000      	b.n	8001d26 <NVIC_EncodePriority+0x32>
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	401a      	ands	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43d9      	mvns	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	4313      	orrs	r3, r2
         );
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3724      	adds	r7, #36	@ 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ff4c 	bl	8001c00 <__NVIC_SetPriorityGrouping>
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d82:	f7ff ff61 	bl	8001c48 <__NVIC_GetPriorityGrouping>
 8001d86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	6978      	ldr	r0, [r7, #20]
 8001d8e:	f7ff ffb1 	bl	8001cf4 <NVIC_EncodePriority>
 8001d92:	4602      	mov	r2, r0
 8001d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ff80 	bl	8001ca0 <__NVIC_SetPriority>
}
 8001da0:	bf00      	nop
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff ff54 	bl	8001c64 <__NVIC_EnableIRQ>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff ff0a 	bl	8001be8 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e099      	b.n	8001f14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0201 	bic.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e00:	e00f      	b.n	8001e22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e02:	f7ff fef1 	bl	8001be8 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d908      	bls.n	8001e22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2220      	movs	r2, #32
 8001e14:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2203      	movs	r2, #3
 8001e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e078      	b.n	8001f14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1e8      	bne.n	8001e02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	4b38      	ldr	r3, [pc, #224]	@ (8001f1c <HAL_DMA_Init+0x158>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d107      	bne.n	8001e8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e84:	4313      	orrs	r3, r2
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f023 0307 	bic.w	r3, r3, #7
 8001ea2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d117      	bne.n	8001ee6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00e      	beq.n	8001ee6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fb01 	bl	80024d0 <DMA_CheckFifoParam>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2240      	movs	r2, #64	@ 0x40
 8001ed8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e016      	b.n	8001f14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fab8 	bl	8002464 <DMA_CalcBaseAndBitshift>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efc:	223f      	movs	r2, #63	@ 0x3f
 8001efe:	409a      	lsls	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	f010803f 	.word	0xf010803f

08001f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_DMA_Start_IT+0x26>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e040      	b.n	8001fc8 <HAL_DMA_Start_IT+0xa8>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d12f      	bne.n	8001fba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 fa4a 	bl	8002408 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f78:	223f      	movs	r2, #63	@ 0x3f
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0216 	orr.w	r2, r2, #22
 8001f8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0208 	orr.w	r2, r2, #8
 8001fa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	e005      	b.n	8001fc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fdc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fde:	f7ff fe03 	bl	8001be8 <HAL_GetTick>
 8001fe2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d008      	beq.n	8002002 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2280      	movs	r2, #128	@ 0x80
 8001ff4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e052      	b.n	80020a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0216 	bic.w	r2, r2, #22
 8002010:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002020:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	2b00      	cmp	r3, #0
 8002028:	d103      	bne.n	8002032 <HAL_DMA_Abort+0x62>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0208 	bic.w	r2, r2, #8
 8002040:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0201 	bic.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002052:	e013      	b.n	800207c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002054:	f7ff fdc8 	bl	8001be8 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b05      	cmp	r3, #5
 8002060:	d90c      	bls.n	800207c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2220      	movs	r2, #32
 8002066:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2203      	movs	r2, #3
 800206c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e015      	b.n	80020a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1e4      	bne.n	8002054 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208e:	223f      	movs	r2, #63	@ 0x3f
 8002090:	409a      	lsls	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d004      	beq.n	80020ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2280      	movs	r2, #128	@ 0x80
 80020c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00c      	b.n	80020e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2205      	movs	r2, #5
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0201 	bic.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002100:	4b8e      	ldr	r3, [pc, #568]	@ (800233c <HAL_DMA_IRQHandler+0x248>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a8e      	ldr	r2, [pc, #568]	@ (8002340 <HAL_DMA_IRQHandler+0x24c>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0a9b      	lsrs	r3, r3, #10
 800210c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211e:	2208      	movs	r2, #8
 8002120:	409a      	lsls	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d01a      	beq.n	8002160 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0204 	bic.w	r2, r2, #4
 8002146:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214c:	2208      	movs	r2, #8
 800214e:	409a      	lsls	r2, r3
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002164:	2201      	movs	r2, #1
 8002166:	409a      	lsls	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d012      	beq.n	8002196 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00b      	beq.n	8002196 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002182:	2201      	movs	r2, #1
 8002184:	409a      	lsls	r2, r3
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218e:	f043 0202 	orr.w	r2, r3, #2
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219a:	2204      	movs	r2, #4
 800219c:	409a      	lsls	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d012      	beq.n	80021cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00b      	beq.n	80021cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b8:	2204      	movs	r2, #4
 80021ba:	409a      	lsls	r2, r3
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c4:	f043 0204 	orr.w	r2, r3, #4
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d0:	2210      	movs	r2, #16
 80021d2:	409a      	lsls	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d043      	beq.n	8002264 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d03c      	beq.n	8002264 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ee:	2210      	movs	r2, #16
 80021f0:	409a      	lsls	r2, r3
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d018      	beq.n	8002236 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d108      	bne.n	8002224 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d024      	beq.n	8002264 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	4798      	blx	r3
 8002222:	e01f      	b.n	8002264 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01b      	beq.n	8002264 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
 8002234:	e016      	b.n	8002264 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d107      	bne.n	8002254 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0208 	bic.w	r2, r2, #8
 8002252:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002268:	2220      	movs	r2, #32
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 808f 	beq.w	8002394 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 8087 	beq.w	8002394 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228a:	2220      	movs	r2, #32
 800228c:	409a      	lsls	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b05      	cmp	r3, #5
 800229c:	d136      	bne.n	800230c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0216 	bic.w	r2, r2, #22
 80022ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d103      	bne.n	80022ce <HAL_DMA_IRQHandler+0x1da>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d007      	beq.n	80022de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0208 	bic.w	r2, r2, #8
 80022dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e2:	223f      	movs	r2, #63	@ 0x3f
 80022e4:	409a      	lsls	r2, r3
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d07e      	beq.n	8002400 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	4798      	blx	r3
        }
        return;
 800230a:	e079      	b.n	8002400 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01d      	beq.n	8002356 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10d      	bne.n	8002344 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232c:	2b00      	cmp	r3, #0
 800232e:	d031      	beq.n	8002394 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	4798      	blx	r3
 8002338:	e02c      	b.n	8002394 <HAL_DMA_IRQHandler+0x2a0>
 800233a:	bf00      	nop
 800233c:	2000000c 	.word	0x2000000c
 8002340:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002348:	2b00      	cmp	r3, #0
 800234a:	d023      	beq.n	8002394 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
 8002354:	e01e      	b.n	8002394 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10f      	bne.n	8002384 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0210 	bic.w	r2, r2, #16
 8002372:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002398:	2b00      	cmp	r3, #0
 800239a:	d032      	beq.n	8002402 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d022      	beq.n	80023ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2205      	movs	r2, #5
 80023ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	3301      	adds	r3, #1
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d307      	bcc.n	80023dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f2      	bne.n	80023c0 <HAL_DMA_IRQHandler+0x2cc>
 80023da:	e000      	b.n	80023de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	4798      	blx	r3
 80023fe:	e000      	b.n	8002402 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002400:	bf00      	nop
    }
  }
}
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002424:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b40      	cmp	r3, #64	@ 0x40
 8002434:	d108      	bne.n	8002448 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002446:	e007      	b.n	8002458 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	60da      	str	r2, [r3, #12]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	3b10      	subs	r3, #16
 8002474:	4a14      	ldr	r2, [pc, #80]	@ (80024c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800247e:	4a13      	ldr	r2, [pc, #76]	@ (80024cc <DMA_CalcBaseAndBitshift+0x68>)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2b03      	cmp	r3, #3
 8002490:	d909      	bls.n	80024a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800249a:	f023 0303 	bic.w	r3, r3, #3
 800249e:	1d1a      	adds	r2, r3, #4
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80024a4:	e007      	b.n	80024b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024ae:	f023 0303 	bic.w	r3, r3, #3
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	aaaaaaab 	.word	0xaaaaaaab
 80024cc:	080089d4 	.word	0x080089d4

080024d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d11f      	bne.n	800252a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d856      	bhi.n	800259e <DMA_CheckFifoParam+0xce>
 80024f0:	a201      	add	r2, pc, #4	@ (adr r2, 80024f8 <DMA_CheckFifoParam+0x28>)
 80024f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f6:	bf00      	nop
 80024f8:	08002509 	.word	0x08002509
 80024fc:	0800251b 	.word	0x0800251b
 8002500:	08002509 	.word	0x08002509
 8002504:	0800259f 	.word	0x0800259f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d046      	beq.n	80025a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002518:	e043      	b.n	80025a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002522:	d140      	bne.n	80025a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002528:	e03d      	b.n	80025a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002532:	d121      	bne.n	8002578 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b03      	cmp	r3, #3
 8002538:	d837      	bhi.n	80025aa <DMA_CheckFifoParam+0xda>
 800253a:	a201      	add	r2, pc, #4	@ (adr r2, 8002540 <DMA_CheckFifoParam+0x70>)
 800253c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002540:	08002551 	.word	0x08002551
 8002544:	08002557 	.word	0x08002557
 8002548:	08002551 	.word	0x08002551
 800254c:	08002569 	.word	0x08002569
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
      break;
 8002554:	e030      	b.n	80025b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d025      	beq.n	80025ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002566:	e022      	b.n	80025ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002570:	d11f      	bne.n	80025b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002576:	e01c      	b.n	80025b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d903      	bls.n	8002586 <DMA_CheckFifoParam+0xb6>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d003      	beq.n	800258c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002584:	e018      	b.n	80025b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
      break;
 800258a:	e015      	b.n	80025b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00e      	beq.n	80025b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
      break;
 800259c:	e00b      	b.n	80025b6 <DMA_CheckFifoParam+0xe6>
      break;
 800259e:	bf00      	nop
 80025a0:	e00a      	b.n	80025b8 <DMA_CheckFifoParam+0xe8>
      break;
 80025a2:	bf00      	nop
 80025a4:	e008      	b.n	80025b8 <DMA_CheckFifoParam+0xe8>
      break;
 80025a6:	bf00      	nop
 80025a8:	e006      	b.n	80025b8 <DMA_CheckFifoParam+0xe8>
      break;
 80025aa:	bf00      	nop
 80025ac:	e004      	b.n	80025b8 <DMA_CheckFifoParam+0xe8>
      break;
 80025ae:	bf00      	nop
 80025b0:	e002      	b.n	80025b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80025b2:	bf00      	nop
 80025b4:	e000      	b.n	80025b8 <DMA_CheckFifoParam+0xe8>
      break;
 80025b6:	bf00      	nop
    }
  } 
  
  return status; 
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop

080025c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	@ 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	e159      	b.n	8002898 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025e4:	2201      	movs	r2, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f040 8148 	bne.w	8002892 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d005      	beq.n	800261a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002616:	2b02      	cmp	r3, #2
 8002618:	d130      	bne.n	800267c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	2203      	movs	r2, #3
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002650:	2201      	movs	r2, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 0201 	and.w	r2, r3, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	2b03      	cmp	r3, #3
 8002686:	d017      	beq.n	80026b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d123      	bne.n	800270c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	08da      	lsrs	r2, r3, #3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3208      	adds	r2, #8
 80026cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	220f      	movs	r2, #15
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	08da      	lsrs	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3208      	adds	r2, #8
 8002706:	69b9      	ldr	r1, [r7, #24]
 8002708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0203 	and.w	r2, r3, #3
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80a2 	beq.w	8002892 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	4b57      	ldr	r3, [pc, #348]	@ (80028b0 <HAL_GPIO_Init+0x2e8>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	4a56      	ldr	r2, [pc, #344]	@ (80028b0 <HAL_GPIO_Init+0x2e8>)
 8002758:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800275c:	6453      	str	r3, [r2, #68]	@ 0x44
 800275e:	4b54      	ldr	r3, [pc, #336]	@ (80028b0 <HAL_GPIO_Init+0x2e8>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800276a:	4a52      	ldr	r2, [pc, #328]	@ (80028b4 <HAL_GPIO_Init+0x2ec>)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	089b      	lsrs	r3, r3, #2
 8002770:	3302      	adds	r3, #2
 8002772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	220f      	movs	r2, #15
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a49      	ldr	r2, [pc, #292]	@ (80028b8 <HAL_GPIO_Init+0x2f0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d019      	beq.n	80027ca <HAL_GPIO_Init+0x202>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a48      	ldr	r2, [pc, #288]	@ (80028bc <HAL_GPIO_Init+0x2f4>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d013      	beq.n	80027c6 <HAL_GPIO_Init+0x1fe>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a47      	ldr	r2, [pc, #284]	@ (80028c0 <HAL_GPIO_Init+0x2f8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00d      	beq.n	80027c2 <HAL_GPIO_Init+0x1fa>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a46      	ldr	r2, [pc, #280]	@ (80028c4 <HAL_GPIO_Init+0x2fc>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d007      	beq.n	80027be <HAL_GPIO_Init+0x1f6>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a45      	ldr	r2, [pc, #276]	@ (80028c8 <HAL_GPIO_Init+0x300>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d101      	bne.n	80027ba <HAL_GPIO_Init+0x1f2>
 80027b6:	2304      	movs	r3, #4
 80027b8:	e008      	b.n	80027cc <HAL_GPIO_Init+0x204>
 80027ba:	2307      	movs	r3, #7
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x204>
 80027be:	2303      	movs	r3, #3
 80027c0:	e004      	b.n	80027cc <HAL_GPIO_Init+0x204>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e002      	b.n	80027cc <HAL_GPIO_Init+0x204>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_GPIO_Init+0x204>
 80027ca:	2300      	movs	r3, #0
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f002 0203 	and.w	r2, r2, #3
 80027d2:	0092      	lsls	r2, r2, #2
 80027d4:	4093      	lsls	r3, r2
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027dc:	4935      	ldr	r1, [pc, #212]	@ (80028b4 <HAL_GPIO_Init+0x2ec>)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	3302      	adds	r3, #2
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ea:	4b38      	ldr	r3, [pc, #224]	@ (80028cc <HAL_GPIO_Init+0x304>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800280e:	4a2f      	ldr	r2, [pc, #188]	@ (80028cc <HAL_GPIO_Init+0x304>)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002814:	4b2d      	ldr	r3, [pc, #180]	@ (80028cc <HAL_GPIO_Init+0x304>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002838:	4a24      	ldr	r2, [pc, #144]	@ (80028cc <HAL_GPIO_Init+0x304>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800283e:	4b23      	ldr	r3, [pc, #140]	@ (80028cc <HAL_GPIO_Init+0x304>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002862:	4a1a      	ldr	r2, [pc, #104]	@ (80028cc <HAL_GPIO_Init+0x304>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002868:	4b18      	ldr	r3, [pc, #96]	@ (80028cc <HAL_GPIO_Init+0x304>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800288c:	4a0f      	ldr	r2, [pc, #60]	@ (80028cc <HAL_GPIO_Init+0x304>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3301      	adds	r3, #1
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	2b0f      	cmp	r3, #15
 800289c:	f67f aea2 	bls.w	80025e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3724      	adds	r7, #36	@ 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40013800 	.word	0x40013800
 80028b8:	40020000 	.word	0x40020000
 80028bc:	40020400 	.word	0x40020400
 80028c0:	40020800 	.word	0x40020800
 80028c4:	40020c00 	.word	0x40020c00
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40013c00 	.word	0x40013c00

080028d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
 80028dc:	4613      	mov	r3, r2
 80028de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e0:	787b      	ldrb	r3, [r7, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028ec:	e003      	b.n	80028f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ee:	887b      	ldrh	r3, [r7, #2]
 80028f0:	041a      	lsls	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	619a      	str	r2, [r3, #24]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e267      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d075      	beq.n	8002a0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002922:	4b88      	ldr	r3, [pc, #544]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b04      	cmp	r3, #4
 800292c:	d00c      	beq.n	8002948 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800292e:	4b85      	ldr	r3, [pc, #532]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002936:	2b08      	cmp	r3, #8
 8002938:	d112      	bne.n	8002960 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293a:	4b82      	ldr	r3, [pc, #520]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002942:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002946:	d10b      	bne.n	8002960 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002948:	4b7e      	ldr	r3, [pc, #504]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d05b      	beq.n	8002a0c <HAL_RCC_OscConfig+0x108>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d157      	bne.n	8002a0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e242      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002968:	d106      	bne.n	8002978 <HAL_RCC_OscConfig+0x74>
 800296a:	4b76      	ldr	r3, [pc, #472]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a75      	ldr	r2, [pc, #468]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e01d      	b.n	80029b4 <HAL_RCC_OscConfig+0xb0>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002980:	d10c      	bne.n	800299c <HAL_RCC_OscConfig+0x98>
 8002982:	4b70      	ldr	r3, [pc, #448]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a6f      	ldr	r2, [pc, #444]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002988:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a6c      	ldr	r2, [pc, #432]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e00b      	b.n	80029b4 <HAL_RCC_OscConfig+0xb0>
 800299c:	4b69      	ldr	r3, [pc, #420]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a68      	ldr	r2, [pc, #416]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 80029a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	4b66      	ldr	r3, [pc, #408]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a65      	ldr	r2, [pc, #404]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 80029ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d013      	beq.n	80029e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7ff f914 	bl	8001be8 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c4:	f7ff f910 	bl	8001be8 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	@ 0x64
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e207      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0xc0>
 80029e2:	e014      	b.n	8002a0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7ff f900 	bl	8001be8 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ec:	f7ff f8fc 	bl	8001be8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	@ 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e1f3      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fe:	4b51      	ldr	r3, [pc, #324]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0xe8>
 8002a0a:	e000      	b.n	8002a0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d063      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a1a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00b      	beq.n	8002a3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a26:	4b47      	ldr	r3, [pc, #284]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d11c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a32:	4b44      	ldr	r3, [pc, #272]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d116      	bne.n	8002a6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3e:	4b41      	ldr	r3, [pc, #260]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_RCC_OscConfig+0x152>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d001      	beq.n	8002a56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e1c7      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a56:	4b3b      	ldr	r3, [pc, #236]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4937      	ldr	r1, [pc, #220]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6a:	e03a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d020      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a74:	4b34      	ldr	r3, [pc, #208]	@ (8002b48 <HAL_RCC_OscConfig+0x244>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7a:	f7ff f8b5 	bl	8001be8 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a82:	f7ff f8b1 	bl	8001be8 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e1a8      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a94:	4b2b      	ldr	r3, [pc, #172]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa0:	4b28      	ldr	r3, [pc, #160]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4925      	ldr	r1, [pc, #148]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	600b      	str	r3, [r1, #0]
 8002ab4:	e015      	b.n	8002ae2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab6:	4b24      	ldr	r3, [pc, #144]	@ (8002b48 <HAL_RCC_OscConfig+0x244>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7ff f894 	bl	8001be8 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac4:	f7ff f890 	bl	8001be8 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e187      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d036      	beq.n	8002b5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d016      	beq.n	8002b24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af6:	4b15      	ldr	r3, [pc, #84]	@ (8002b4c <HAL_RCC_OscConfig+0x248>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7ff f874 	bl	8001be8 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b04:	f7ff f870 	bl	8001be8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e167      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b16:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <HAL_RCC_OscConfig+0x240>)
 8002b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x200>
 8002b22:	e01b      	b.n	8002b5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b24:	4b09      	ldr	r3, [pc, #36]	@ (8002b4c <HAL_RCC_OscConfig+0x248>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2a:	f7ff f85d 	bl	8001be8 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b30:	e00e      	b.n	8002b50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b32:	f7ff f859 	bl	8001be8 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d907      	bls.n	8002b50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e150      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
 8002b44:	40023800 	.word	0x40023800
 8002b48:	42470000 	.word	0x42470000
 8002b4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b50:	4b88      	ldr	r3, [pc, #544]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1ea      	bne.n	8002b32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 8097 	beq.w	8002c98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6e:	4b81      	ldr	r3, [pc, #516]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10f      	bne.n	8002b9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	4a7c      	ldr	r2, [pc, #496]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8a:	4b7a      	ldr	r3, [pc, #488]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b96:	2301      	movs	r3, #1
 8002b98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9a:	4b77      	ldr	r3, [pc, #476]	@ (8002d78 <HAL_RCC_OscConfig+0x474>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d118      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba6:	4b74      	ldr	r3, [pc, #464]	@ (8002d78 <HAL_RCC_OscConfig+0x474>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a73      	ldr	r2, [pc, #460]	@ (8002d78 <HAL_RCC_OscConfig+0x474>)
 8002bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb2:	f7ff f819 	bl	8001be8 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bba:	f7ff f815 	bl	8001be8 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e10c      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8002d78 <HAL_RCC_OscConfig+0x474>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x2ea>
 8002be0:	4b64      	ldr	r3, [pc, #400]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be4:	4a63      	ldr	r2, [pc, #396]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bec:	e01c      	b.n	8002c28 <HAL_RCC_OscConfig+0x324>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b05      	cmp	r3, #5
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x30c>
 8002bf6:	4b5f      	ldr	r3, [pc, #380]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfa:	4a5e      	ldr	r2, [pc, #376]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c02:	4b5c      	ldr	r3, [pc, #368]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c06:	4a5b      	ldr	r2, [pc, #364]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCC_OscConfig+0x324>
 8002c10:	4b58      	ldr	r3, [pc, #352]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c14:	4a57      	ldr	r2, [pc, #348]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c1c:	4b55      	ldr	r3, [pc, #340]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c20:	4a54      	ldr	r2, [pc, #336]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002c22:	f023 0304 	bic.w	r3, r3, #4
 8002c26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d015      	beq.n	8002c5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7fe ffda 	bl	8001be8 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c38:	f7fe ffd6 	bl	8001be8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e0cb      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4e:	4b49      	ldr	r3, [pc, #292]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0ee      	beq.n	8002c38 <HAL_RCC_OscConfig+0x334>
 8002c5a:	e014      	b.n	8002c86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5c:	f7fe ffc4 	bl	8001be8 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c64:	f7fe ffc0 	bl	8001be8 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e0b5      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1ee      	bne.n	8002c64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8c:	4b39      	ldr	r3, [pc, #228]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	4a38      	ldr	r2, [pc, #224]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002c92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80a1 	beq.w	8002de4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ca2:	4b34      	ldr	r3, [pc, #208]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d05c      	beq.n	8002d68 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d141      	bne.n	8002d3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb6:	4b31      	ldr	r3, [pc, #196]	@ (8002d7c <HAL_RCC_OscConfig+0x478>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7fe ff94 	bl	8001be8 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe ff90 	bl	8001be8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e087      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd6:	4b27      	ldr	r3, [pc, #156]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69da      	ldr	r2, [r3, #28]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	019b      	lsls	r3, r3, #6
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	041b      	lsls	r3, r3, #16
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	061b      	lsls	r3, r3, #24
 8002d06:	491b      	ldr	r1, [pc, #108]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d7c <HAL_RCC_OscConfig+0x478>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7fe ff69 	bl	8001be8 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7fe ff65 	bl	8001be8 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e05c      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2c:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x416>
 8002d38:	e054      	b.n	8002de4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3a:	4b10      	ldr	r3, [pc, #64]	@ (8002d7c <HAL_RCC_OscConfig+0x478>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe ff52 	bl	8001be8 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d48:	f7fe ff4e 	bl	8001be8 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e045      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5a:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x444>
 8002d66:	e03d      	b.n	8002de4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e038      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40007000 	.word	0x40007000
 8002d7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <HAL_RCC_OscConfig+0x4ec>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d028      	beq.n	8002de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d121      	bne.n	8002de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d11a      	bne.n	8002de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002db0:	4013      	ands	r3, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002db6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d111      	bne.n	8002de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d107      	bne.n	8002de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800

08002df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0cc      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e08:	4b68      	ldr	r3, [pc, #416]	@ (8002fac <HAL_RCC_ClockConfig+0x1b8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d90c      	bls.n	8002e30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e16:	4b65      	ldr	r3, [pc, #404]	@ (8002fac <HAL_RCC_ClockConfig+0x1b8>)
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	4b63      	ldr	r3, [pc, #396]	@ (8002fac <HAL_RCC_ClockConfig+0x1b8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0b8      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d020      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e48:	4b59      	ldr	r3, [pc, #356]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	4a58      	ldr	r2, [pc, #352]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e60:	4b53      	ldr	r3, [pc, #332]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4a52      	ldr	r2, [pc, #328]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e6c:	4b50      	ldr	r3, [pc, #320]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	494d      	ldr	r1, [pc, #308]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d044      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d107      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e92:	4b47      	ldr	r3, [pc, #284]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d119      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e07f      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d107      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e06f      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e067      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ed2:	4b37      	ldr	r3, [pc, #220]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f023 0203 	bic.w	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4934      	ldr	r1, [pc, #208]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee4:	f7fe fe80 	bl	8001be8 <HAL_GetTick>
 8002ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	e00a      	b.n	8002f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eec:	f7fe fe7c 	bl	8001be8 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e04f      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f02:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 020c 	and.w	r2, r3, #12
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d1eb      	bne.n	8002eec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f14:	4b25      	ldr	r3, [pc, #148]	@ (8002fac <HAL_RCC_ClockConfig+0x1b8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d20c      	bcs.n	8002f3c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f22:	4b22      	ldr	r3, [pc, #136]	@ (8002fac <HAL_RCC_ClockConfig+0x1b8>)
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b20      	ldr	r3, [pc, #128]	@ (8002fac <HAL_RCC_ClockConfig+0x1b8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e032      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f48:	4b19      	ldr	r3, [pc, #100]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4916      	ldr	r1, [pc, #88]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d009      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f66:	4b12      	ldr	r3, [pc, #72]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	490e      	ldr	r1, [pc, #56]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f7a:	f000 f821 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	490a      	ldr	r1, [pc, #40]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8c:	5ccb      	ldrb	r3, [r1, r3]
 8002f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f92:	4a09      	ldr	r2, [pc, #36]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f96:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <HAL_RCC_ClockConfig+0x1c8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd fec0 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023c00 	.word	0x40023c00
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	080089bc 	.word	0x080089bc
 8002fb8:	2000000c 	.word	0x2000000c
 8002fbc:	20000010 	.word	0x20000010

08002fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc4:	b094      	sub	sp, #80	@ 0x50
 8002fc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fd8:	4b79      	ldr	r3, [pc, #484]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d00d      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x40>
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	f200 80e1 	bhi.w	80031ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d003      	beq.n	8002ffa <HAL_RCC_GetSysClockFreq+0x3a>
 8002ff2:	e0db      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff4:	4b73      	ldr	r3, [pc, #460]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ff8:	e0db      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ffa:	4b73      	ldr	r3, [pc, #460]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ffe:	e0d8      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003000:	4b6f      	ldr	r3, [pc, #444]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003008:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800300a:	4b6d      	ldr	r3, [pc, #436]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d063      	beq.n	80030de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003016:	4b6a      	ldr	r3, [pc, #424]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	099b      	lsrs	r3, r3, #6
 800301c:	2200      	movs	r2, #0
 800301e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003020:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003028:	633b      	str	r3, [r7, #48]	@ 0x30
 800302a:	2300      	movs	r3, #0
 800302c:	637b      	str	r3, [r7, #52]	@ 0x34
 800302e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003032:	4622      	mov	r2, r4
 8003034:	462b      	mov	r3, r5
 8003036:	f04f 0000 	mov.w	r0, #0
 800303a:	f04f 0100 	mov.w	r1, #0
 800303e:	0159      	lsls	r1, r3, #5
 8003040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003044:	0150      	lsls	r0, r2, #5
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4621      	mov	r1, r4
 800304c:	1a51      	subs	r1, r2, r1
 800304e:	6139      	str	r1, [r7, #16]
 8003050:	4629      	mov	r1, r5
 8003052:	eb63 0301 	sbc.w	r3, r3, r1
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003064:	4659      	mov	r1, fp
 8003066:	018b      	lsls	r3, r1, #6
 8003068:	4651      	mov	r1, sl
 800306a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800306e:	4651      	mov	r1, sl
 8003070:	018a      	lsls	r2, r1, #6
 8003072:	4651      	mov	r1, sl
 8003074:	ebb2 0801 	subs.w	r8, r2, r1
 8003078:	4659      	mov	r1, fp
 800307a:	eb63 0901 	sbc.w	r9, r3, r1
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800308a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800308e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003092:	4690      	mov	r8, r2
 8003094:	4699      	mov	r9, r3
 8003096:	4623      	mov	r3, r4
 8003098:	eb18 0303 	adds.w	r3, r8, r3
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	462b      	mov	r3, r5
 80030a0:	eb49 0303 	adc.w	r3, r9, r3
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030b2:	4629      	mov	r1, r5
 80030b4:	024b      	lsls	r3, r1, #9
 80030b6:	4621      	mov	r1, r4
 80030b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030bc:	4621      	mov	r1, r4
 80030be:	024a      	lsls	r2, r1, #9
 80030c0:	4610      	mov	r0, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030c6:	2200      	movs	r2, #0
 80030c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030d0:	f7fd f886 	bl	80001e0 <__aeabi_uldivmod>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4613      	mov	r3, r2
 80030da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030dc:	e058      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030de:	4b38      	ldr	r3, [pc, #224]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	099b      	lsrs	r3, r3, #6
 80030e4:	2200      	movs	r2, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	4611      	mov	r1, r2
 80030ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030ee:	623b      	str	r3, [r7, #32]
 80030f0:	2300      	movs	r3, #0
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030f8:	4642      	mov	r2, r8
 80030fa:	464b      	mov	r3, r9
 80030fc:	f04f 0000 	mov.w	r0, #0
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	0159      	lsls	r1, r3, #5
 8003106:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800310a:	0150      	lsls	r0, r2, #5
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4641      	mov	r1, r8
 8003112:	ebb2 0a01 	subs.w	sl, r2, r1
 8003116:	4649      	mov	r1, r9
 8003118:	eb63 0b01 	sbc.w	fp, r3, r1
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003128:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800312c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003130:	ebb2 040a 	subs.w	r4, r2, sl
 8003134:	eb63 050b 	sbc.w	r5, r3, fp
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	00eb      	lsls	r3, r5, #3
 8003142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003146:	00e2      	lsls	r2, r4, #3
 8003148:	4614      	mov	r4, r2
 800314a:	461d      	mov	r5, r3
 800314c:	4643      	mov	r3, r8
 800314e:	18e3      	adds	r3, r4, r3
 8003150:	603b      	str	r3, [r7, #0]
 8003152:	464b      	mov	r3, r9
 8003154:	eb45 0303 	adc.w	r3, r5, r3
 8003158:	607b      	str	r3, [r7, #4]
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003166:	4629      	mov	r1, r5
 8003168:	028b      	lsls	r3, r1, #10
 800316a:	4621      	mov	r1, r4
 800316c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003170:	4621      	mov	r1, r4
 8003172:	028a      	lsls	r2, r1, #10
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800317a:	2200      	movs	r2, #0
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	61fa      	str	r2, [r7, #28]
 8003180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003184:	f7fd f82c 	bl	80001e0 <__aeabi_uldivmod>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4613      	mov	r3, r2
 800318e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003190:	4b0b      	ldr	r3, [pc, #44]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	0c1b      	lsrs	r3, r3, #16
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	3301      	adds	r3, #1
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80031a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031aa:	e002      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031ac:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80031ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3750      	adds	r7, #80	@ 0x50
 80031b8:	46bd      	mov	sp, r7
 80031ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	00f42400 	.word	0x00f42400
 80031c8:	007a1200 	.word	0x007a1200

080031cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d0:	4b03      	ldr	r3, [pc, #12]	@ (80031e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031d2:	681b      	ldr	r3, [r3, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	2000000c 	.word	0x2000000c

080031e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031e8:	f7ff fff0 	bl	80031cc <HAL_RCC_GetHCLKFreq>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	0a9b      	lsrs	r3, r3, #10
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	4903      	ldr	r1, [pc, #12]	@ (8003208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031fa:	5ccb      	ldrb	r3, [r1, r3]
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003200:	4618      	mov	r0, r3
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40023800 	.word	0x40023800
 8003208:	080089cc 	.word	0x080089cc

0800320c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003210:	f7ff ffdc 	bl	80031cc <HAL_RCC_GetHCLKFreq>
 8003214:	4602      	mov	r2, r0
 8003216:	4b05      	ldr	r3, [pc, #20]	@ (800322c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	0b5b      	lsrs	r3, r3, #13
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	4903      	ldr	r1, [pc, #12]	@ (8003230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003222:	5ccb      	ldrb	r3, [r1, r3]
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003228:	4618      	mov	r0, r3
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40023800 	.word	0x40023800
 8003230:	080089cc 	.word	0x080089cc

08003234 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	220f      	movs	r2, #15
 8003242:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003244:	4b12      	ldr	r3, [pc, #72]	@ (8003290 <HAL_RCC_GetClockConfig+0x5c>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0203 	and.w	r2, r3, #3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003250:	4b0f      	ldr	r3, [pc, #60]	@ (8003290 <HAL_RCC_GetClockConfig+0x5c>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800325c:	4b0c      	ldr	r3, [pc, #48]	@ (8003290 <HAL_RCC_GetClockConfig+0x5c>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003268:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <HAL_RCC_GetClockConfig+0x5c>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	08db      	lsrs	r3, r3, #3
 800326e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003276:	4b07      	ldr	r3, [pc, #28]	@ (8003294 <HAL_RCC_GetClockConfig+0x60>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0207 	and.w	r2, r3, #7
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	601a      	str	r2, [r3, #0]
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	40023c00 	.word	0x40023c00

08003298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e041      	b.n	800332e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe f89e 	bl	8001400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 ffc2 	bl	8004260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b01      	cmp	r3, #1
 800334a:	d001      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e044      	b.n	80033da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1e      	ldr	r2, [pc, #120]	@ (80033e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d018      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337a:	d013      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x6c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1a      	ldr	r2, [pc, #104]	@ (80033ec <HAL_TIM_Base_Start_IT+0xb4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00e      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a19      	ldr	r2, [pc, #100]	@ (80033f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a17      	ldr	r2, [pc, #92]	@ (80033f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x6c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a16      	ldr	r2, [pc, #88]	@ (80033f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d111      	bne.n	80033c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d010      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0201 	orr.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c6:	e007      	b.n	80033d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40010000 	.word	0x40010000
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000800 	.word	0x40000800
 80033f4:	40000c00 	.word	0x40000c00
 80033f8:	40014000 	.word	0x40014000

080033fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e041      	b.n	8003492 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f839 	bl	800349a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3304      	adds	r3, #4
 8003438:	4619      	mov	r1, r3
 800343a:	4610      	mov	r0, r2
 800343c:	f000 ff10 	bl	8004260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d109      	bne.n	80034d4 <HAL_TIM_PWM_Start+0x24>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	e022      	b.n	800351a <HAL_TIM_PWM_Start+0x6a>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d109      	bne.n	80034ee <HAL_TIM_PWM_Start+0x3e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	bf14      	ite	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	2300      	moveq	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	e015      	b.n	800351a <HAL_TIM_PWM_Start+0x6a>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d109      	bne.n	8003508 <HAL_TIM_PWM_Start+0x58>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	bf14      	ite	ne
 8003500:	2301      	movne	r3, #1
 8003502:	2300      	moveq	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e008      	b.n	800351a <HAL_TIM_PWM_Start+0x6a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	bf14      	ite	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2300      	moveq	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e068      	b.n	80035f4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d104      	bne.n	8003532 <HAL_TIM_PWM_Start+0x82>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003530:	e013      	b.n	800355a <HAL_TIM_PWM_Start+0xaa>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b04      	cmp	r3, #4
 8003536:	d104      	bne.n	8003542 <HAL_TIM_PWM_Start+0x92>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003540:	e00b      	b.n	800355a <HAL_TIM_PWM_Start+0xaa>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b08      	cmp	r3, #8
 8003546:	d104      	bne.n	8003552 <HAL_TIM_PWM_Start+0xa2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003550:	e003      	b.n	800355a <HAL_TIM_PWM_Start+0xaa>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2201      	movs	r2, #1
 8003560:	6839      	ldr	r1, [r7, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f001 fa4c 	bl	8004a00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a23      	ldr	r2, [pc, #140]	@ (80035fc <HAL_TIM_PWM_Start+0x14c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d107      	bne.n	8003582 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1d      	ldr	r2, [pc, #116]	@ (80035fc <HAL_TIM_PWM_Start+0x14c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d018      	beq.n	80035be <HAL_TIM_PWM_Start+0x10e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003594:	d013      	beq.n	80035be <HAL_TIM_PWM_Start+0x10e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a19      	ldr	r2, [pc, #100]	@ (8003600 <HAL_TIM_PWM_Start+0x150>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00e      	beq.n	80035be <HAL_TIM_PWM_Start+0x10e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a17      	ldr	r2, [pc, #92]	@ (8003604 <HAL_TIM_PWM_Start+0x154>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d009      	beq.n	80035be <HAL_TIM_PWM_Start+0x10e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a16      	ldr	r2, [pc, #88]	@ (8003608 <HAL_TIM_PWM_Start+0x158>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_TIM_PWM_Start+0x10e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a14      	ldr	r2, [pc, #80]	@ (800360c <HAL_TIM_PWM_Start+0x15c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d111      	bne.n	80035e2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b06      	cmp	r3, #6
 80035ce:	d010      	beq.n	80035f2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e0:	e007      	b.n	80035f2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0201 	orr.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40010000 	.word	0x40010000
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800
 8003608:	40000c00 	.word	0x40000c00
 800360c:	40014000 	.word	0x40014000

08003610 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e041      	b.n	80036a6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f839 	bl	80036ae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3304      	adds	r3, #4
 800364c:	4619      	mov	r1, r3
 800364e:	4610      	mov	r0, r2
 8003650:	f000 fe06 	bl	8004260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d104      	bne.n	80036e6 <HAL_TIM_IC_Start_DMA+0x22>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	e013      	b.n	800370e <HAL_TIM_IC_Start_DMA+0x4a>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d104      	bne.n	80036f6 <HAL_TIM_IC_Start_DMA+0x32>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	e00b      	b.n	800370e <HAL_TIM_IC_Start_DMA+0x4a>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_IC_Start_DMA+0x42>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003702:	b2db      	uxtb	r3, r3
 8003704:	e003      	b.n	800370e <HAL_TIM_IC_Start_DMA+0x4a>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800370c:	b2db      	uxtb	r3, r3
 800370e:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <HAL_TIM_IC_Start_DMA+0x5c>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e013      	b.n	8003748 <HAL_TIM_IC_Start_DMA+0x84>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b04      	cmp	r3, #4
 8003724:	d104      	bne.n	8003730 <HAL_TIM_IC_Start_DMA+0x6c>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800372c:	b2db      	uxtb	r3, r3
 800372e:	e00b      	b.n	8003748 <HAL_TIM_IC_Start_DMA+0x84>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b08      	cmp	r3, #8
 8003734:	d104      	bne.n	8003740 <HAL_TIM_IC_Start_DMA+0x7c>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800373c:	b2db      	uxtb	r3, r3
 800373e:	e003      	b.n	8003748 <HAL_TIM_IC_Start_DMA+0x84>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003746:	b2db      	uxtb	r3, r3
 8003748:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800374a:	7dbb      	ldrb	r3, [r7, #22]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d002      	beq.n	8003756 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8003750:	7d7b      	ldrb	r3, [r7, #21]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d101      	bne.n	800375a <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8003756:	2302      	movs	r3, #2
 8003758:	e13c      	b.n	80039d4 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800375a:	7dbb      	ldrb	r3, [r7, #22]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d143      	bne.n	80037e8 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8003760:	7d7b      	ldrb	r3, [r7, #21]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d140      	bne.n	80037e8 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_TIM_IC_Start_DMA+0xae>
 800376c:	887b      	ldrh	r3, [r7, #2]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e12e      	b.n	80039d4 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d104      	bne.n	8003786 <HAL_TIM_IC_Start_DMA+0xc2>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003784:	e013      	b.n	80037ae <HAL_TIM_IC_Start_DMA+0xea>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b04      	cmp	r3, #4
 800378a:	d104      	bne.n	8003796 <HAL_TIM_IC_Start_DMA+0xd2>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003794:	e00b      	b.n	80037ae <HAL_TIM_IC_Start_DMA+0xea>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d104      	bne.n	80037a6 <HAL_TIM_IC_Start_DMA+0xe2>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037a4:	e003      	b.n	80037ae <HAL_TIM_IC_Start_DMA+0xea>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2202      	movs	r2, #2
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d104      	bne.n	80037be <HAL_TIM_IC_Start_DMA+0xfa>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    if ((pData == NULL) || (Length == 0U))
 80037bc:	e016      	b.n	80037ec <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d104      	bne.n	80037ce <HAL_TIM_IC_Start_DMA+0x10a>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    if ((pData == NULL) || (Length == 0U))
 80037cc:	e00e      	b.n	80037ec <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d104      	bne.n	80037de <HAL_TIM_IC_Start_DMA+0x11a>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 80037dc:	e006      	b.n	80037ec <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2202      	movs	r2, #2
 80037e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 80037e6:	e001      	b.n	80037ec <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0f3      	b.n	80039d4 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2201      	movs	r2, #1
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f001 f903 	bl	8004a00 <TIM_CCxChannelCmd>

  switch (Channel)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b0c      	cmp	r3, #12
 80037fe:	f200 80ad 	bhi.w	800395c <HAL_TIM_IC_Start_DMA+0x298>
 8003802:	a201      	add	r2, pc, #4	@ (adr r2, 8003808 <HAL_TIM_IC_Start_DMA+0x144>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	0800383d 	.word	0x0800383d
 800380c:	0800395d 	.word	0x0800395d
 8003810:	0800395d 	.word	0x0800395d
 8003814:	0800395d 	.word	0x0800395d
 8003818:	08003885 	.word	0x08003885
 800381c:	0800395d 	.word	0x0800395d
 8003820:	0800395d 	.word	0x0800395d
 8003824:	0800395d 	.word	0x0800395d
 8003828:	080038cd 	.word	0x080038cd
 800382c:	0800395d 	.word	0x0800395d
 8003830:	0800395d 	.word	0x0800395d
 8003834:	0800395d 	.word	0x0800395d
 8003838:	08003915 	.word	0x08003915
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	4a66      	ldr	r2, [pc, #408]	@ (80039dc <HAL_TIM_IC_Start_DMA+0x318>)
 8003842:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	4a65      	ldr	r2, [pc, #404]	@ (80039e0 <HAL_TIM_IC_Start_DMA+0x31c>)
 800384a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	4a64      	ldr	r2, [pc, #400]	@ (80039e4 <HAL_TIM_IC_Start_DMA+0x320>)
 8003852:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3334      	adds	r3, #52	@ 0x34
 800385e:	4619      	mov	r1, r3
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	887b      	ldrh	r3, [r7, #2]
 8003864:	f7fe fb5c 	bl	8001f20 <HAL_DMA_Start_IT>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0b0      	b.n	80039d4 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003880:	60da      	str	r2, [r3, #12]
      break;
 8003882:	e06e      	b.n	8003962 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003888:	4a54      	ldr	r2, [pc, #336]	@ (80039dc <HAL_TIM_IC_Start_DMA+0x318>)
 800388a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003890:	4a53      	ldr	r2, [pc, #332]	@ (80039e0 <HAL_TIM_IC_Start_DMA+0x31c>)
 8003892:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	4a52      	ldr	r2, [pc, #328]	@ (80039e4 <HAL_TIM_IC_Start_DMA+0x320>)
 800389a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3338      	adds	r3, #56	@ 0x38
 80038a6:	4619      	mov	r1, r3
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	887b      	ldrh	r3, [r7, #2]
 80038ac:	f7fe fb38 	bl	8001f20 <HAL_DMA_Start_IT>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e08c      	b.n	80039d4 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038c8:	60da      	str	r2, [r3, #12]
      break;
 80038ca:	e04a      	b.n	8003962 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d0:	4a42      	ldr	r2, [pc, #264]	@ (80039dc <HAL_TIM_IC_Start_DMA+0x318>)
 80038d2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d8:	4a41      	ldr	r2, [pc, #260]	@ (80039e0 <HAL_TIM_IC_Start_DMA+0x31c>)
 80038da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e0:	4a40      	ldr	r2, [pc, #256]	@ (80039e4 <HAL_TIM_IC_Start_DMA+0x320>)
 80038e2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	333c      	adds	r3, #60	@ 0x3c
 80038ee:	4619      	mov	r1, r3
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	887b      	ldrh	r3, [r7, #2]
 80038f4:	f7fe fb14 	bl	8001f20 <HAL_DMA_Start_IT>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e068      	b.n	80039d4 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003910:	60da      	str	r2, [r3, #12]
      break;
 8003912:	e026      	b.n	8003962 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	4a30      	ldr	r2, [pc, #192]	@ (80039dc <HAL_TIM_IC_Start_DMA+0x318>)
 800391a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003920:	4a2f      	ldr	r2, [pc, #188]	@ (80039e0 <HAL_TIM_IC_Start_DMA+0x31c>)
 8003922:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003928:	4a2e      	ldr	r2, [pc, #184]	@ (80039e4 <HAL_TIM_IC_Start_DMA+0x320>)
 800392a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3340      	adds	r3, #64	@ 0x40
 8003936:	4619      	mov	r1, r3
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	887b      	ldrh	r3, [r7, #2]
 800393c:	f7fe faf0 	bl	8001f20 <HAL_DMA_Start_IT>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e044      	b.n	80039d4 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003958:	60da      	str	r2, [r3, #12]
      break;
 800395a:	e002      	b.n	8003962 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	75fb      	strb	r3, [r7, #23]
      break;
 8003960:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a20      	ldr	r2, [pc, #128]	@ (80039e8 <HAL_TIM_IC_Start_DMA+0x324>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d018      	beq.n	800399e <HAL_TIM_IC_Start_DMA+0x2da>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003974:	d013      	beq.n	800399e <HAL_TIM_IC_Start_DMA+0x2da>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1c      	ldr	r2, [pc, #112]	@ (80039ec <HAL_TIM_IC_Start_DMA+0x328>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00e      	beq.n	800399e <HAL_TIM_IC_Start_DMA+0x2da>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1a      	ldr	r2, [pc, #104]	@ (80039f0 <HAL_TIM_IC_Start_DMA+0x32c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d009      	beq.n	800399e <HAL_TIM_IC_Start_DMA+0x2da>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a19      	ldr	r2, [pc, #100]	@ (80039f4 <HAL_TIM_IC_Start_DMA+0x330>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d004      	beq.n	800399e <HAL_TIM_IC_Start_DMA+0x2da>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a17      	ldr	r2, [pc, #92]	@ (80039f8 <HAL_TIM_IC_Start_DMA+0x334>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d111      	bne.n	80039c2 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b06      	cmp	r3, #6
 80039ae:	d010      	beq.n	80039d2 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c0:	e007      	b.n	80039d2 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	08004131 	.word	0x08004131
 80039e0:	080041f9 	.word	0x080041f9
 80039e4:	0800409f 	.word	0x0800409f
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800
 80039f4:	40000c00 	.word	0x40000c00
 80039f8:	40014000 	.word	0x40014000

080039fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d020      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01b      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0202 	mvn.w	r2, #2
 8003a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 faf7 	bl	800403a <HAL_TIM_IC_CaptureCallback>
 8003a4c:	e005      	b.n	8003a5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fae9 	bl	8004026 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fb04 	bl	8004062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d020      	beq.n	8003aac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01b      	beq.n	8003aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0204 	mvn.w	r2, #4
 8003a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fad1 	bl	800403a <HAL_TIM_IC_CaptureCallback>
 8003a98:	e005      	b.n	8003aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fac3 	bl	8004026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fade 	bl	8004062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d020      	beq.n	8003af8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01b      	beq.n	8003af8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f06f 0208 	mvn.w	r2, #8
 8003ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2204      	movs	r2, #4
 8003ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 faab 	bl	800403a <HAL_TIM_IC_CaptureCallback>
 8003ae4:	e005      	b.n	8003af2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fa9d 	bl	8004026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fab8 	bl	8004062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d020      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01b      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0210 	mvn.w	r2, #16
 8003b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2208      	movs	r2, #8
 8003b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fa85 	bl	800403a <HAL_TIM_IC_CaptureCallback>
 8003b30:	e005      	b.n	8003b3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fa77 	bl	8004026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fa92 	bl	8004062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00c      	beq.n	8003b68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0201 	mvn.w	r2, #1
 8003b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fc ff3c 	bl	80009e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00c      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f001 f82a 	bl	8004be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00c      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fa63 	bl	8004076 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00c      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0220 	mvn.w	r2, #32
 8003bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fffc 	bl	8004bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_TIM_IC_ConfigChannel+0x1e>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e088      	b.n	8003d0c <HAL_TIM_IC_ConfigChannel+0x130>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d11b      	bne.n	8003c40 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003c18:	f000 fd3a 	bl	8004690 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 020c 	bic.w	r2, r2, #12
 8003c2a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6999      	ldr	r1, [r3, #24]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	619a      	str	r2, [r3, #24]
 8003c3e:	e060      	b.n	8003d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d11c      	bne.n	8003c80 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003c56:	f000 fdb2 	bl	80047be <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c68:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6999      	ldr	r1, [r3, #24]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	021a      	lsls	r2, r3, #8
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	619a      	str	r2, [r3, #24]
 8003c7e:	e040      	b.n	8003d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d11b      	bne.n	8003cbe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c96:	f000 fdff 	bl	8004898 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 020c 	bic.w	r2, r2, #12
 8003ca8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69d9      	ldr	r1, [r3, #28]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	61da      	str	r2, [r3, #28]
 8003cbc:	e021      	b.n	8003d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b0c      	cmp	r3, #12
 8003cc2:	d11c      	bne.n	8003cfe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003cd4:	f000 fe1c 	bl	8004910 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69da      	ldr	r2, [r3, #28]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003ce6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69d9      	ldr	r1, [r3, #28]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	021a      	lsls	r2, r3, #8
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	61da      	str	r2, [r3, #28]
 8003cfc:	e001      	b.n	8003d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e0ae      	b.n	8003e90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b0c      	cmp	r3, #12
 8003d3e:	f200 809f 	bhi.w	8003e80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d42:	a201      	add	r2, pc, #4	@ (adr r2, 8003d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d7d 	.word	0x08003d7d
 8003d4c:	08003e81 	.word	0x08003e81
 8003d50:	08003e81 	.word	0x08003e81
 8003d54:	08003e81 	.word	0x08003e81
 8003d58:	08003dbd 	.word	0x08003dbd
 8003d5c:	08003e81 	.word	0x08003e81
 8003d60:	08003e81 	.word	0x08003e81
 8003d64:	08003e81 	.word	0x08003e81
 8003d68:	08003dff 	.word	0x08003dff
 8003d6c:	08003e81 	.word	0x08003e81
 8003d70:	08003e81 	.word	0x08003e81
 8003d74:	08003e81 	.word	0x08003e81
 8003d78:	08003e3f 	.word	0x08003e3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 faf8 	bl	8004378 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0208 	orr.w	r2, r2, #8
 8003d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0204 	bic.w	r2, r2, #4
 8003da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6999      	ldr	r1, [r3, #24]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	619a      	str	r2, [r3, #24]
      break;
 8003dba:	e064      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fb3e 	bl	8004444 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6999      	ldr	r1, [r3, #24]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	619a      	str	r2, [r3, #24]
      break;
 8003dfc:	e043      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fb89 	bl	800451c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0208 	orr.w	r2, r2, #8
 8003e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0204 	bic.w	r2, r2, #4
 8003e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69d9      	ldr	r1, [r3, #28]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	61da      	str	r2, [r3, #28]
      break;
 8003e3c:	e023      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fbd3 	bl	80045f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69d9      	ldr	r1, [r3, #28]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	021a      	lsls	r2, r3, #8
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	61da      	str	r2, [r3, #28]
      break;
 8003e7e:	e002      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	75fb      	strb	r3, [r7, #23]
      break;
 8003e84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIM_ConfigClockSource+0x1c>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e0b4      	b.n	800401e <HAL_TIM_ConfigClockSource+0x186>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eec:	d03e      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0xd4>
 8003eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ef2:	f200 8087 	bhi.w	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efa:	f000 8086 	beq.w	800400a <HAL_TIM_ConfigClockSource+0x172>
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f02:	d87f      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b70      	cmp	r3, #112	@ 0x70
 8003f06:	d01a      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0xa6>
 8003f08:	2b70      	cmp	r3, #112	@ 0x70
 8003f0a:	d87b      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b60      	cmp	r3, #96	@ 0x60
 8003f0e:	d050      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x11a>
 8003f10:	2b60      	cmp	r3, #96	@ 0x60
 8003f12:	d877      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b50      	cmp	r3, #80	@ 0x50
 8003f16:	d03c      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0xfa>
 8003f18:	2b50      	cmp	r3, #80	@ 0x50
 8003f1a:	d873      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b40      	cmp	r3, #64	@ 0x40
 8003f1e:	d058      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x13a>
 8003f20:	2b40      	cmp	r3, #64	@ 0x40
 8003f22:	d86f      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b30      	cmp	r3, #48	@ 0x30
 8003f26:	d064      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f28:	2b30      	cmp	r3, #48	@ 0x30
 8003f2a:	d86b      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d060      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d867      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d05c      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d05a      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f3c:	e062      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f4e:	f000 fd37 	bl	80049c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	609a      	str	r2, [r3, #8]
      break;
 8003f6a:	e04f      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f7c:	f000 fd20 	bl	80049c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f8e:	609a      	str	r2, [r3, #8]
      break;
 8003f90:	e03c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f000 fbde 	bl	8004760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2150      	movs	r1, #80	@ 0x50
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fced 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 8003fb0:	e02c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f000 fc3a 	bl	8004838 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2160      	movs	r1, #96	@ 0x60
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fcdd 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 8003fd0:	e01c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f000 fbbe 	bl	8004760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2140      	movs	r1, #64	@ 0x40
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fccd 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 8003ff0:	e00c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f000 fcc4 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 8004002:	e003      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      break;
 8004008:	e000      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800400a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040aa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d107      	bne.n	80040c6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040c4:	e02a      	b.n	800411c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d107      	bne.n	80040e0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2202      	movs	r2, #2
 80040d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040de:	e01d      	b.n	800411c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d107      	bne.n	80040fa <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2204      	movs	r2, #4
 80040ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040f8:	e010      	b.n	800411c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	429a      	cmp	r2, r3
 8004102:	d107      	bne.n	8004114 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2208      	movs	r2, #8
 8004108:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004112:	e003      	b.n	800411c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7ff ffb4 	bl	800408a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	429a      	cmp	r2, r3
 8004146:	d10f      	bne.n	8004168 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d146      	bne.n	80041e4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004166:	e03d      	b.n	80041e4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	429a      	cmp	r2, r3
 8004170:	d10f      	bne.n	8004192 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2202      	movs	r2, #2
 8004176:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d131      	bne.n	80041e4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004190:	e028      	b.n	80041e4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	429a      	cmp	r2, r3
 800419a:	d10f      	bne.n	80041bc <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2204      	movs	r2, #4
 80041a0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d11c      	bne.n	80041e4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ba:	e013      	b.n	80041e4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d10e      	bne.n	80041e4 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2208      	movs	r2, #8
 80041ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d107      	bne.n	80041e4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7ff ff28 	bl	800403a <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	771a      	strb	r2, [r3, #28]
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004204:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	d103      	bne.n	8004218 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2201      	movs	r2, #1
 8004214:	771a      	strb	r2, [r3, #28]
 8004216:	e019      	b.n	800424c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d103      	bne.n	800422a <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2202      	movs	r2, #2
 8004226:	771a      	strb	r2, [r3, #28]
 8004228:	e010      	b.n	800424c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	429a      	cmp	r2, r3
 8004232:	d103      	bne.n	800423c <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2204      	movs	r2, #4
 8004238:	771a      	strb	r2, [r3, #28]
 800423a:	e007      	b.n	800424c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	429a      	cmp	r2, r3
 8004244:	d102      	bne.n	800424c <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2208      	movs	r2, #8
 800424a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7ff fefe 	bl	800404e <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]
}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a3a      	ldr	r2, [pc, #232]	@ (800435c <TIM_Base_SetConfig+0xfc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00f      	beq.n	8004298 <TIM_Base_SetConfig+0x38>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800427e:	d00b      	beq.n	8004298 <TIM_Base_SetConfig+0x38>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a37      	ldr	r2, [pc, #220]	@ (8004360 <TIM_Base_SetConfig+0x100>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d007      	beq.n	8004298 <TIM_Base_SetConfig+0x38>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a36      	ldr	r2, [pc, #216]	@ (8004364 <TIM_Base_SetConfig+0x104>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d003      	beq.n	8004298 <TIM_Base_SetConfig+0x38>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a35      	ldr	r2, [pc, #212]	@ (8004368 <TIM_Base_SetConfig+0x108>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d108      	bne.n	80042aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800429e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a2b      	ldr	r2, [pc, #172]	@ (800435c <TIM_Base_SetConfig+0xfc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01b      	beq.n	80042ea <TIM_Base_SetConfig+0x8a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b8:	d017      	beq.n	80042ea <TIM_Base_SetConfig+0x8a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a28      	ldr	r2, [pc, #160]	@ (8004360 <TIM_Base_SetConfig+0x100>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d013      	beq.n	80042ea <TIM_Base_SetConfig+0x8a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a27      	ldr	r2, [pc, #156]	@ (8004364 <TIM_Base_SetConfig+0x104>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00f      	beq.n	80042ea <TIM_Base_SetConfig+0x8a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a26      	ldr	r2, [pc, #152]	@ (8004368 <TIM_Base_SetConfig+0x108>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00b      	beq.n	80042ea <TIM_Base_SetConfig+0x8a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a25      	ldr	r2, [pc, #148]	@ (800436c <TIM_Base_SetConfig+0x10c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d007      	beq.n	80042ea <TIM_Base_SetConfig+0x8a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a24      	ldr	r2, [pc, #144]	@ (8004370 <TIM_Base_SetConfig+0x110>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d003      	beq.n	80042ea <TIM_Base_SetConfig+0x8a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a23      	ldr	r2, [pc, #140]	@ (8004374 <TIM_Base_SetConfig+0x114>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d108      	bne.n	80042fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a0e      	ldr	r2, [pc, #56]	@ (800435c <TIM_Base_SetConfig+0xfc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d103      	bne.n	8004330 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b01      	cmp	r3, #1
 8004340:	d105      	bne.n	800434e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f023 0201 	bic.w	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	611a      	str	r2, [r3, #16]
  }
}
 800434e:	bf00      	nop
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40010000 	.word	0x40010000
 8004360:	40000400 	.word	0x40000400
 8004364:	40000800 	.word	0x40000800
 8004368:	40000c00 	.word	0x40000c00
 800436c:	40014000 	.word	0x40014000
 8004370:	40014400 	.word	0x40014400
 8004374:	40014800 	.word	0x40014800

08004378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f023 0201 	bic.w	r2, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0303 	bic.w	r3, r3, #3
 80043ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f023 0302 	bic.w	r3, r3, #2
 80043c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004440 <TIM_OC1_SetConfig+0xc8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d10c      	bne.n	80043ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f023 0308 	bic.w	r3, r3, #8
 80043da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f023 0304 	bic.w	r3, r3, #4
 80043ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a13      	ldr	r2, [pc, #76]	@ (8004440 <TIM_OC1_SetConfig+0xc8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d111      	bne.n	800441a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	621a      	str	r2, [r3, #32]
}
 8004434:	bf00      	nop
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	40010000 	.word	0x40010000

08004444 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	f023 0210 	bic.w	r2, r3, #16
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800447a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f023 0320 	bic.w	r3, r3, #32
 800448e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a1e      	ldr	r2, [pc, #120]	@ (8004518 <TIM_OC2_SetConfig+0xd4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d10d      	bne.n	80044c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a15      	ldr	r2, [pc, #84]	@ (8004518 <TIM_OC2_SetConfig+0xd4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d113      	bne.n	80044f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40010000 	.word	0x40010000

0800451c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800454a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0303 	bic.w	r3, r3, #3
 8004552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a1d      	ldr	r2, [pc, #116]	@ (80045ec <TIM_OC3_SetConfig+0xd0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d10d      	bne.n	8004596 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a14      	ldr	r2, [pc, #80]	@ (80045ec <TIM_OC3_SetConfig+0xd0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d113      	bne.n	80045c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	621a      	str	r2, [r3, #32]
}
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	40010000 	.word	0x40010000

080045f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800461e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800463a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	031b      	lsls	r3, r3, #12
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a10      	ldr	r2, [pc, #64]	@ (800468c <TIM_OC4_SetConfig+0x9c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d109      	bne.n	8004664 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	019b      	lsls	r3, r3, #6
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40010000 	.word	0x40010000

08004690 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f023 0201 	bic.w	r2, r3, #1
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4a24      	ldr	r2, [pc, #144]	@ (800474c <TIM_TI1_SetConfig+0xbc>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <TIM_TI1_SetConfig+0x56>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c4:	d00f      	beq.n	80046e6 <TIM_TI1_SetConfig+0x56>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a21      	ldr	r2, [pc, #132]	@ (8004750 <TIM_TI1_SetConfig+0xc0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00b      	beq.n	80046e6 <TIM_TI1_SetConfig+0x56>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a20      	ldr	r2, [pc, #128]	@ (8004754 <TIM_TI1_SetConfig+0xc4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d007      	beq.n	80046e6 <TIM_TI1_SetConfig+0x56>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004758 <TIM_TI1_SetConfig+0xc8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d003      	beq.n	80046e6 <TIM_TI1_SetConfig+0x56>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a1e      	ldr	r2, [pc, #120]	@ (800475c <TIM_TI1_SetConfig+0xcc>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d101      	bne.n	80046ea <TIM_TI1_SetConfig+0x5a>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <TIM_TI1_SetConfig+0x5c>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f023 0303 	bic.w	r3, r3, #3
 80046f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	e003      	b.n	800470a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004710:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	b2db      	uxtb	r3, r3
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f023 030a 	bic.w	r3, r3, #10
 8004724:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f003 030a 	and.w	r3, r3, #10
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	621a      	str	r2, [r3, #32]
}
 800473e:	bf00      	nop
 8004740:	371c      	adds	r7, #28
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40010000 	.word	0x40010000
 8004750:	40000400 	.word	0x40000400
 8004754:	40000800 	.word	0x40000800
 8004758:	40000c00 	.word	0x40000c00
 800475c:	40014000 	.word	0x40014000

08004760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	f023 0201 	bic.w	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800478a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f023 030a 	bic.w	r3, r3, #10
 800479c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047be:	b480      	push	{r7}
 80047c0:	b087      	sub	sp, #28
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
 80047ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f023 0210 	bic.w	r2, r3, #16
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	031b      	lsls	r3, r3, #12
 8004802:	b29b      	uxth	r3, r3
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004810:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	621a      	str	r2, [r3, #32]
}
 800482c:	bf00      	nop
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f023 0210 	bic.w	r2, r3, #16
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	031b      	lsls	r3, r3, #12
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004874:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	621a      	str	r2, [r3, #32]
}
 800488c:	bf00      	nop
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f023 0303 	bic.w	r3, r3, #3
 80048c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80048e8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	621a      	str	r2, [r3, #32]
}
 8004904:	bf00      	nop
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800493c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800494e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	031b      	lsls	r3, r3, #12
 8004954:	b29b      	uxth	r3, r3
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004962:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	031b      	lsls	r3, r3, #12
 8004968:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	621a      	str	r2, [r3, #32]
}
 800497e:	bf00      	nop
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f043 0307 	orr.w	r3, r3, #7
 80049ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	609a      	str	r2, [r3, #8]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	021a      	lsls	r2, r3, #8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	609a      	str	r2, [r3, #8]
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 031f 	and.w	r3, r3, #31
 8004a12:	2201      	movs	r2, #1
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a1a      	ldr	r2, [r3, #32]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	401a      	ands	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a1a      	ldr	r2, [r3, #32]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 031f 	and.w	r3, r3, #31
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	fa01 f303 	lsl.w	r3, r1, r3
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	621a      	str	r2, [r3, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
	...

08004a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e050      	b.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d018      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab0:	d013      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a18      	ldr	r2, [pc, #96]	@ (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00e      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a16      	ldr	r2, [pc, #88]	@ (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a15      	ldr	r2, [pc, #84]	@ (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a13      	ldr	r2, [pc, #76]	@ (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d10c      	bne.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800
 8004b20:	40000c00 	.word	0x40000c00
 8004b24:	40014000 	.word	0x40014000

08004b28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e03d      	b.n	8004bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e042      	b.n	8004c8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc fed8 	bl	80019d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2224      	movs	r2, #36	@ 0x24
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fd11 	bl	8005660 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695a      	ldr	r2, [r3, #20]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08c      	sub	sp, #48	@ 0x30
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d14a      	bne.n	8004d44 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e043      	b.n	8004d46 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 faed 	bl	80052b0 <UART_Start_Receive_IT>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004cdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d12c      	bne.n	8004d3e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d125      	bne.n	8004d38 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	330c      	adds	r3, #12
 8004d08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	617b      	str	r3, [r7, #20]
   return(result);
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f043 0310 	orr.w	r3, r3, #16
 8004d18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	330c      	adds	r3, #12
 8004d20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d22:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6a39      	ldr	r1, [r7, #32]
 8004d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e5      	bne.n	8004d02 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8004d36:	e002      	b.n	8004d3e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004d3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d42:	e000      	b.n	8004d46 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004d44:	2302      	movs	r3, #2
  }
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3730      	adds	r7, #48	@ 0x30
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b0ba      	sub	sp, #232	@ 0xe8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10f      	bne.n	8004db6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d009      	beq.n	8004db6 <HAL_UART_IRQHandler+0x66>
 8004da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fb97 	bl	80054e2 <UART_Receive_IT>
      return;
 8004db4:	e25b      	b.n	800526e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004db6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 80de 	beq.w	8004f7c <HAL_UART_IRQHandler+0x22c>
 8004dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d106      	bne.n	8004dda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 80d1 	beq.w	8004f7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00b      	beq.n	8004dfe <HAL_UART_IRQHandler+0xae>
 8004de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df6:	f043 0201 	orr.w	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00b      	beq.n	8004e22 <HAL_UART_IRQHandler+0xd2>
 8004e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1a:	f043 0202 	orr.w	r2, r3, #2
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <HAL_UART_IRQHandler+0xf6>
 8004e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3e:	f043 0204 	orr.w	r2, r3, #4
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d011      	beq.n	8004e76 <HAL_UART_IRQHandler+0x126>
 8004e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d105      	bne.n	8004e6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6e:	f043 0208 	orr.w	r2, r3, #8
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 81f2 	beq.w	8005264 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_UART_IRQHandler+0x14e>
 8004e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fb22 	bl	80054e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea8:	2b40      	cmp	r3, #64	@ 0x40
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <HAL_UART_IRQHandler+0x17a>
 8004ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d04f      	beq.n	8004f6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fa2a 	bl	8005324 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eda:	2b40      	cmp	r3, #64	@ 0x40
 8004edc:	d141      	bne.n	8004f62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3314      	adds	r3, #20
 8004ee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3314      	adds	r3, #20
 8004f06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1d9      	bne.n	8004ede <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d013      	beq.n	8004f5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f36:	4a7e      	ldr	r2, [pc, #504]	@ (8005130 <HAL_UART_IRQHandler+0x3e0>)
 8004f38:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fd f8b6 	bl	80020b0 <HAL_DMA_Abort_IT>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d016      	beq.n	8004f78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f54:	4610      	mov	r0, r2
 8004f56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f58:	e00e      	b.n	8004f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f99e 	bl	800529c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f60:	e00a      	b.n	8004f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f99a 	bl	800529c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f68:	e006      	b.n	8004f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f996 	bl	800529c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f76:	e175      	b.n	8005264 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f78:	bf00      	nop
    return;
 8004f7a:	e173      	b.n	8005264 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	f040 814f 	bne.w	8005224 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 8148 	beq.w	8005224 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8141 	beq.w	8005224 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc2:	2b40      	cmp	r3, #64	@ 0x40
 8004fc4:	f040 80b6 	bne.w	8005134 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8145 	beq.w	8005268 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	f080 813e 	bcs.w	8005268 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ff2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ffe:	f000 8088 	beq.w	8005112 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	330c      	adds	r3, #12
 8005008:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005018:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800501c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005020:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800502e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005032:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800503a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005046:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1d9      	bne.n	8005002 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3314      	adds	r3, #20
 8005054:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800505e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005060:	f023 0301 	bic.w	r3, r3, #1
 8005064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3314      	adds	r3, #20
 800506e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005072:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005076:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800507a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005084:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e1      	bne.n	800504e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3314      	adds	r3, #20
 8005090:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800509a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800509c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3314      	adds	r3, #20
 80050aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e3      	bne.n	800508a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	330c      	adds	r3, #12
 80050d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050e2:	f023 0310 	bic.w	r3, r3, #16
 80050e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	330c      	adds	r3, #12
 80050f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80050f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050fc:	e841 2300 	strex	r3, r2, [r1]
 8005100:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005102:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e3      	bne.n	80050d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510c:	4618      	mov	r0, r3
 800510e:	f7fc ff5f 	bl	8001fd0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2202      	movs	r2, #2
 8005116:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005120:	b29b      	uxth	r3, r3
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	b29b      	uxth	r3, r3
 8005126:	4619      	mov	r1, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7fb f9d1 	bl	80004d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800512e:	e09b      	b.n	8005268 <HAL_UART_IRQHandler+0x518>
 8005130:	080053eb 	.word	0x080053eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800513c:	b29b      	uxth	r3, r3
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 808e 	beq.w	800526c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 8089 	beq.w	800526c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	330c      	adds	r3, #12
 8005160:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800516a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005170:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800517e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005180:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005184:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800518c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e3      	bne.n	800515a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3314      	adds	r3, #20
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	623b      	str	r3, [r7, #32]
   return(result);
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	f023 0301 	bic.w	r3, r3, #1
 80051a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3314      	adds	r3, #20
 80051b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80051b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1e3      	bne.n	8005192 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0310 	bic.w	r3, r3, #16
 80051ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	330c      	adds	r3, #12
 80051f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80051fc:	61fa      	str	r2, [r7, #28]
 80051fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	69b9      	ldr	r1, [r7, #24]
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	617b      	str	r3, [r7, #20]
   return(result);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e3      	bne.n	80051d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005216:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800521a:	4619      	mov	r1, r3
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7fb f957 	bl	80004d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005222:	e023      	b.n	800526c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522c:	2b00      	cmp	r3, #0
 800522e:	d009      	beq.n	8005244 <HAL_UART_IRQHandler+0x4f4>
 8005230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f8e8 	bl	8005412 <UART_Transmit_IT>
    return;
 8005242:	e014      	b.n	800526e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00e      	beq.n	800526e <HAL_UART_IRQHandler+0x51e>
 8005250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f928 	bl	80054b2 <UART_EndTransmit_IT>
    return;
 8005262:	e004      	b.n	800526e <HAL_UART_IRQHandler+0x51e>
    return;
 8005264:	bf00      	nop
 8005266:	e002      	b.n	800526e <HAL_UART_IRQHandler+0x51e>
      return;
 8005268:	bf00      	nop
 800526a:	e000      	b.n	800526e <HAL_UART_IRQHandler+0x51e>
      return;
 800526c:	bf00      	nop
  }
}
 800526e:	37e8      	adds	r7, #232	@ 0xe8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	88fa      	ldrh	r2, [r7, #6]
 80052c8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	88fa      	ldrh	r2, [r7, #6]
 80052ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2222      	movs	r2, #34	@ 0x22
 80052da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d007      	beq.n	80052f6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695a      	ldr	r2, [r3, #20]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0201 	orr.w	r2, r2, #1
 8005304:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0220 	orr.w	r2, r2, #32
 8005314:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005324:	b480      	push	{r7}
 8005326:	b095      	sub	sp, #84	@ 0x54
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	330c      	adds	r3, #12
 8005332:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800533c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	330c      	adds	r3, #12
 800534a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800534c:	643a      	str	r2, [r7, #64]	@ 0x40
 800534e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005352:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e5      	bne.n	800532c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3314      	adds	r3, #20
 8005366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3314      	adds	r3, #20
 800537e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005380:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005382:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e5      	bne.n	8005360 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005398:	2b01      	cmp	r3, #1
 800539a:	d119      	bne.n	80053d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f023 0310 	bic.w	r3, r3, #16
 80053b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053bc:	61ba      	str	r2, [r7, #24]
 80053be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6979      	ldr	r1, [r7, #20]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e5      	bne.n	800539c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053de:	bf00      	nop
 80053e0:	3754      	adds	r7, #84	@ 0x54
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f7ff ff49 	bl	800529c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b21      	cmp	r3, #33	@ 0x21
 8005424:	d13e      	bne.n	80054a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800542e:	d114      	bne.n	800545a <UART_Transmit_IT+0x48>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d110      	bne.n	800545a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800544c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	1c9a      	adds	r2, r3, #2
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	621a      	str	r2, [r3, #32]
 8005458:	e008      	b.n	800546c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	1c59      	adds	r1, r3, #1
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6211      	str	r1, [r2, #32]
 8005464:	781a      	ldrb	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29b      	uxth	r3, r3
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	4619      	mov	r1, r3
 800547a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10f      	bne.n	80054a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800548e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800549e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	e000      	b.n	80054a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054a4:	2302      	movs	r3, #2
  }
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b082      	sub	sp, #8
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff fece 	bl	8005274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b08c      	sub	sp, #48	@ 0x30
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b22      	cmp	r3, #34	@ 0x22
 80054f4:	f040 80ae 	bne.w	8005654 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005500:	d117      	bne.n	8005532 <UART_Receive_IT+0x50>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d113      	bne.n	8005532 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005512:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	b29b      	uxth	r3, r3
 800551c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005520:	b29a      	uxth	r2, r3
 8005522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005524:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552a:	1c9a      	adds	r2, r3, #2
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005530:	e026      	b.n	8005580 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005536:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005538:	2300      	movs	r3, #0
 800553a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005544:	d007      	beq.n	8005556 <UART_Receive_IT+0x74>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <UART_Receive_IT+0x82>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	b2da      	uxtb	r2, r3
 800555e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	e008      	b.n	8005576 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005570:	b2da      	uxtb	r2, r3
 8005572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005574:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005584:	b29b      	uxth	r3, r3
 8005586:	3b01      	subs	r3, #1
 8005588:	b29b      	uxth	r3, r3
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	4619      	mov	r1, r3
 800558e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005590:	2b00      	cmp	r3, #0
 8005592:	d15d      	bne.n	8005650 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0220 	bic.w	r2, r2, #32
 80055a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695a      	ldr	r2, [r3, #20]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0201 	bic.w	r2, r2, #1
 80055c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d135      	bne.n	8005646 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	330c      	adds	r3, #12
 80055e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	613b      	str	r3, [r7, #16]
   return(result);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f023 0310 	bic.w	r3, r3, #16
 80055f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005600:	623a      	str	r2, [r7, #32]
 8005602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	69f9      	ldr	r1, [r7, #28]
 8005606:	6a3a      	ldr	r2, [r7, #32]
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	61bb      	str	r3, [r7, #24]
   return(result);
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e5      	bne.n	80055e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b10      	cmp	r3, #16
 8005620:	d10a      	bne.n	8005638 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fa ff46 	bl	80004d0 <HAL_UARTEx_RxEventCallback>
 8005644:	e002      	b.n	800564c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff fe1e 	bl	8005288 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	e002      	b.n	8005656 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	e000      	b.n	8005656 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005654:	2302      	movs	r3, #2
  }
}
 8005656:	4618      	mov	r0, r3
 8005658:	3730      	adds	r7, #48	@ 0x30
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005664:	b0c0      	sub	sp, #256	@ 0x100
 8005666:	af00      	add	r7, sp, #0
 8005668:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567c:	68d9      	ldr	r1, [r3, #12]
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	ea40 0301 	orr.w	r3, r0, r1
 8005688:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800568a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	431a      	orrs	r2, r3
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	431a      	orrs	r2, r3
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056b8:	f021 010c 	bic.w	r1, r1, #12
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056c6:	430b      	orrs	r3, r1
 80056c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80056d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056da:	6999      	ldr	r1, [r3, #24]
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	ea40 0301 	orr.w	r3, r0, r1
 80056e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	4b8f      	ldr	r3, [pc, #572]	@ (800592c <UART_SetConfig+0x2cc>)
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d005      	beq.n	8005700 <UART_SetConfig+0xa0>
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4b8d      	ldr	r3, [pc, #564]	@ (8005930 <UART_SetConfig+0x2d0>)
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d104      	bne.n	800570a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005700:	f7fd fd84 	bl	800320c <HAL_RCC_GetPCLK2Freq>
 8005704:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005708:	e003      	b.n	8005712 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800570a:	f7fd fd6b 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
 800570e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800571c:	f040 810c 	bne.w	8005938 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005724:	2200      	movs	r2, #0
 8005726:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800572a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800572e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005732:	4622      	mov	r2, r4
 8005734:	462b      	mov	r3, r5
 8005736:	1891      	adds	r1, r2, r2
 8005738:	65b9      	str	r1, [r7, #88]	@ 0x58
 800573a:	415b      	adcs	r3, r3
 800573c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800573e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005742:	4621      	mov	r1, r4
 8005744:	eb12 0801 	adds.w	r8, r2, r1
 8005748:	4629      	mov	r1, r5
 800574a:	eb43 0901 	adc.w	r9, r3, r1
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800575a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800575e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005762:	4690      	mov	r8, r2
 8005764:	4699      	mov	r9, r3
 8005766:	4623      	mov	r3, r4
 8005768:	eb18 0303 	adds.w	r3, r8, r3
 800576c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005770:	462b      	mov	r3, r5
 8005772:	eb49 0303 	adc.w	r3, r9, r3
 8005776:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800577a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005786:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800578a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800578e:	460b      	mov	r3, r1
 8005790:	18db      	adds	r3, r3, r3
 8005792:	653b      	str	r3, [r7, #80]	@ 0x50
 8005794:	4613      	mov	r3, r2
 8005796:	eb42 0303 	adc.w	r3, r2, r3
 800579a:	657b      	str	r3, [r7, #84]	@ 0x54
 800579c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057a4:	f7fa fd1c 	bl	80001e0 <__aeabi_uldivmod>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4b61      	ldr	r3, [pc, #388]	@ (8005934 <UART_SetConfig+0x2d4>)
 80057ae:	fba3 2302 	umull	r2, r3, r3, r2
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	011c      	lsls	r4, r3, #4
 80057b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80057c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80057c8:	4642      	mov	r2, r8
 80057ca:	464b      	mov	r3, r9
 80057cc:	1891      	adds	r1, r2, r2
 80057ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057d0:	415b      	adcs	r3, r3
 80057d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057d8:	4641      	mov	r1, r8
 80057da:	eb12 0a01 	adds.w	sl, r2, r1
 80057de:	4649      	mov	r1, r9
 80057e0:	eb43 0b01 	adc.w	fp, r3, r1
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057f8:	4692      	mov	sl, r2
 80057fa:	469b      	mov	fp, r3
 80057fc:	4643      	mov	r3, r8
 80057fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005802:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005806:	464b      	mov	r3, r9
 8005808:	eb4b 0303 	adc.w	r3, fp, r3
 800580c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800581c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005820:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005824:	460b      	mov	r3, r1
 8005826:	18db      	adds	r3, r3, r3
 8005828:	643b      	str	r3, [r7, #64]	@ 0x40
 800582a:	4613      	mov	r3, r2
 800582c:	eb42 0303 	adc.w	r3, r2, r3
 8005830:	647b      	str	r3, [r7, #68]	@ 0x44
 8005832:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005836:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800583a:	f7fa fcd1 	bl	80001e0 <__aeabi_uldivmod>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4611      	mov	r1, r2
 8005844:	4b3b      	ldr	r3, [pc, #236]	@ (8005934 <UART_SetConfig+0x2d4>)
 8005846:	fba3 2301 	umull	r2, r3, r3, r1
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	2264      	movs	r2, #100	@ 0x64
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	1acb      	subs	r3, r1, r3
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800585a:	4b36      	ldr	r3, [pc, #216]	@ (8005934 <UART_SetConfig+0x2d4>)
 800585c:	fba3 2302 	umull	r2, r3, r3, r2
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005868:	441c      	add	r4, r3
 800586a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800586e:	2200      	movs	r2, #0
 8005870:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005874:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005878:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800587c:	4642      	mov	r2, r8
 800587e:	464b      	mov	r3, r9
 8005880:	1891      	adds	r1, r2, r2
 8005882:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005884:	415b      	adcs	r3, r3
 8005886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005888:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800588c:	4641      	mov	r1, r8
 800588e:	1851      	adds	r1, r2, r1
 8005890:	6339      	str	r1, [r7, #48]	@ 0x30
 8005892:	4649      	mov	r1, r9
 8005894:	414b      	adcs	r3, r1
 8005896:	637b      	str	r3, [r7, #52]	@ 0x34
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058a4:	4659      	mov	r1, fp
 80058a6:	00cb      	lsls	r3, r1, #3
 80058a8:	4651      	mov	r1, sl
 80058aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ae:	4651      	mov	r1, sl
 80058b0:	00ca      	lsls	r2, r1, #3
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	4642      	mov	r2, r8
 80058ba:	189b      	adds	r3, r3, r2
 80058bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058c0:	464b      	mov	r3, r9
 80058c2:	460a      	mov	r2, r1
 80058c4:	eb42 0303 	adc.w	r3, r2, r3
 80058c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058e0:	460b      	mov	r3, r1
 80058e2:	18db      	adds	r3, r3, r3
 80058e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058e6:	4613      	mov	r3, r2
 80058e8:	eb42 0303 	adc.w	r3, r2, r3
 80058ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058f6:	f7fa fc73 	bl	80001e0 <__aeabi_uldivmod>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005934 <UART_SetConfig+0x2d4>)
 8005900:	fba3 1302 	umull	r1, r3, r3, r2
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	2164      	movs	r1, #100	@ 0x64
 8005908:	fb01 f303 	mul.w	r3, r1, r3
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	3332      	adds	r3, #50	@ 0x32
 8005912:	4a08      	ldr	r2, [pc, #32]	@ (8005934 <UART_SetConfig+0x2d4>)
 8005914:	fba2 2303 	umull	r2, r3, r2, r3
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	f003 0207 	and.w	r2, r3, #7
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4422      	add	r2, r4
 8005926:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005928:	e106      	b.n	8005b38 <UART_SetConfig+0x4d8>
 800592a:	bf00      	nop
 800592c:	40011000 	.word	0x40011000
 8005930:	40011400 	.word	0x40011400
 8005934:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800593c:	2200      	movs	r2, #0
 800593e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005942:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005946:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800594a:	4642      	mov	r2, r8
 800594c:	464b      	mov	r3, r9
 800594e:	1891      	adds	r1, r2, r2
 8005950:	6239      	str	r1, [r7, #32]
 8005952:	415b      	adcs	r3, r3
 8005954:	627b      	str	r3, [r7, #36]	@ 0x24
 8005956:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800595a:	4641      	mov	r1, r8
 800595c:	1854      	adds	r4, r2, r1
 800595e:	4649      	mov	r1, r9
 8005960:	eb43 0501 	adc.w	r5, r3, r1
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	00eb      	lsls	r3, r5, #3
 800596e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005972:	00e2      	lsls	r2, r4, #3
 8005974:	4614      	mov	r4, r2
 8005976:	461d      	mov	r5, r3
 8005978:	4643      	mov	r3, r8
 800597a:	18e3      	adds	r3, r4, r3
 800597c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005980:	464b      	mov	r3, r9
 8005982:	eb45 0303 	adc.w	r3, r5, r3
 8005986:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800598a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005996:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059a6:	4629      	mov	r1, r5
 80059a8:	008b      	lsls	r3, r1, #2
 80059aa:	4621      	mov	r1, r4
 80059ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b0:	4621      	mov	r1, r4
 80059b2:	008a      	lsls	r2, r1, #2
 80059b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059b8:	f7fa fc12 	bl	80001e0 <__aeabi_uldivmod>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4b60      	ldr	r3, [pc, #384]	@ (8005b44 <UART_SetConfig+0x4e4>)
 80059c2:	fba3 2302 	umull	r2, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	011c      	lsls	r4, r3, #4
 80059ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	1891      	adds	r1, r2, r2
 80059e2:	61b9      	str	r1, [r7, #24]
 80059e4:	415b      	adcs	r3, r3
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ec:	4641      	mov	r1, r8
 80059ee:	1851      	adds	r1, r2, r1
 80059f0:	6139      	str	r1, [r7, #16]
 80059f2:	4649      	mov	r1, r9
 80059f4:	414b      	adcs	r3, r1
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a04:	4659      	mov	r1, fp
 8005a06:	00cb      	lsls	r3, r1, #3
 8005a08:	4651      	mov	r1, sl
 8005a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a0e:	4651      	mov	r1, sl
 8005a10:	00ca      	lsls	r2, r1, #3
 8005a12:	4610      	mov	r0, r2
 8005a14:	4619      	mov	r1, r3
 8005a16:	4603      	mov	r3, r0
 8005a18:	4642      	mov	r2, r8
 8005a1a:	189b      	adds	r3, r3, r2
 8005a1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a20:	464b      	mov	r3, r9
 8005a22:	460a      	mov	r2, r1
 8005a24:	eb42 0303 	adc.w	r3, r2, r3
 8005a28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a44:	4649      	mov	r1, r9
 8005a46:	008b      	lsls	r3, r1, #2
 8005a48:	4641      	mov	r1, r8
 8005a4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a4e:	4641      	mov	r1, r8
 8005a50:	008a      	lsls	r2, r1, #2
 8005a52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a56:	f7fa fbc3 	bl	80001e0 <__aeabi_uldivmod>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4611      	mov	r1, r2
 8005a60:	4b38      	ldr	r3, [pc, #224]	@ (8005b44 <UART_SetConfig+0x4e4>)
 8005a62:	fba3 2301 	umull	r2, r3, r3, r1
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	2264      	movs	r2, #100	@ 0x64
 8005a6a:	fb02 f303 	mul.w	r3, r2, r3
 8005a6e:	1acb      	subs	r3, r1, r3
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	3332      	adds	r3, #50	@ 0x32
 8005a74:	4a33      	ldr	r2, [pc, #204]	@ (8005b44 <UART_SetConfig+0x4e4>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a80:	441c      	add	r4, r3
 8005a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a86:	2200      	movs	r2, #0
 8005a88:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a90:	4642      	mov	r2, r8
 8005a92:	464b      	mov	r3, r9
 8005a94:	1891      	adds	r1, r2, r2
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	415b      	adcs	r3, r3
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	1851      	adds	r1, r2, r1
 8005aa4:	6039      	str	r1, [r7, #0]
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	414b      	adcs	r3, r1
 8005aaa:	607b      	str	r3, [r7, #4]
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ab8:	4659      	mov	r1, fp
 8005aba:	00cb      	lsls	r3, r1, #3
 8005abc:	4651      	mov	r1, sl
 8005abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac2:	4651      	mov	r1, sl
 8005ac4:	00ca      	lsls	r2, r1, #3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4603      	mov	r3, r0
 8005acc:	4642      	mov	r2, r8
 8005ace:	189b      	adds	r3, r3, r2
 8005ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ad2:	464b      	mov	r3, r9
 8005ad4:	460a      	mov	r2, r1
 8005ad6:	eb42 0303 	adc.w	r3, r2, r3
 8005ada:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ae6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005af4:	4649      	mov	r1, r9
 8005af6:	008b      	lsls	r3, r1, #2
 8005af8:	4641      	mov	r1, r8
 8005afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005afe:	4641      	mov	r1, r8
 8005b00:	008a      	lsls	r2, r1, #2
 8005b02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b06:	f7fa fb6b 	bl	80001e0 <__aeabi_uldivmod>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b44 <UART_SetConfig+0x4e4>)
 8005b10:	fba3 1302 	umull	r1, r3, r3, r2
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	2164      	movs	r1, #100	@ 0x64
 8005b18:	fb01 f303 	mul.w	r3, r1, r3
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	3332      	adds	r3, #50	@ 0x32
 8005b22:	4a08      	ldr	r2, [pc, #32]	@ (8005b44 <UART_SetConfig+0x4e4>)
 8005b24:	fba2 2303 	umull	r2, r3, r2, r3
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	f003 020f 	and.w	r2, r3, #15
 8005b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4422      	add	r2, r4
 8005b36:	609a      	str	r2, [r3, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b44:	51eb851f 	.word	0x51eb851f

08005b48 <__NVIC_SetPriority>:
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	6039      	str	r1, [r7, #0]
 8005b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	db0a      	blt.n	8005b72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	490c      	ldr	r1, [pc, #48]	@ (8005b94 <__NVIC_SetPriority+0x4c>)
 8005b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b66:	0112      	lsls	r2, r2, #4
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005b70:	e00a      	b.n	8005b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	4908      	ldr	r1, [pc, #32]	@ (8005b98 <__NVIC_SetPriority+0x50>)
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	3b04      	subs	r3, #4
 8005b80:	0112      	lsls	r2, r2, #4
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	440b      	add	r3, r1
 8005b86:	761a      	strb	r2, [r3, #24]
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	e000e100 	.word	0xe000e100
 8005b98:	e000ed00 	.word	0xe000ed00

08005b9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ba0:	4b05      	ldr	r3, [pc, #20]	@ (8005bb8 <SysTick_Handler+0x1c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ba4:	f001 fd46 	bl	8007634 <xTaskGetSchedulerState>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d001      	beq.n	8005bb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005bae:	f002 fb3b 	bl	8008228 <xPortSysTickHandler>
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	e000e010 	.word	0xe000e010

08005bbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	f06f 0004 	mvn.w	r0, #4
 8005bc6:	f7ff ffbf 	bl	8005b48 <__NVIC_SetPriority>
#endif
}
 8005bca:	bf00      	nop
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd6:	f3ef 8305 	mrs	r3, IPSR
 8005bda:	603b      	str	r3, [r7, #0]
  return(result);
 8005bdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005be2:	f06f 0305 	mvn.w	r3, #5
 8005be6:	607b      	str	r3, [r7, #4]
 8005be8:	e00c      	b.n	8005c04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005bea:	4b0a      	ldr	r3, [pc, #40]	@ (8005c14 <osKernelInitialize+0x44>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d105      	bne.n	8005bfe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005bf2:	4b08      	ldr	r3, [pc, #32]	@ (8005c14 <osKernelInitialize+0x44>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	607b      	str	r3, [r7, #4]
 8005bfc:	e002      	b.n	8005c04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8005c02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c04:	687b      	ldr	r3, [r7, #4]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20000540 	.word	0x20000540

08005c18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c1e:	f3ef 8305 	mrs	r3, IPSR
 8005c22:	603b      	str	r3, [r7, #0]
  return(result);
 8005c24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005c2a:	f06f 0305 	mvn.w	r3, #5
 8005c2e:	607b      	str	r3, [r7, #4]
 8005c30:	e010      	b.n	8005c54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c32:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <osKernelStart+0x48>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d109      	bne.n	8005c4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c3a:	f7ff ffbf 	bl	8005bbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c3e:	4b08      	ldr	r3, [pc, #32]	@ (8005c60 <osKernelStart+0x48>)
 8005c40:	2202      	movs	r2, #2
 8005c42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c44:	f001 f892 	bl	8006d6c <vTaskStartScheduler>
      stat = osOK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	607b      	str	r3, [r7, #4]
 8005c4c:	e002      	b.n	8005c54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c54:	687b      	ldr	r3, [r7, #4]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20000540 	.word	0x20000540

08005c64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08e      	sub	sp, #56	@ 0x38
 8005c68:	af04      	add	r7, sp, #16
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c74:	f3ef 8305 	mrs	r3, IPSR
 8005c78:	617b      	str	r3, [r7, #20]
  return(result);
 8005c7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d17e      	bne.n	8005d7e <osThreadNew+0x11a>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d07b      	beq.n	8005d7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c86:	2380      	movs	r3, #128	@ 0x80
 8005c88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c8a:	2318      	movs	r3, #24
 8005c8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005c92:	f04f 33ff 	mov.w	r3, #4294967295
 8005c96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d045      	beq.n	8005d2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <osThreadNew+0x48>
        name = attr->name;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d008      	beq.n	8005cd2 <osThreadNew+0x6e>
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	2b38      	cmp	r3, #56	@ 0x38
 8005cc4:	d805      	bhi.n	8005cd2 <osThreadNew+0x6e>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <osThreadNew+0x72>
        return (NULL);
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e054      	b.n	8005d80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	089b      	lsrs	r3, r3, #2
 8005ce4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00e      	beq.n	8005d0c <osThreadNew+0xa8>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	2ba7      	cmp	r3, #167	@ 0xa7
 8005cf4:	d90a      	bls.n	8005d0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d006      	beq.n	8005d0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <osThreadNew+0xa8>
        mem = 1;
 8005d06:	2301      	movs	r3, #1
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	e010      	b.n	8005d2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10c      	bne.n	8005d2e <osThreadNew+0xca>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d108      	bne.n	8005d2e <osThreadNew+0xca>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d104      	bne.n	8005d2e <osThreadNew+0xca>
          mem = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	e001      	b.n	8005d2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d110      	bne.n	8005d56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d3c:	9202      	str	r2, [sp, #8]
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	6a3a      	ldr	r2, [r7, #32]
 8005d48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 fe1a 	bl	8006984 <xTaskCreateStatic>
 8005d50:	4603      	mov	r3, r0
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	e013      	b.n	8005d7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d110      	bne.n	8005d7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	f107 0310 	add.w	r3, r7, #16
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fe68 	bl	8006a44 <xTaskCreate>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d001      	beq.n	8005d7e <osThreadNew+0x11a>
            hTask = NULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d7e:	693b      	ldr	r3, [r7, #16]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3728      	adds	r7, #40	@ 0x28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d90:	f3ef 8305 	mrs	r3, IPSR
 8005d94:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <osDelay+0x1c>
    stat = osErrorISR;
 8005d9c:	f06f 0305 	mvn.w	r3, #5
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	e007      	b.n	8005db4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 ffa6 	bl	8006d00 <vTaskDelay>
    }
  }

  return (stat);
 8005db4:	68fb      	ldr	r3, [r7, #12]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4a07      	ldr	r2, [pc, #28]	@ (8005dec <vApplicationGetIdleTaskMemory+0x2c>)
 8005dd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	4a06      	ldr	r2, [pc, #24]	@ (8005df0 <vApplicationGetIdleTaskMemory+0x30>)
 8005dd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2280      	movs	r2, #128	@ 0x80
 8005ddc:	601a      	str	r2, [r3, #0]
}
 8005dde:	bf00      	nop
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	20000544 	.word	0x20000544
 8005df0:	200005ec 	.word	0x200005ec

08005df4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4a07      	ldr	r2, [pc, #28]	@ (8005e20 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	4a06      	ldr	r2, [pc, #24]	@ (8005e24 <vApplicationGetTimerTaskMemory+0x30>)
 8005e0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e12:	601a      	str	r2, [r3, #0]
}
 8005e14:	bf00      	nop
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	200007ec 	.word	0x200007ec
 8005e24:	20000894 	.word	0x20000894

08005e28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f103 0208 	add.w	r2, r3, #8
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f103 0208 	add.w	r2, r3, #8
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f103 0208 	add.w	r2, r3, #8
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	601a      	str	r2, [r3, #0]
}
 8005ebe:	bf00      	nop
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b085      	sub	sp, #20
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee0:	d103      	bne.n	8005eea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	e00c      	b.n	8005f04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3308      	adds	r3, #8
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	e002      	b.n	8005ef8 <vListInsert+0x2e>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d2f6      	bcs.n	8005ef2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	601a      	str	r2, [r3, #0]
}
 8005f30:	bf00      	nop
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6892      	ldr	r2, [r2, #8]
 8005f52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6852      	ldr	r2, [r2, #4]
 8005f5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d103      	bne.n	8005f70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	1e5a      	subs	r2, r3, #1
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10b      	bne.n	8005fbc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005fb6:	bf00      	nop
 8005fb8:	bf00      	nop
 8005fba:	e7fd      	b.n	8005fb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005fbc:	f002 f8a4 	bl	8008108 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc8:	68f9      	ldr	r1, [r7, #12]
 8005fca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005fcc:	fb01 f303 	mul.w	r3, r1, r3
 8005fd0:	441a      	add	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fec:	3b01      	subs	r3, #1
 8005fee:	68f9      	ldr	r1, [r7, #12]
 8005ff0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ff2:	fb01 f303 	mul.w	r3, r1, r3
 8005ff6:	441a      	add	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	22ff      	movs	r2, #255	@ 0xff
 8006000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	22ff      	movs	r2, #255	@ 0xff
 8006008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d114      	bne.n	800603c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01a      	beq.n	8006050 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3310      	adds	r3, #16
 800601e:	4618      	mov	r0, r3
 8006020:	f001 f942 	bl	80072a8 <xTaskRemoveFromEventList>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d012      	beq.n	8006050 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800602a:	4b0d      	ldr	r3, [pc, #52]	@ (8006060 <xQueueGenericReset+0xd0>)
 800602c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	e009      	b.n	8006050 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3310      	adds	r3, #16
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff fef1 	bl	8005e28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3324      	adds	r3, #36	@ 0x24
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff feec 	bl	8005e28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006050:	f002 f88c 	bl	800816c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006054:	2301      	movs	r3, #1
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08e      	sub	sp, #56	@ 0x38
 8006068:	af02      	add	r7, sp, #8
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10b      	bne.n	8006090 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	e7fd      	b.n	800608c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10b      	bne.n	80060ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	e7fd      	b.n	80060aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <xQueueGenericCreateStatic+0x56>
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <xQueueGenericCreateStatic+0x5a>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <xQueueGenericCreateStatic+0x5c>
 80060be:	2300      	movs	r3, #0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10b      	bne.n	80060dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	623b      	str	r3, [r7, #32]
}
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	e7fd      	b.n	80060d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d102      	bne.n	80060e8 <xQueueGenericCreateStatic+0x84>
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <xQueueGenericCreateStatic+0x88>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <xQueueGenericCreateStatic+0x8a>
 80060ec:	2300      	movs	r3, #0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	61fb      	str	r3, [r7, #28]
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop
 8006108:	e7fd      	b.n	8006106 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800610a:	2350      	movs	r3, #80	@ 0x50
 800610c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b50      	cmp	r3, #80	@ 0x50
 8006112:	d00b      	beq.n	800612c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	61bb      	str	r3, [r7, #24]
}
 8006126:	bf00      	nop
 8006128:	bf00      	nop
 800612a:	e7fd      	b.n	8006128 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800612c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00d      	beq.n	8006154 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006140:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	4613      	mov	r3, r2
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f805 	bl	800615e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006156:	4618      	mov	r0, r3
 8006158:	3730      	adds	r7, #48	@ 0x30
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	607a      	str	r2, [r7, #4]
 800616a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d103      	bne.n	800617a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	e002      	b.n	8006180 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800618c:	2101      	movs	r1, #1
 800618e:	69b8      	ldr	r0, [r7, #24]
 8006190:	f7ff fefe 	bl	8005f90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	78fa      	ldrb	r2, [r7, #3]
 8006198:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800619c:	bf00      	nop
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08e      	sub	sp, #56	@ 0x38
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061b2:	2300      	movs	r3, #0
 80061b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10b      	bne.n	80061d8 <xQueueGenericSend+0x34>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80061d2:	bf00      	nop
 80061d4:	bf00      	nop
 80061d6:	e7fd      	b.n	80061d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d103      	bne.n	80061e6 <xQueueGenericSend+0x42>
 80061de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <xQueueGenericSend+0x46>
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <xQueueGenericSend+0x48>
 80061ea:	2300      	movs	r3, #0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10b      	bne.n	8006208 <xQueueGenericSend+0x64>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	e7fd      	b.n	8006204 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d103      	bne.n	8006216 <xQueueGenericSend+0x72>
 800620e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <xQueueGenericSend+0x76>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <xQueueGenericSend+0x78>
 800621a:	2300      	movs	r3, #0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10b      	bne.n	8006238 <xQueueGenericSend+0x94>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	623b      	str	r3, [r7, #32]
}
 8006232:	bf00      	nop
 8006234:	bf00      	nop
 8006236:	e7fd      	b.n	8006234 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006238:	f001 f9fc 	bl	8007634 <xTaskGetSchedulerState>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d102      	bne.n	8006248 <xQueueGenericSend+0xa4>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <xQueueGenericSend+0xa8>
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <xQueueGenericSend+0xaa>
 800624c:	2300      	movs	r3, #0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10b      	bne.n	800626a <xQueueGenericSend+0xc6>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	61fb      	str	r3, [r7, #28]
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	e7fd      	b.n	8006266 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800626a:	f001 ff4d 	bl	8008108 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800626e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006276:	429a      	cmp	r2, r3
 8006278:	d302      	bcc.n	8006280 <xQueueGenericSend+0xdc>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d129      	bne.n	80062d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006286:	f000 fa0f 	bl	80066a8 <prvCopyDataToQueue>
 800628a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800628c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006290:	2b00      	cmp	r3, #0
 8006292:	d010      	beq.n	80062b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006296:	3324      	adds	r3, #36	@ 0x24
 8006298:	4618      	mov	r0, r3
 800629a:	f001 f805 	bl	80072a8 <xTaskRemoveFromEventList>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d013      	beq.n	80062cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80062a4:	4b3f      	ldr	r3, [pc, #252]	@ (80063a4 <xQueueGenericSend+0x200>)
 80062a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	e00a      	b.n	80062cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d007      	beq.n	80062cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062bc:	4b39      	ldr	r3, [pc, #228]	@ (80063a4 <xQueueGenericSend+0x200>)
 80062be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062cc:	f001 ff4e 	bl	800816c <vPortExitCritical>
				return pdPASS;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e063      	b.n	800639c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d103      	bne.n	80062e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062da:	f001 ff47 	bl	800816c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	e05c      	b.n	800639c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d106      	bne.n	80062f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062e8:	f107 0314 	add.w	r3, r7, #20
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 f83f 	bl	8007370 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062f2:	2301      	movs	r3, #1
 80062f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062f6:	f001 ff39 	bl	800816c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062fa:	f000 fda7 	bl	8006e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062fe:	f001 ff03 	bl	8008108 <vPortEnterCritical>
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006308:	b25b      	sxtb	r3, r3
 800630a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630e:	d103      	bne.n	8006318 <xQueueGenericSend+0x174>
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800631e:	b25b      	sxtb	r3, r3
 8006320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006324:	d103      	bne.n	800632e <xQueueGenericSend+0x18a>
 8006326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800632e:	f001 ff1d 	bl	800816c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006332:	1d3a      	adds	r2, r7, #4
 8006334:	f107 0314 	add.w	r3, r7, #20
 8006338:	4611      	mov	r1, r2
 800633a:	4618      	mov	r0, r3
 800633c:	f001 f82e 	bl	800739c <xTaskCheckForTimeOut>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d124      	bne.n	8006390 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006346:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006348:	f000 faa6 	bl	8006898 <prvIsQueueFull>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d018      	beq.n	8006384 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006354:	3310      	adds	r3, #16
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	4611      	mov	r1, r2
 800635a:	4618      	mov	r0, r3
 800635c:	f000 ff52 	bl	8007204 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006362:	f000 fa31 	bl	80067c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006366:	f000 fd7f 	bl	8006e68 <xTaskResumeAll>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	f47f af7c 	bne.w	800626a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006372:	4b0c      	ldr	r3, [pc, #48]	@ (80063a4 <xQueueGenericSend+0x200>)
 8006374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	e772      	b.n	800626a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006386:	f000 fa1f 	bl	80067c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800638a:	f000 fd6d 	bl	8006e68 <xTaskResumeAll>
 800638e:	e76c      	b.n	800626a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006392:	f000 fa19 	bl	80067c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006396:	f000 fd67 	bl	8006e68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800639a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800639c:	4618      	mov	r0, r3
 800639e:	3738      	adds	r7, #56	@ 0x38
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	e000ed04 	.word	0xe000ed04

080063a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b090      	sub	sp, #64	@ 0x40
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80063ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10b      	bne.n	80063d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063d2:	bf00      	nop
 80063d4:	bf00      	nop
 80063d6:	e7fd      	b.n	80063d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d103      	bne.n	80063e6 <xQueueGenericSendFromISR+0x3e>
 80063de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <xQueueGenericSendFromISR+0x42>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e000      	b.n	80063ec <xQueueGenericSendFromISR+0x44>
 80063ea:	2300      	movs	r3, #0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10b      	bne.n	8006408 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	e7fd      	b.n	8006404 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d103      	bne.n	8006416 <xQueueGenericSendFromISR+0x6e>
 800640e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <xQueueGenericSendFromISR+0x72>
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <xQueueGenericSendFromISR+0x74>
 800641a:	2300      	movs	r3, #0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10b      	bne.n	8006438 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	623b      	str	r3, [r7, #32]
}
 8006432:	bf00      	nop
 8006434:	bf00      	nop
 8006436:	e7fd      	b.n	8006434 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006438:	f001 ff46 	bl	80082c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800643c:	f3ef 8211 	mrs	r2, BASEPRI
 8006440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	61fa      	str	r2, [r7, #28]
 8006452:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006454:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006456:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800645c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006460:	429a      	cmp	r2, r3
 8006462:	d302      	bcc.n	800646a <xQueueGenericSendFromISR+0xc2>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b02      	cmp	r3, #2
 8006468:	d12f      	bne.n	80064ca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800646a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006470:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006478:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006480:	f000 f912 	bl	80066a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006484:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648c:	d112      	bne.n	80064b4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006492:	2b00      	cmp	r3, #0
 8006494:	d016      	beq.n	80064c4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006498:	3324      	adds	r3, #36	@ 0x24
 800649a:	4618      	mov	r0, r3
 800649c:	f000 ff04 	bl	80072a8 <xTaskRemoveFromEventList>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00e      	beq.n	80064c4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00b      	beq.n	80064c4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	e007      	b.n	80064c4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80064b8:	3301      	adds	r3, #1
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	b25a      	sxtb	r2, r3
 80064be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80064c4:	2301      	movs	r3, #1
 80064c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80064c8:	e001      	b.n	80064ce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3740      	adds	r7, #64	@ 0x40
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08c      	sub	sp, #48	@ 0x30
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10b      	bne.n	8006516 <xQueueReceive+0x32>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	623b      	str	r3, [r7, #32]
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	e7fd      	b.n	8006512 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d103      	bne.n	8006524 <xQueueReceive+0x40>
 800651c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <xQueueReceive+0x44>
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <xQueueReceive+0x46>
 8006528:	2300      	movs	r3, #0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10b      	bne.n	8006546 <xQueueReceive+0x62>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	61fb      	str	r3, [r7, #28]
}
 8006540:	bf00      	nop
 8006542:	bf00      	nop
 8006544:	e7fd      	b.n	8006542 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006546:	f001 f875 	bl	8007634 <xTaskGetSchedulerState>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <xQueueReceive+0x72>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <xQueueReceive+0x76>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <xQueueReceive+0x78>
 800655a:	2300      	movs	r3, #0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10b      	bne.n	8006578 <xQueueReceive+0x94>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	61bb      	str	r3, [r7, #24]
}
 8006572:	bf00      	nop
 8006574:	bf00      	nop
 8006576:	e7fd      	b.n	8006574 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006578:	f001 fdc6 	bl	8008108 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800657c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006580:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01f      	beq.n	80065c8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006588:	68b9      	ldr	r1, [r7, #8]
 800658a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800658c:	f000 f8f6 	bl	800677c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006592:	1e5a      	subs	r2, r3, #1
 8006594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006596:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00f      	beq.n	80065c0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a2:	3310      	adds	r3, #16
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fe7f 	bl	80072a8 <xTaskRemoveFromEventList>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d007      	beq.n	80065c0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065b0:	4b3c      	ldr	r3, [pc, #240]	@ (80066a4 <xQueueReceive+0x1c0>)
 80065b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065c0:	f001 fdd4 	bl	800816c <vPortExitCritical>
				return pdPASS;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e069      	b.n	800669c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065ce:	f001 fdcd 	bl	800816c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065d2:	2300      	movs	r3, #0
 80065d4:	e062      	b.n	800669c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d106      	bne.n	80065ea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065dc:	f107 0310 	add.w	r3, r7, #16
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 fec5 	bl	8007370 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065e6:	2301      	movs	r3, #1
 80065e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065ea:	f001 fdbf 	bl	800816c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065ee:	f000 fc2d 	bl	8006e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065f2:	f001 fd89 	bl	8008108 <vPortEnterCritical>
 80065f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065fc:	b25b      	sxtb	r3, r3
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006602:	d103      	bne.n	800660c <xQueueReceive+0x128>
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800660c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006612:	b25b      	sxtb	r3, r3
 8006614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006618:	d103      	bne.n	8006622 <xQueueReceive+0x13e>
 800661a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006622:	f001 fda3 	bl	800816c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006626:	1d3a      	adds	r2, r7, #4
 8006628:	f107 0310 	add.w	r3, r7, #16
 800662c:	4611      	mov	r1, r2
 800662e:	4618      	mov	r0, r3
 8006630:	f000 feb4 	bl	800739c <xTaskCheckForTimeOut>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d123      	bne.n	8006682 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800663a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800663c:	f000 f916 	bl	800686c <prvIsQueueEmpty>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d017      	beq.n	8006676 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006648:	3324      	adds	r3, #36	@ 0x24
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	4611      	mov	r1, r2
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fdd8 	bl	8007204 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006656:	f000 f8b7 	bl	80067c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800665a:	f000 fc05 	bl	8006e68 <xTaskResumeAll>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d189      	bne.n	8006578 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006664:	4b0f      	ldr	r3, [pc, #60]	@ (80066a4 <xQueueReceive+0x1c0>)
 8006666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800666a:	601a      	str	r2, [r3, #0]
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	e780      	b.n	8006578 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006678:	f000 f8a6 	bl	80067c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800667c:	f000 fbf4 	bl	8006e68 <xTaskResumeAll>
 8006680:	e77a      	b.n	8006578 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006684:	f000 f8a0 	bl	80067c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006688:	f000 fbee 	bl	8006e68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800668c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800668e:	f000 f8ed 	bl	800686c <prvIsQueueEmpty>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	f43f af6f 	beq.w	8006578 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800669a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800669c:	4618      	mov	r0, r3
 800669e:	3730      	adds	r7, #48	@ 0x30
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	e000ed04 	.word	0xe000ed04

080066a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066b4:	2300      	movs	r3, #0
 80066b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10d      	bne.n	80066e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d14d      	bne.n	800676a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 ffcc 	bl	8007670 <xTaskPriorityDisinherit>
 80066d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	609a      	str	r2, [r3, #8]
 80066e0:	e043      	b.n	800676a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d119      	bne.n	800671c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6858      	ldr	r0, [r3, #4]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f0:	461a      	mov	r2, r3
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	f002 f89c 	bl	8008830 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006700:	441a      	add	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	429a      	cmp	r2, r3
 8006710:	d32b      	bcc.n	800676a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	605a      	str	r2, [r3, #4]
 800671a:	e026      	b.n	800676a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68d8      	ldr	r0, [r3, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006724:	461a      	mov	r2, r3
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	f002 f882 	bl	8008830 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006734:	425b      	negs	r3, r3
 8006736:	441a      	add	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	429a      	cmp	r2, r3
 8006746:	d207      	bcs.n	8006758 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006750:	425b      	negs	r3, r3
 8006752:	441a      	add	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d105      	bne.n	800676a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	3b01      	subs	r3, #1
 8006768:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006772:	697b      	ldr	r3, [r7, #20]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d018      	beq.n	80067c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006796:	441a      	add	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d303      	bcc.n	80067b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68d9      	ldr	r1, [r3, #12]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b8:	461a      	mov	r2, r3
 80067ba:	6838      	ldr	r0, [r7, #0]
 80067bc:	f002 f838 	bl	8008830 <memcpy>
	}
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067d0:	f001 fc9a 	bl	8008108 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067dc:	e011      	b.n	8006802 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d012      	beq.n	800680c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	3324      	adds	r3, #36	@ 0x24
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fd5c 	bl	80072a8 <xTaskRemoveFromEventList>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067f6:	f000 fe35 	bl	8007464 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006806:	2b00      	cmp	r3, #0
 8006808:	dce9      	bgt.n	80067de <prvUnlockQueue+0x16>
 800680a:	e000      	b.n	800680e <prvUnlockQueue+0x46>
					break;
 800680c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	22ff      	movs	r2, #255	@ 0xff
 8006812:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006816:	f001 fca9 	bl	800816c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800681a:	f001 fc75 	bl	8008108 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006824:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006826:	e011      	b.n	800684c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d012      	beq.n	8006856 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3310      	adds	r3, #16
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fd37 	bl	80072a8 <xTaskRemoveFromEventList>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006840:	f000 fe10 	bl	8007464 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	3b01      	subs	r3, #1
 8006848:	b2db      	uxtb	r3, r3
 800684a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800684c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006850:	2b00      	cmp	r3, #0
 8006852:	dce9      	bgt.n	8006828 <prvUnlockQueue+0x60>
 8006854:	e000      	b.n	8006858 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006856:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	22ff      	movs	r2, #255	@ 0xff
 800685c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006860:	f001 fc84 	bl	800816c <vPortExitCritical>
}
 8006864:	bf00      	nop
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006874:	f001 fc48 	bl	8008108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687c:	2b00      	cmp	r3, #0
 800687e:	d102      	bne.n	8006886 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006880:	2301      	movs	r3, #1
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e001      	b.n	800688a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800688a:	f001 fc6f 	bl	800816c <vPortExitCritical>

	return xReturn;
 800688e:	68fb      	ldr	r3, [r7, #12]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068a0:	f001 fc32 	bl	8008108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d102      	bne.n	80068b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068b0:	2301      	movs	r3, #1
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	e001      	b.n	80068ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068b6:	2300      	movs	r3, #0
 80068b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068ba:	f001 fc57 	bl	800816c <vPortExitCritical>

	return xReturn;
 80068be:	68fb      	ldr	r3, [r7, #12]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	e014      	b.n	8006902 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068d8:	4a0f      	ldr	r2, [pc, #60]	@ (8006918 <vQueueAddToRegistry+0x50>)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10b      	bne.n	80068fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068e4:	490c      	ldr	r1, [pc, #48]	@ (8006918 <vQueueAddToRegistry+0x50>)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006918 <vQueueAddToRegistry+0x50>)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	4413      	add	r3, r2
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068fa:	e006      	b.n	800690a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3301      	adds	r3, #1
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b07      	cmp	r3, #7
 8006906:	d9e7      	bls.n	80068d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006908:	bf00      	nop
 800690a:	bf00      	nop
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	20000c94 	.word	0x20000c94

0800691c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800692c:	f001 fbec 	bl	8008108 <vPortEnterCritical>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006936:	b25b      	sxtb	r3, r3
 8006938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693c:	d103      	bne.n	8006946 <vQueueWaitForMessageRestricted+0x2a>
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800694c:	b25b      	sxtb	r3, r3
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006952:	d103      	bne.n	800695c <vQueueWaitForMessageRestricted+0x40>
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800695c:	f001 fc06 	bl	800816c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006964:	2b00      	cmp	r3, #0
 8006966:	d106      	bne.n	8006976 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	3324      	adds	r3, #36	@ 0x24
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	4618      	mov	r0, r3
 8006972:	f000 fc6d 	bl	8007250 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006976:	6978      	ldr	r0, [r7, #20]
 8006978:	f7ff ff26 	bl	80067c8 <prvUnlockQueue>
	}
 800697c:	bf00      	nop
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08e      	sub	sp, #56	@ 0x38
 8006988:	af04      	add	r7, sp, #16
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10b      	bne.n	80069b0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	623b      	str	r3, [r7, #32]
}
 80069aa:	bf00      	nop
 80069ac:	bf00      	nop
 80069ae:	e7fd      	b.n	80069ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10b      	bne.n	80069ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	61fb      	str	r3, [r7, #28]
}
 80069c8:	bf00      	nop
 80069ca:	bf00      	nop
 80069cc:	e7fd      	b.n	80069ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069ce:	23a8      	movs	r3, #168	@ 0xa8
 80069d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	2ba8      	cmp	r3, #168	@ 0xa8
 80069d6:	d00b      	beq.n	80069f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	61bb      	str	r3, [r7, #24]
}
 80069ea:	bf00      	nop
 80069ec:	bf00      	nop
 80069ee:	e7fd      	b.n	80069ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01e      	beq.n	8006a36 <xTaskCreateStatic+0xb2>
 80069f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d01b      	beq.n	8006a36 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a00:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a06:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a10:	2300      	movs	r3, #0
 8006a12:	9303      	str	r3, [sp, #12]
 8006a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a16:	9302      	str	r3, [sp, #8]
 8006a18:	f107 0314 	add.w	r3, r7, #20
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	68b9      	ldr	r1, [r7, #8]
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 f851 	bl	8006ad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a30:	f000 f8f6 	bl	8006c20 <prvAddNewTaskToReadyList>
 8006a34:	e001      	b.n	8006a3a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006a36:	2300      	movs	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a3a:	697b      	ldr	r3, [r7, #20]
	}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3728      	adds	r7, #40	@ 0x28
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08c      	sub	sp, #48	@ 0x30
 8006a48:	af04      	add	r7, sp, #16
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	4613      	mov	r3, r2
 8006a52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a54:	88fb      	ldrh	r3, [r7, #6]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 fc77 	bl	800834c <pvPortMalloc>
 8006a5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00e      	beq.n	8006a84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a66:	20a8      	movs	r0, #168	@ 0xa8
 8006a68:	f001 fc70 	bl	800834c <pvPortMalloc>
 8006a6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a7a:	e005      	b.n	8006a88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a7c:	6978      	ldr	r0, [r7, #20]
 8006a7e:	f001 fd33 	bl	80084e8 <vPortFree>
 8006a82:	e001      	b.n	8006a88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a84:	2300      	movs	r3, #0
 8006a86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d017      	beq.n	8006abe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a96:	88fa      	ldrh	r2, [r7, #6]
 8006a98:	2300      	movs	r3, #0
 8006a9a:	9303      	str	r3, [sp, #12]
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	9302      	str	r3, [sp, #8]
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	68b9      	ldr	r1, [r7, #8]
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 f80f 	bl	8006ad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ab2:	69f8      	ldr	r0, [r7, #28]
 8006ab4:	f000 f8b4 	bl	8006c20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	61bb      	str	r3, [r7, #24]
 8006abc:	e002      	b.n	8006ac4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006abe:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ac4:	69bb      	ldr	r3, [r7, #24]
	}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3720      	adds	r7, #32
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	21a5      	movs	r1, #165	@ 0xa5
 8006aea:	f001 fe1d 	bl	8008728 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006af8:	3b01      	subs	r3, #1
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	f023 0307 	bic.w	r3, r3, #7
 8006b06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00b      	beq.n	8006b2a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	617b      	str	r3, [r7, #20]
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop
 8006b28:	e7fd      	b.n	8006b26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01f      	beq.n	8006b70 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b30:	2300      	movs	r3, #0
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	e012      	b.n	8006b5c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	7819      	ldrb	r1, [r3, #0]
 8006b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	4413      	add	r3, r2
 8006b44:	3334      	adds	r3, #52	@ 0x34
 8006b46:	460a      	mov	r2, r1
 8006b48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	4413      	add	r3, r2
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d006      	beq.n	8006b64 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	61fb      	str	r3, [r7, #28]
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	2b0f      	cmp	r3, #15
 8006b60:	d9e9      	bls.n	8006b36 <prvInitialiseNewTask+0x66>
 8006b62:	e000      	b.n	8006b66 <prvInitialiseNewTask+0x96>
			{
				break;
 8006b64:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b6e:	e003      	b.n	8006b78 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7a:	2b37      	cmp	r3, #55	@ 0x37
 8006b7c:	d901      	bls.n	8006b82 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b7e:	2337      	movs	r3, #55	@ 0x37
 8006b80:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b86:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b8c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	2200      	movs	r2, #0
 8006b92:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b96:	3304      	adds	r3, #4
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7ff f965 	bl	8005e68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	3318      	adds	r3, #24
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff f960 	bl	8005e68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bbc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd0:	3354      	adds	r3, #84	@ 0x54
 8006bd2:	224c      	movs	r2, #76	@ 0x4c
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f001 fda6 	bl	8008728 <memset>
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bde:	4a0d      	ldr	r2, [pc, #52]	@ (8006c14 <prvInitialiseNewTask+0x144>)
 8006be0:	659a      	str	r2, [r3, #88]	@ 0x58
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	4a0c      	ldr	r2, [pc, #48]	@ (8006c18 <prvInitialiseNewTask+0x148>)
 8006be6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bea:	4a0c      	ldr	r2, [pc, #48]	@ (8006c1c <prvInitialiseNewTask+0x14c>)
 8006bec:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	68f9      	ldr	r1, [r7, #12]
 8006bf2:	69b8      	ldr	r0, [r7, #24]
 8006bf4:	f001 f95a 	bl	8007eac <pxPortInitialiseStack>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c0a:	bf00      	nop
 8006c0c:	3720      	adds	r7, #32
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20004f28 	.word	0x20004f28
 8006c18:	20004f90 	.word	0x20004f90
 8006c1c:	20004ff8 	.word	0x20004ff8

08006c20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c28:	f001 fa6e 	bl	8008108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8006ce4 <prvAddNewTaskToReadyList+0xc4>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3301      	adds	r3, #1
 8006c32:	4a2c      	ldr	r2, [pc, #176]	@ (8006ce4 <prvAddNewTaskToReadyList+0xc4>)
 8006c34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c36:	4b2c      	ldr	r3, [pc, #176]	@ (8006ce8 <prvAddNewTaskToReadyList+0xc8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d109      	bne.n	8006c52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8006ce8 <prvAddNewTaskToReadyList+0xc8>)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c44:	4b27      	ldr	r3, [pc, #156]	@ (8006ce4 <prvAddNewTaskToReadyList+0xc4>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d110      	bne.n	8006c6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c4c:	f000 fc2e 	bl	80074ac <prvInitialiseTaskLists>
 8006c50:	e00d      	b.n	8006c6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c52:	4b26      	ldr	r3, [pc, #152]	@ (8006cec <prvAddNewTaskToReadyList+0xcc>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d109      	bne.n	8006c6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c5a:	4b23      	ldr	r3, [pc, #140]	@ (8006ce8 <prvAddNewTaskToReadyList+0xc8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d802      	bhi.n	8006c6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c68:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce8 <prvAddNewTaskToReadyList+0xc8>)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c6e:	4b20      	ldr	r3, [pc, #128]	@ (8006cf0 <prvAddNewTaskToReadyList+0xd0>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3301      	adds	r3, #1
 8006c74:	4a1e      	ldr	r2, [pc, #120]	@ (8006cf0 <prvAddNewTaskToReadyList+0xd0>)
 8006c76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c78:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf0 <prvAddNewTaskToReadyList+0xd0>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c84:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf4 <prvAddNewTaskToReadyList+0xd4>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d903      	bls.n	8006c94 <prvAddNewTaskToReadyList+0x74>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c90:	4a18      	ldr	r2, [pc, #96]	@ (8006cf4 <prvAddNewTaskToReadyList+0xd4>)
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4a15      	ldr	r2, [pc, #84]	@ (8006cf8 <prvAddNewTaskToReadyList+0xd8>)
 8006ca2:	441a      	add	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4610      	mov	r0, r2
 8006cac:	f7ff f8e9 	bl	8005e82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cb0:	f001 fa5c 	bl	800816c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8006cec <prvAddNewTaskToReadyList+0xcc>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00e      	beq.n	8006cda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce8 <prvAddNewTaskToReadyList+0xc8>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d207      	bcs.n	8006cda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cca:	4b0c      	ldr	r3, [pc, #48]	@ (8006cfc <prvAddNewTaskToReadyList+0xdc>)
 8006ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cda:	bf00      	nop
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200011a8 	.word	0x200011a8
 8006ce8:	20000cd4 	.word	0x20000cd4
 8006cec:	200011b4 	.word	0x200011b4
 8006cf0:	200011c4 	.word	0x200011c4
 8006cf4:	200011b0 	.word	0x200011b0
 8006cf8:	20000cd8 	.word	0x20000cd8
 8006cfc:	e000ed04 	.word	0xe000ed04

08006d00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d018      	beq.n	8006d44 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d12:	4b14      	ldr	r3, [pc, #80]	@ (8006d64 <vTaskDelay+0x64>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00b      	beq.n	8006d32 <vTaskDelay+0x32>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	60bb      	str	r3, [r7, #8]
}
 8006d2c:	bf00      	nop
 8006d2e:	bf00      	nop
 8006d30:	e7fd      	b.n	8006d2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d32:	f000 f88b 	bl	8006e4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d36:	2100      	movs	r1, #0
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fd09 	bl	8007750 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d3e:	f000 f893 	bl	8006e68 <xTaskResumeAll>
 8006d42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d107      	bne.n	8006d5a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006d4a:	4b07      	ldr	r3, [pc, #28]	@ (8006d68 <vTaskDelay+0x68>)
 8006d4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d5a:	bf00      	nop
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	200011d0 	.word	0x200011d0
 8006d68:	e000ed04 	.word	0xe000ed04

08006d6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	@ 0x28
 8006d70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d72:	2300      	movs	r3, #0
 8006d74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d7a:	463a      	mov	r2, r7
 8006d7c:	1d39      	adds	r1, r7, #4
 8006d7e:	f107 0308 	add.w	r3, r7, #8
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7ff f81c 	bl	8005dc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	9202      	str	r2, [sp, #8]
 8006d90:	9301      	str	r3, [sp, #4]
 8006d92:	2300      	movs	r3, #0
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	2300      	movs	r3, #0
 8006d98:	460a      	mov	r2, r1
 8006d9a:	4924      	ldr	r1, [pc, #144]	@ (8006e2c <vTaskStartScheduler+0xc0>)
 8006d9c:	4824      	ldr	r0, [pc, #144]	@ (8006e30 <vTaskStartScheduler+0xc4>)
 8006d9e:	f7ff fdf1 	bl	8006984 <xTaskCreateStatic>
 8006da2:	4603      	mov	r3, r0
 8006da4:	4a23      	ldr	r2, [pc, #140]	@ (8006e34 <vTaskStartScheduler+0xc8>)
 8006da6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006da8:	4b22      	ldr	r3, [pc, #136]	@ (8006e34 <vTaskStartScheduler+0xc8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006db0:	2301      	movs	r3, #1
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	e001      	b.n	8006dba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d102      	bne.n	8006dc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006dc0:	f000 fd1a 	bl	80077f8 <xTimerCreateTimerTask>
 8006dc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d11b      	bne.n	8006e04 <vTaskStartScheduler+0x98>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	613b      	str	r3, [r7, #16]
}
 8006dde:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006de0:	4b15      	ldr	r3, [pc, #84]	@ (8006e38 <vTaskStartScheduler+0xcc>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3354      	adds	r3, #84	@ 0x54
 8006de6:	4a15      	ldr	r2, [pc, #84]	@ (8006e3c <vTaskStartScheduler+0xd0>)
 8006de8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dea:	4b15      	ldr	r3, [pc, #84]	@ (8006e40 <vTaskStartScheduler+0xd4>)
 8006dec:	f04f 32ff 	mov.w	r2, #4294967295
 8006df0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006df2:	4b14      	ldr	r3, [pc, #80]	@ (8006e44 <vTaskStartScheduler+0xd8>)
 8006df4:	2201      	movs	r2, #1
 8006df6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006df8:	4b13      	ldr	r3, [pc, #76]	@ (8006e48 <vTaskStartScheduler+0xdc>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dfe:	f001 f8df 	bl	8007fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e02:	e00f      	b.n	8006e24 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0a:	d10b      	bne.n	8006e24 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	60fb      	str	r3, [r7, #12]
}
 8006e1e:	bf00      	nop
 8006e20:	bf00      	nop
 8006e22:	e7fd      	b.n	8006e20 <vTaskStartScheduler+0xb4>
}
 8006e24:	bf00      	nop
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	08008938 	.word	0x08008938
 8006e30:	0800747d 	.word	0x0800747d
 8006e34:	200011cc 	.word	0x200011cc
 8006e38:	20000cd4 	.word	0x20000cd4
 8006e3c:	2000001c 	.word	0x2000001c
 8006e40:	200011c8 	.word	0x200011c8
 8006e44:	200011b4 	.word	0x200011b4
 8006e48:	200011ac 	.word	0x200011ac

08006e4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e50:	4b04      	ldr	r3, [pc, #16]	@ (8006e64 <vTaskSuspendAll+0x18>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3301      	adds	r3, #1
 8006e56:	4a03      	ldr	r2, [pc, #12]	@ (8006e64 <vTaskSuspendAll+0x18>)
 8006e58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e5a:	bf00      	nop
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	200011d0 	.word	0x200011d0

08006e68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e76:	4b42      	ldr	r3, [pc, #264]	@ (8006f80 <xTaskResumeAll+0x118>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10b      	bne.n	8006e96 <xTaskResumeAll+0x2e>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	603b      	str	r3, [r7, #0]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e96:	f001 f937 	bl	8008108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e9a:	4b39      	ldr	r3, [pc, #228]	@ (8006f80 <xTaskResumeAll+0x118>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	4a37      	ldr	r2, [pc, #220]	@ (8006f80 <xTaskResumeAll+0x118>)
 8006ea2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ea4:	4b36      	ldr	r3, [pc, #216]	@ (8006f80 <xTaskResumeAll+0x118>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d162      	bne.n	8006f72 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eac:	4b35      	ldr	r3, [pc, #212]	@ (8006f84 <xTaskResumeAll+0x11c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d05e      	beq.n	8006f72 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eb4:	e02f      	b.n	8006f16 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb6:	4b34      	ldr	r3, [pc, #208]	@ (8006f88 <xTaskResumeAll+0x120>)
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3318      	adds	r3, #24
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff f83a 	bl	8005f3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff f835 	bl	8005f3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8006f8c <xTaskResumeAll+0x124>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d903      	bls.n	8006ee6 <xTaskResumeAll+0x7e>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8006f8c <xTaskResumeAll+0x124>)
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eea:	4613      	mov	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4a27      	ldr	r2, [pc, #156]	@ (8006f90 <xTaskResumeAll+0x128>)
 8006ef4:	441a      	add	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3304      	adds	r3, #4
 8006efa:	4619      	mov	r1, r3
 8006efc:	4610      	mov	r0, r2
 8006efe:	f7fe ffc0 	bl	8005e82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f06:	4b23      	ldr	r3, [pc, #140]	@ (8006f94 <xTaskResumeAll+0x12c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d302      	bcc.n	8006f16 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006f10:	4b21      	ldr	r3, [pc, #132]	@ (8006f98 <xTaskResumeAll+0x130>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f16:	4b1c      	ldr	r3, [pc, #112]	@ (8006f88 <xTaskResumeAll+0x120>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1cb      	bne.n	8006eb6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f24:	f000 fb66 	bl	80075f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f28:	4b1c      	ldr	r3, [pc, #112]	@ (8006f9c <xTaskResumeAll+0x134>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d010      	beq.n	8006f56 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f34:	f000 f846 	bl	8006fc4 <xTaskIncrementTick>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006f3e:	4b16      	ldr	r3, [pc, #88]	@ (8006f98 <xTaskResumeAll+0x130>)
 8006f40:	2201      	movs	r2, #1
 8006f42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1f1      	bne.n	8006f34 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006f50:	4b12      	ldr	r3, [pc, #72]	@ (8006f9c <xTaskResumeAll+0x134>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f56:	4b10      	ldr	r3, [pc, #64]	@ (8006f98 <xTaskResumeAll+0x130>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f62:	4b0f      	ldr	r3, [pc, #60]	@ (8006fa0 <xTaskResumeAll+0x138>)
 8006f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f72:	f001 f8fb 	bl	800816c <vPortExitCritical>

	return xAlreadyYielded;
 8006f76:	68bb      	ldr	r3, [r7, #8]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	200011d0 	.word	0x200011d0
 8006f84:	200011a8 	.word	0x200011a8
 8006f88:	20001168 	.word	0x20001168
 8006f8c:	200011b0 	.word	0x200011b0
 8006f90:	20000cd8 	.word	0x20000cd8
 8006f94:	20000cd4 	.word	0x20000cd4
 8006f98:	200011bc 	.word	0x200011bc
 8006f9c:	200011b8 	.word	0x200011b8
 8006fa0:	e000ed04 	.word	0xe000ed04

08006fa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006faa:	4b05      	ldr	r3, [pc, #20]	@ (8006fc0 <xTaskGetTickCount+0x1c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fb0:	687b      	ldr	r3, [r7, #4]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	200011ac 	.word	0x200011ac

08006fc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fce:	4b4f      	ldr	r3, [pc, #316]	@ (800710c <xTaskIncrementTick+0x148>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f040 8090 	bne.w	80070f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8007110 <xTaskIncrementTick+0x14c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fe0:	4a4b      	ldr	r2, [pc, #300]	@ (8007110 <xTaskIncrementTick+0x14c>)
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d121      	bne.n	8007030 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fec:	4b49      	ldr	r3, [pc, #292]	@ (8007114 <xTaskIncrementTick+0x150>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00b      	beq.n	800700e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	603b      	str	r3, [r7, #0]
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	e7fd      	b.n	800700a <xTaskIncrementTick+0x46>
 800700e:	4b41      	ldr	r3, [pc, #260]	@ (8007114 <xTaskIncrementTick+0x150>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	4b40      	ldr	r3, [pc, #256]	@ (8007118 <xTaskIncrementTick+0x154>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a3e      	ldr	r2, [pc, #248]	@ (8007114 <xTaskIncrementTick+0x150>)
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	4a3e      	ldr	r2, [pc, #248]	@ (8007118 <xTaskIncrementTick+0x154>)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	4b3e      	ldr	r3, [pc, #248]	@ (800711c <xTaskIncrementTick+0x158>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3301      	adds	r3, #1
 8007028:	4a3c      	ldr	r2, [pc, #240]	@ (800711c <xTaskIncrementTick+0x158>)
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	f000 fae2 	bl	80075f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007030:	4b3b      	ldr	r3, [pc, #236]	@ (8007120 <xTaskIncrementTick+0x15c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	429a      	cmp	r2, r3
 8007038:	d349      	bcc.n	80070ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800703a:	4b36      	ldr	r3, [pc, #216]	@ (8007114 <xTaskIncrementTick+0x150>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d104      	bne.n	800704e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007044:	4b36      	ldr	r3, [pc, #216]	@ (8007120 <xTaskIncrementTick+0x15c>)
 8007046:	f04f 32ff 	mov.w	r2, #4294967295
 800704a:	601a      	str	r2, [r3, #0]
					break;
 800704c:	e03f      	b.n	80070ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800704e:	4b31      	ldr	r3, [pc, #196]	@ (8007114 <xTaskIncrementTick+0x150>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	429a      	cmp	r2, r3
 8007064:	d203      	bcs.n	800706e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007066:	4a2e      	ldr	r2, [pc, #184]	@ (8007120 <xTaskIncrementTick+0x15c>)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800706c:	e02f      	b.n	80070ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	3304      	adds	r3, #4
 8007072:	4618      	mov	r0, r3
 8007074:	f7fe ff62 	bl	8005f3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707c:	2b00      	cmp	r3, #0
 800707e:	d004      	beq.n	800708a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	3318      	adds	r3, #24
 8007084:	4618      	mov	r0, r3
 8007086:	f7fe ff59 	bl	8005f3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800708e:	4b25      	ldr	r3, [pc, #148]	@ (8007124 <xTaskIncrementTick+0x160>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d903      	bls.n	800709e <xTaskIncrementTick+0xda>
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709a:	4a22      	ldr	r2, [pc, #136]	@ (8007124 <xTaskIncrementTick+0x160>)
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070a2:	4613      	mov	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4a1f      	ldr	r2, [pc, #124]	@ (8007128 <xTaskIncrementTick+0x164>)
 80070ac:	441a      	add	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4619      	mov	r1, r3
 80070b4:	4610      	mov	r0, r2
 80070b6:	f7fe fee4 	bl	8005e82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070be:	4b1b      	ldr	r3, [pc, #108]	@ (800712c <xTaskIncrementTick+0x168>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d3b8      	bcc.n	800703a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80070c8:	2301      	movs	r3, #1
 80070ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070cc:	e7b5      	b.n	800703a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070ce:	4b17      	ldr	r3, [pc, #92]	@ (800712c <xTaskIncrementTick+0x168>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d4:	4914      	ldr	r1, [pc, #80]	@ (8007128 <xTaskIncrementTick+0x164>)
 80070d6:	4613      	mov	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	440b      	add	r3, r1
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d901      	bls.n	80070ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80070e6:	2301      	movs	r3, #1
 80070e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070ea:	4b11      	ldr	r3, [pc, #68]	@ (8007130 <xTaskIncrementTick+0x16c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d007      	beq.n	8007102 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80070f2:	2301      	movs	r3, #1
 80070f4:	617b      	str	r3, [r7, #20]
 80070f6:	e004      	b.n	8007102 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007134 <xTaskIncrementTick+0x170>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3301      	adds	r3, #1
 80070fe:	4a0d      	ldr	r2, [pc, #52]	@ (8007134 <xTaskIncrementTick+0x170>)
 8007100:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007102:	697b      	ldr	r3, [r7, #20]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	200011d0 	.word	0x200011d0
 8007110:	200011ac 	.word	0x200011ac
 8007114:	20001160 	.word	0x20001160
 8007118:	20001164 	.word	0x20001164
 800711c:	200011c0 	.word	0x200011c0
 8007120:	200011c8 	.word	0x200011c8
 8007124:	200011b0 	.word	0x200011b0
 8007128:	20000cd8 	.word	0x20000cd8
 800712c:	20000cd4 	.word	0x20000cd4
 8007130:	200011bc 	.word	0x200011bc
 8007134:	200011b8 	.word	0x200011b8

08007138 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800713e:	4b2b      	ldr	r3, [pc, #172]	@ (80071ec <vTaskSwitchContext+0xb4>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007146:	4b2a      	ldr	r3, [pc, #168]	@ (80071f0 <vTaskSwitchContext+0xb8>)
 8007148:	2201      	movs	r2, #1
 800714a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800714c:	e047      	b.n	80071de <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800714e:	4b28      	ldr	r3, [pc, #160]	@ (80071f0 <vTaskSwitchContext+0xb8>)
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007154:	4b27      	ldr	r3, [pc, #156]	@ (80071f4 <vTaskSwitchContext+0xbc>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	e011      	b.n	8007180 <vTaskSwitchContext+0x48>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10b      	bne.n	800717a <vTaskSwitchContext+0x42>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	607b      	str	r3, [r7, #4]
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop
 8007178:	e7fd      	b.n	8007176 <vTaskSwitchContext+0x3e>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3b01      	subs	r3, #1
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	491d      	ldr	r1, [pc, #116]	@ (80071f8 <vTaskSwitchContext+0xc0>)
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4613      	mov	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0e3      	beq.n	800715c <vTaskSwitchContext+0x24>
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4613      	mov	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4a16      	ldr	r2, [pc, #88]	@ (80071f8 <vTaskSwitchContext+0xc0>)
 80071a0:	4413      	add	r3, r2
 80071a2:	60bb      	str	r3, [r7, #8]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	605a      	str	r2, [r3, #4]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	3308      	adds	r3, #8
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d104      	bne.n	80071c4 <vTaskSwitchContext+0x8c>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	605a      	str	r2, [r3, #4]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	4a0c      	ldr	r2, [pc, #48]	@ (80071fc <vTaskSwitchContext+0xc4>)
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	4a09      	ldr	r2, [pc, #36]	@ (80071f4 <vTaskSwitchContext+0xbc>)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071d4:	4b09      	ldr	r3, [pc, #36]	@ (80071fc <vTaskSwitchContext+0xc4>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3354      	adds	r3, #84	@ 0x54
 80071da:	4a09      	ldr	r2, [pc, #36]	@ (8007200 <vTaskSwitchContext+0xc8>)
 80071dc:	6013      	str	r3, [r2, #0]
}
 80071de:	bf00      	nop
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	200011d0 	.word	0x200011d0
 80071f0:	200011bc 	.word	0x200011bc
 80071f4:	200011b0 	.word	0x200011b0
 80071f8:	20000cd8 	.word	0x20000cd8
 80071fc:	20000cd4 	.word	0x20000cd4
 8007200:	2000001c 	.word	0x2000001c

08007204 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10b      	bne.n	800722c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	60fb      	str	r3, [r7, #12]
}
 8007226:	bf00      	nop
 8007228:	bf00      	nop
 800722a:	e7fd      	b.n	8007228 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800722c:	4b07      	ldr	r3, [pc, #28]	@ (800724c <vTaskPlaceOnEventList+0x48>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3318      	adds	r3, #24
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7fe fe48 	bl	8005eca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800723a:	2101      	movs	r1, #1
 800723c:	6838      	ldr	r0, [r7, #0]
 800723e:	f000 fa87 	bl	8007750 <prvAddCurrentTaskToDelayedList>
}
 8007242:	bf00      	nop
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20000cd4 	.word	0x20000cd4

08007250 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10b      	bne.n	800727a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	617b      	str	r3, [r7, #20]
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	e7fd      	b.n	8007276 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800727a:	4b0a      	ldr	r3, [pc, #40]	@ (80072a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3318      	adds	r3, #24
 8007280:	4619      	mov	r1, r3
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f7fe fdfd 	bl	8005e82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800728e:	f04f 33ff 	mov.w	r3, #4294967295
 8007292:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	68b8      	ldr	r0, [r7, #8]
 8007298:	f000 fa5a 	bl	8007750 <prvAddCurrentTaskToDelayedList>
	}
 800729c:	bf00      	nop
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20000cd4 	.word	0x20000cd4

080072a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10b      	bne.n	80072d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	60fb      	str	r3, [r7, #12]
}
 80072d0:	bf00      	nop
 80072d2:	bf00      	nop
 80072d4:	e7fd      	b.n	80072d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	3318      	adds	r3, #24
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe fe2e 	bl	8005f3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007358 <xTaskRemoveFromEventList+0xb0>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d11d      	bne.n	8007324 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	3304      	adds	r3, #4
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe fe25 	bl	8005f3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f6:	4b19      	ldr	r3, [pc, #100]	@ (800735c <xTaskRemoveFromEventList+0xb4>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d903      	bls.n	8007306 <xTaskRemoveFromEventList+0x5e>
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007302:	4a16      	ldr	r2, [pc, #88]	@ (800735c <xTaskRemoveFromEventList+0xb4>)
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4a13      	ldr	r2, [pc, #76]	@ (8007360 <xTaskRemoveFromEventList+0xb8>)
 8007314:	441a      	add	r2, r3
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	3304      	adds	r3, #4
 800731a:	4619      	mov	r1, r3
 800731c:	4610      	mov	r0, r2
 800731e:	f7fe fdb0 	bl	8005e82 <vListInsertEnd>
 8007322:	e005      	b.n	8007330 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	3318      	adds	r3, #24
 8007328:	4619      	mov	r1, r3
 800732a:	480e      	ldr	r0, [pc, #56]	@ (8007364 <xTaskRemoveFromEventList+0xbc>)
 800732c:	f7fe fda9 	bl	8005e82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007334:	4b0c      	ldr	r3, [pc, #48]	@ (8007368 <xTaskRemoveFromEventList+0xc0>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733a:	429a      	cmp	r2, r3
 800733c:	d905      	bls.n	800734a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800733e:	2301      	movs	r3, #1
 8007340:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007342:	4b0a      	ldr	r3, [pc, #40]	@ (800736c <xTaskRemoveFromEventList+0xc4>)
 8007344:	2201      	movs	r2, #1
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	e001      	b.n	800734e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800734e:	697b      	ldr	r3, [r7, #20]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	200011d0 	.word	0x200011d0
 800735c:	200011b0 	.word	0x200011b0
 8007360:	20000cd8 	.word	0x20000cd8
 8007364:	20001168 	.word	0x20001168
 8007368:	20000cd4 	.word	0x20000cd4
 800736c:	200011bc 	.word	0x200011bc

08007370 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007378:	4b06      	ldr	r3, [pc, #24]	@ (8007394 <vTaskInternalSetTimeOutState+0x24>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007380:	4b05      	ldr	r3, [pc, #20]	@ (8007398 <vTaskInternalSetTimeOutState+0x28>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	605a      	str	r2, [r3, #4]
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	200011c0 	.word	0x200011c0
 8007398:	200011ac 	.word	0x200011ac

0800739c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10b      	bne.n	80073c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	613b      	str	r3, [r7, #16]
}
 80073be:	bf00      	nop
 80073c0:	bf00      	nop
 80073c2:	e7fd      	b.n	80073c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	60fb      	str	r3, [r7, #12]
}
 80073dc:	bf00      	nop
 80073de:	bf00      	nop
 80073e0:	e7fd      	b.n	80073de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80073e2:	f000 fe91 	bl	8008108 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073e6:	4b1d      	ldr	r3, [pc, #116]	@ (800745c <xTaskCheckForTimeOut+0xc0>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fe:	d102      	bne.n	8007406 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007400:	2300      	movs	r3, #0
 8007402:	61fb      	str	r3, [r7, #28]
 8007404:	e023      	b.n	800744e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	4b15      	ldr	r3, [pc, #84]	@ (8007460 <xTaskCheckForTimeOut+0xc4>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	d007      	beq.n	8007422 <xTaskCheckForTimeOut+0x86>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	429a      	cmp	r2, r3
 800741a:	d302      	bcc.n	8007422 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800741c:	2301      	movs	r3, #1
 800741e:	61fb      	str	r3, [r7, #28]
 8007420:	e015      	b.n	800744e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	429a      	cmp	r2, r3
 800742a:	d20b      	bcs.n	8007444 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	1ad2      	subs	r2, r2, r3
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff ff99 	bl	8007370 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800743e:	2300      	movs	r3, #0
 8007440:	61fb      	str	r3, [r7, #28]
 8007442:	e004      	b.n	800744e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800744a:	2301      	movs	r3, #1
 800744c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800744e:	f000 fe8d 	bl	800816c <vPortExitCritical>

	return xReturn;
 8007452:	69fb      	ldr	r3, [r7, #28]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3720      	adds	r7, #32
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	200011ac 	.word	0x200011ac
 8007460:	200011c0 	.word	0x200011c0

08007464 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007468:	4b03      	ldr	r3, [pc, #12]	@ (8007478 <vTaskMissedYield+0x14>)
 800746a:	2201      	movs	r2, #1
 800746c:	601a      	str	r2, [r3, #0]
}
 800746e:	bf00      	nop
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	200011bc 	.word	0x200011bc

0800747c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007484:	f000 f852 	bl	800752c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007488:	4b06      	ldr	r3, [pc, #24]	@ (80074a4 <prvIdleTask+0x28>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d9f9      	bls.n	8007484 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007490:	4b05      	ldr	r3, [pc, #20]	@ (80074a8 <prvIdleTask+0x2c>)
 8007492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074a0:	e7f0      	b.n	8007484 <prvIdleTask+0x8>
 80074a2:	bf00      	nop
 80074a4:	20000cd8 	.word	0x20000cd8
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074b2:	2300      	movs	r3, #0
 80074b4:	607b      	str	r3, [r7, #4]
 80074b6:	e00c      	b.n	80074d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	4613      	mov	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4a12      	ldr	r2, [pc, #72]	@ (800750c <prvInitialiseTaskLists+0x60>)
 80074c4:	4413      	add	r3, r2
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe fcae 	bl	8005e28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	3301      	adds	r3, #1
 80074d0:	607b      	str	r3, [r7, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b37      	cmp	r3, #55	@ 0x37
 80074d6:	d9ef      	bls.n	80074b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074d8:	480d      	ldr	r0, [pc, #52]	@ (8007510 <prvInitialiseTaskLists+0x64>)
 80074da:	f7fe fca5 	bl	8005e28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074de:	480d      	ldr	r0, [pc, #52]	@ (8007514 <prvInitialiseTaskLists+0x68>)
 80074e0:	f7fe fca2 	bl	8005e28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074e4:	480c      	ldr	r0, [pc, #48]	@ (8007518 <prvInitialiseTaskLists+0x6c>)
 80074e6:	f7fe fc9f 	bl	8005e28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074ea:	480c      	ldr	r0, [pc, #48]	@ (800751c <prvInitialiseTaskLists+0x70>)
 80074ec:	f7fe fc9c 	bl	8005e28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074f0:	480b      	ldr	r0, [pc, #44]	@ (8007520 <prvInitialiseTaskLists+0x74>)
 80074f2:	f7fe fc99 	bl	8005e28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007524 <prvInitialiseTaskLists+0x78>)
 80074f8:	4a05      	ldr	r2, [pc, #20]	@ (8007510 <prvInitialiseTaskLists+0x64>)
 80074fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007528 <prvInitialiseTaskLists+0x7c>)
 80074fe:	4a05      	ldr	r2, [pc, #20]	@ (8007514 <prvInitialiseTaskLists+0x68>)
 8007500:	601a      	str	r2, [r3, #0]
}
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20000cd8 	.word	0x20000cd8
 8007510:	20001138 	.word	0x20001138
 8007514:	2000114c 	.word	0x2000114c
 8007518:	20001168 	.word	0x20001168
 800751c:	2000117c 	.word	0x2000117c
 8007520:	20001194 	.word	0x20001194
 8007524:	20001160 	.word	0x20001160
 8007528:	20001164 	.word	0x20001164

0800752c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007532:	e019      	b.n	8007568 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007534:	f000 fde8 	bl	8008108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007538:	4b10      	ldr	r3, [pc, #64]	@ (800757c <prvCheckTasksWaitingTermination+0x50>)
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	3304      	adds	r3, #4
 8007544:	4618      	mov	r0, r3
 8007546:	f7fe fcf9 	bl	8005f3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800754a:	4b0d      	ldr	r3, [pc, #52]	@ (8007580 <prvCheckTasksWaitingTermination+0x54>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3b01      	subs	r3, #1
 8007550:	4a0b      	ldr	r2, [pc, #44]	@ (8007580 <prvCheckTasksWaitingTermination+0x54>)
 8007552:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007554:	4b0b      	ldr	r3, [pc, #44]	@ (8007584 <prvCheckTasksWaitingTermination+0x58>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3b01      	subs	r3, #1
 800755a:	4a0a      	ldr	r2, [pc, #40]	@ (8007584 <prvCheckTasksWaitingTermination+0x58>)
 800755c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800755e:	f000 fe05 	bl	800816c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f810 	bl	8007588 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007568:	4b06      	ldr	r3, [pc, #24]	@ (8007584 <prvCheckTasksWaitingTermination+0x58>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e1      	bne.n	8007534 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007570:	bf00      	nop
 8007572:	bf00      	nop
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	2000117c 	.word	0x2000117c
 8007580:	200011a8 	.word	0x200011a8
 8007584:	20001190 	.word	0x20001190

08007588 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3354      	adds	r3, #84	@ 0x54
 8007594:	4618      	mov	r0, r3
 8007596:	f001 f8cf 	bl	8008738 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d108      	bne.n	80075b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 ff9d 	bl	80084e8 <vPortFree>
				vPortFree( pxTCB );
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 ff9a 	bl	80084e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075b4:	e019      	b.n	80075ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d103      	bne.n	80075c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 ff91 	bl	80084e8 <vPortFree>
	}
 80075c6:	e010      	b.n	80075ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d00b      	beq.n	80075ea <prvDeleteTCB+0x62>
	__asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	60fb      	str	r3, [r7, #12]
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop
 80075e8:	e7fd      	b.n	80075e6 <prvDeleteTCB+0x5e>
	}
 80075ea:	bf00      	nop
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075fa:	4b0c      	ldr	r3, [pc, #48]	@ (800762c <prvResetNextTaskUnblockTime+0x38>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d104      	bne.n	800760e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007604:	4b0a      	ldr	r3, [pc, #40]	@ (8007630 <prvResetNextTaskUnblockTime+0x3c>)
 8007606:	f04f 32ff 	mov.w	r2, #4294967295
 800760a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800760c:	e008      	b.n	8007620 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800760e:	4b07      	ldr	r3, [pc, #28]	@ (800762c <prvResetNextTaskUnblockTime+0x38>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	4a04      	ldr	r2, [pc, #16]	@ (8007630 <prvResetNextTaskUnblockTime+0x3c>)
 800761e:	6013      	str	r3, [r2, #0]
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	20001160 	.word	0x20001160
 8007630:	200011c8 	.word	0x200011c8

08007634 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800763a:	4b0b      	ldr	r3, [pc, #44]	@ (8007668 <xTaskGetSchedulerState+0x34>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d102      	bne.n	8007648 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007642:	2301      	movs	r3, #1
 8007644:	607b      	str	r3, [r7, #4]
 8007646:	e008      	b.n	800765a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007648:	4b08      	ldr	r3, [pc, #32]	@ (800766c <xTaskGetSchedulerState+0x38>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d102      	bne.n	8007656 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007650:	2302      	movs	r3, #2
 8007652:	607b      	str	r3, [r7, #4]
 8007654:	e001      	b.n	800765a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007656:	2300      	movs	r3, #0
 8007658:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800765a:	687b      	ldr	r3, [r7, #4]
	}
 800765c:	4618      	mov	r0, r3
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	200011b4 	.word	0x200011b4
 800766c:	200011d0 	.word	0x200011d0

08007670 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d058      	beq.n	8007738 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007686:	4b2f      	ldr	r3, [pc, #188]	@ (8007744 <xTaskPriorityDisinherit+0xd4>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	429a      	cmp	r2, r3
 800768e:	d00b      	beq.n	80076a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	60fb      	str	r3, [r7, #12]
}
 80076a2:	bf00      	nop
 80076a4:	bf00      	nop
 80076a6:	e7fd      	b.n	80076a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10b      	bne.n	80076c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	60bb      	str	r3, [r7, #8]
}
 80076c2:	bf00      	nop
 80076c4:	bf00      	nop
 80076c6:	e7fd      	b.n	80076c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076cc:	1e5a      	subs	r2, r3, #1
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076da:	429a      	cmp	r2, r3
 80076dc:	d02c      	beq.n	8007738 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d128      	bne.n	8007738 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	3304      	adds	r3, #4
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fc26 	bl	8005f3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007708:	4b0f      	ldr	r3, [pc, #60]	@ (8007748 <xTaskPriorityDisinherit+0xd8>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d903      	bls.n	8007718 <xTaskPriorityDisinherit+0xa8>
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007714:	4a0c      	ldr	r2, [pc, #48]	@ (8007748 <xTaskPriorityDisinherit+0xd8>)
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800771c:	4613      	mov	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4a09      	ldr	r2, [pc, #36]	@ (800774c <xTaskPriorityDisinherit+0xdc>)
 8007726:	441a      	add	r2, r3
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	3304      	adds	r3, #4
 800772c:	4619      	mov	r1, r3
 800772e:	4610      	mov	r0, r2
 8007730:	f7fe fba7 	bl	8005e82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007734:	2301      	movs	r3, #1
 8007736:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007738:	697b      	ldr	r3, [r7, #20]
	}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20000cd4 	.word	0x20000cd4
 8007748:	200011b0 	.word	0x200011b0
 800774c:	20000cd8 	.word	0x20000cd8

08007750 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800775a:	4b21      	ldr	r3, [pc, #132]	@ (80077e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007760:	4b20      	ldr	r3, [pc, #128]	@ (80077e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3304      	adds	r3, #4
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe fbe8 	bl	8005f3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007772:	d10a      	bne.n	800778a <prvAddCurrentTaskToDelayedList+0x3a>
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d007      	beq.n	800778a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800777a:	4b1a      	ldr	r3, [pc, #104]	@ (80077e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3304      	adds	r3, #4
 8007780:	4619      	mov	r1, r3
 8007782:	4819      	ldr	r0, [pc, #100]	@ (80077e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007784:	f7fe fb7d 	bl	8005e82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007788:	e026      	b.n	80077d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4413      	add	r3, r2
 8007790:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007792:	4b14      	ldr	r3, [pc, #80]	@ (80077e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d209      	bcs.n	80077b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077a2:	4b12      	ldr	r3, [pc, #72]	@ (80077ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	4b0f      	ldr	r3, [pc, #60]	@ (80077e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3304      	adds	r3, #4
 80077ac:	4619      	mov	r1, r3
 80077ae:	4610      	mov	r0, r2
 80077b0:	f7fe fb8b 	bl	8005eca <vListInsert>
}
 80077b4:	e010      	b.n	80077d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077b6:	4b0e      	ldr	r3, [pc, #56]	@ (80077f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	4b0a      	ldr	r3, [pc, #40]	@ (80077e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3304      	adds	r3, #4
 80077c0:	4619      	mov	r1, r3
 80077c2:	4610      	mov	r0, r2
 80077c4:	f7fe fb81 	bl	8005eca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077c8:	4b0a      	ldr	r3, [pc, #40]	@ (80077f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d202      	bcs.n	80077d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077d2:	4a08      	ldr	r2, [pc, #32]	@ (80077f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	6013      	str	r3, [r2, #0]
}
 80077d8:	bf00      	nop
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	200011ac 	.word	0x200011ac
 80077e4:	20000cd4 	.word	0x20000cd4
 80077e8:	20001194 	.word	0x20001194
 80077ec:	20001164 	.word	0x20001164
 80077f0:	20001160 	.word	0x20001160
 80077f4:	200011c8 	.word	0x200011c8

080077f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08a      	sub	sp, #40	@ 0x28
 80077fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077fe:	2300      	movs	r3, #0
 8007800:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007802:	f000 fb13 	bl	8007e2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007806:	4b1d      	ldr	r3, [pc, #116]	@ (800787c <xTimerCreateTimerTask+0x84>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d021      	beq.n	8007852 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007816:	1d3a      	adds	r2, r7, #4
 8007818:	f107 0108 	add.w	r1, r7, #8
 800781c:	f107 030c 	add.w	r3, r7, #12
 8007820:	4618      	mov	r0, r3
 8007822:	f7fe fae7 	bl	8005df4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	9202      	str	r2, [sp, #8]
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	2302      	movs	r3, #2
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	2300      	movs	r3, #0
 8007836:	460a      	mov	r2, r1
 8007838:	4911      	ldr	r1, [pc, #68]	@ (8007880 <xTimerCreateTimerTask+0x88>)
 800783a:	4812      	ldr	r0, [pc, #72]	@ (8007884 <xTimerCreateTimerTask+0x8c>)
 800783c:	f7ff f8a2 	bl	8006984 <xTaskCreateStatic>
 8007840:	4603      	mov	r3, r0
 8007842:	4a11      	ldr	r2, [pc, #68]	@ (8007888 <xTimerCreateTimerTask+0x90>)
 8007844:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007846:	4b10      	ldr	r3, [pc, #64]	@ (8007888 <xTimerCreateTimerTask+0x90>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800784e:	2301      	movs	r3, #1
 8007850:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10b      	bne.n	8007870 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	613b      	str	r3, [r7, #16]
}
 800786a:	bf00      	nop
 800786c:	bf00      	nop
 800786e:	e7fd      	b.n	800786c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007870:	697b      	ldr	r3, [r7, #20]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20001204 	.word	0x20001204
 8007880:	08008940 	.word	0x08008940
 8007884:	080079c5 	.word	0x080079c5
 8007888:	20001208 	.word	0x20001208

0800788c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08a      	sub	sp, #40	@ 0x28
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
 8007898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800789a:	2300      	movs	r3, #0
 800789c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10b      	bne.n	80078bc <xTimerGenericCommand+0x30>
	__asm volatile
 80078a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a8:	f383 8811 	msr	BASEPRI, r3
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	623b      	str	r3, [r7, #32]
}
 80078b6:	bf00      	nop
 80078b8:	bf00      	nop
 80078ba:	e7fd      	b.n	80078b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078bc:	4b19      	ldr	r3, [pc, #100]	@ (8007924 <xTimerGenericCommand+0x98>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d02a      	beq.n	800791a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b05      	cmp	r3, #5
 80078d4:	dc18      	bgt.n	8007908 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078d6:	f7ff fead 	bl	8007634 <xTaskGetSchedulerState>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d109      	bne.n	80078f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078e0:	4b10      	ldr	r3, [pc, #64]	@ (8007924 <xTimerGenericCommand+0x98>)
 80078e2:	6818      	ldr	r0, [r3, #0]
 80078e4:	f107 0110 	add.w	r1, r7, #16
 80078e8:	2300      	movs	r3, #0
 80078ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078ec:	f7fe fc5a 	bl	80061a4 <xQueueGenericSend>
 80078f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80078f2:	e012      	b.n	800791a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007924 <xTimerGenericCommand+0x98>)
 80078f6:	6818      	ldr	r0, [r3, #0]
 80078f8:	f107 0110 	add.w	r1, r7, #16
 80078fc:	2300      	movs	r3, #0
 80078fe:	2200      	movs	r2, #0
 8007900:	f7fe fc50 	bl	80061a4 <xQueueGenericSend>
 8007904:	6278      	str	r0, [r7, #36]	@ 0x24
 8007906:	e008      	b.n	800791a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007908:	4b06      	ldr	r3, [pc, #24]	@ (8007924 <xTimerGenericCommand+0x98>)
 800790a:	6818      	ldr	r0, [r3, #0]
 800790c:	f107 0110 	add.w	r1, r7, #16
 8007910:	2300      	movs	r3, #0
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	f7fe fd48 	bl	80063a8 <xQueueGenericSendFromISR>
 8007918:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800791c:	4618      	mov	r0, r3
 800791e:	3728      	adds	r7, #40	@ 0x28
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20001204 	.word	0x20001204

08007928 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b088      	sub	sp, #32
 800792c:	af02      	add	r7, sp, #8
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007932:	4b23      	ldr	r3, [pc, #140]	@ (80079c0 <prvProcessExpiredTimer+0x98>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	3304      	adds	r3, #4
 8007940:	4618      	mov	r0, r3
 8007942:	f7fe fafb 	bl	8005f3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800794c:	f003 0304 	and.w	r3, r3, #4
 8007950:	2b00      	cmp	r3, #0
 8007952:	d023      	beq.n	800799c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	699a      	ldr	r2, [r3, #24]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	18d1      	adds	r1, r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	6978      	ldr	r0, [r7, #20]
 8007962:	f000 f8d5 	bl	8007b10 <prvInsertTimerInActiveList>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d020      	beq.n	80079ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800796c:	2300      	movs	r3, #0
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	2300      	movs	r3, #0
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	2100      	movs	r1, #0
 8007976:	6978      	ldr	r0, [r7, #20]
 8007978:	f7ff ff88 	bl	800788c <xTimerGenericCommand>
 800797c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d114      	bne.n	80079ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	60fb      	str	r3, [r7, #12]
}
 8007996:	bf00      	nop
 8007998:	bf00      	nop
 800799a:	e7fd      	b.n	8007998 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079a2:	f023 0301 	bic.w	r3, r3, #1
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	6978      	ldr	r0, [r7, #20]
 80079b4:	4798      	blx	r3
}
 80079b6:	bf00      	nop
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	200011fc 	.word	0x200011fc

080079c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079cc:	f107 0308 	add.w	r3, r7, #8
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 f859 	bl	8007a88 <prvGetNextExpireTime>
 80079d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	4619      	mov	r1, r3
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f805 	bl	80079ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079e2:	f000 f8d7 	bl	8007b94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079e6:	bf00      	nop
 80079e8:	e7f0      	b.n	80079cc <prvTimerTask+0x8>
	...

080079ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079f6:	f7ff fa29 	bl	8006e4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079fa:	f107 0308 	add.w	r3, r7, #8
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 f866 	bl	8007ad0 <prvSampleTimeNow>
 8007a04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d130      	bne.n	8007a6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <prvProcessTimerOrBlockTask+0x3c>
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d806      	bhi.n	8007a28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a1a:	f7ff fa25 	bl	8006e68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a1e:	68f9      	ldr	r1, [r7, #12]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff ff81 	bl	8007928 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a26:	e024      	b.n	8007a72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d008      	beq.n	8007a40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a2e:	4b13      	ldr	r3, [pc, #76]	@ (8007a7c <prvProcessTimerOrBlockTask+0x90>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <prvProcessTimerOrBlockTask+0x50>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e000      	b.n	8007a3e <prvProcessTimerOrBlockTask+0x52>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a40:	4b0f      	ldr	r3, [pc, #60]	@ (8007a80 <prvProcessTimerOrBlockTask+0x94>)
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	f7fe ff65 	bl	800691c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a52:	f7ff fa09 	bl	8006e68 <xTaskResumeAll>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10a      	bne.n	8007a72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a5c:	4b09      	ldr	r3, [pc, #36]	@ (8007a84 <prvProcessTimerOrBlockTask+0x98>)
 8007a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	f3bf 8f6f 	isb	sy
}
 8007a6c:	e001      	b.n	8007a72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a6e:	f7ff f9fb 	bl	8006e68 <xTaskResumeAll>
}
 8007a72:	bf00      	nop
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20001200 	.word	0x20001200
 8007a80:	20001204 	.word	0x20001204
 8007a84:	e000ed04 	.word	0xe000ed04

08007a88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a90:	4b0e      	ldr	r3, [pc, #56]	@ (8007acc <prvGetNextExpireTime+0x44>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <prvGetNextExpireTime+0x16>
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	e000      	b.n	8007aa0 <prvGetNextExpireTime+0x18>
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d105      	bne.n	8007ab8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007aac:	4b07      	ldr	r3, [pc, #28]	@ (8007acc <prvGetNextExpireTime+0x44>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	e001      	b.n	8007abc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007abc:	68fb      	ldr	r3, [r7, #12]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	200011fc 	.word	0x200011fc

08007ad0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ad8:	f7ff fa64 	bl	8006fa4 <xTaskGetTickCount>
 8007adc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ade:	4b0b      	ldr	r3, [pc, #44]	@ (8007b0c <prvSampleTimeNow+0x3c>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d205      	bcs.n	8007af4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ae8:	f000 f93a 	bl	8007d60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	e002      	b.n	8007afa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007afa:	4a04      	ldr	r2, [pc, #16]	@ (8007b0c <prvSampleTimeNow+0x3c>)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b00:	68fb      	ldr	r3, [r7, #12]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	2000120c 	.word	0x2000120c

08007b10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d812      	bhi.n	8007b5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	1ad2      	subs	r2, r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d302      	bcc.n	8007b4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b44:	2301      	movs	r3, #1
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	e01b      	b.n	8007b82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b4a:	4b10      	ldr	r3, [pc, #64]	@ (8007b8c <prvInsertTimerInActiveList+0x7c>)
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3304      	adds	r3, #4
 8007b52:	4619      	mov	r1, r3
 8007b54:	4610      	mov	r0, r2
 8007b56:	f7fe f9b8 	bl	8005eca <vListInsert>
 8007b5a:	e012      	b.n	8007b82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d206      	bcs.n	8007b72 <prvInsertTimerInActiveList+0x62>
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d302      	bcc.n	8007b72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	617b      	str	r3, [r7, #20]
 8007b70:	e007      	b.n	8007b82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b72:	4b07      	ldr	r3, [pc, #28]	@ (8007b90 <prvInsertTimerInActiveList+0x80>)
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	f7fe f9a4 	bl	8005eca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b82:	697b      	ldr	r3, [r7, #20]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	20001200 	.word	0x20001200
 8007b90:	200011fc 	.word	0x200011fc

08007b94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08e      	sub	sp, #56	@ 0x38
 8007b98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b9a:	e0ce      	b.n	8007d3a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	da19      	bge.n	8007bd6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ba2:	1d3b      	adds	r3, r7, #4
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10b      	bne.n	8007bc6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	61fb      	str	r3, [r7, #28]
}
 8007bc0:	bf00      	nop
 8007bc2:	bf00      	nop
 8007bc4:	e7fd      	b.n	8007bc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bcc:	6850      	ldr	r0, [r2, #4]
 8007bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bd0:	6892      	ldr	r2, [r2, #8]
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f2c0 80ae 	blt.w	8007d3a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d004      	beq.n	8007bf4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bec:	3304      	adds	r3, #4
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fe f9a4 	bl	8005f3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bf4:	463b      	mov	r3, r7
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff ff6a 	bl	8007ad0 <prvSampleTimeNow>
 8007bfc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b09      	cmp	r3, #9
 8007c02:	f200 8097 	bhi.w	8007d34 <prvProcessReceivedCommands+0x1a0>
 8007c06:	a201      	add	r2, pc, #4	@ (adr r2, 8007c0c <prvProcessReceivedCommands+0x78>)
 8007c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0c:	08007c35 	.word	0x08007c35
 8007c10:	08007c35 	.word	0x08007c35
 8007c14:	08007c35 	.word	0x08007c35
 8007c18:	08007cab 	.word	0x08007cab
 8007c1c:	08007cbf 	.word	0x08007cbf
 8007c20:	08007d0b 	.word	0x08007d0b
 8007c24:	08007c35 	.word	0x08007c35
 8007c28:	08007c35 	.word	0x08007c35
 8007c2c:	08007cab 	.word	0x08007cab
 8007c30:	08007cbf 	.word	0x08007cbf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c3a:	f043 0301 	orr.w	r3, r3, #1
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	18d1      	adds	r1, r2, r3
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c54:	f7ff ff5c 	bl	8007b10 <prvInsertTimerInActiveList>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d06c      	beq.n	8007d38 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d061      	beq.n	8007d38 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	441a      	add	r2, r3
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	2300      	movs	r3, #0
 8007c82:	2100      	movs	r1, #0
 8007c84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c86:	f7ff fe01 	bl	800788c <xTimerGenericCommand>
 8007c8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d152      	bne.n	8007d38 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	61bb      	str	r3, [r7, #24]
}
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop
 8007ca8:	e7fd      	b.n	8007ca6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cb0:	f023 0301 	bic.w	r3, r3, #1
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007cbc:	e03d      	b.n	8007d3a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cc4:	f043 0301 	orr.w	r3, r3, #1
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ccc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10b      	bne.n	8007cf6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	617b      	str	r3, [r7, #20]
}
 8007cf0:	bf00      	nop
 8007cf2:	bf00      	nop
 8007cf4:	e7fd      	b.n	8007cf2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf8:	699a      	ldr	r2, [r3, #24]
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	18d1      	adds	r1, r2, r3
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d04:	f7ff ff04 	bl	8007b10 <prvInsertTimerInActiveList>
					break;
 8007d08:	e017      	b.n	8007d3a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d103      	bne.n	8007d20 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007d18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d1a:	f000 fbe5 	bl	80084e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d1e:	e00c      	b.n	8007d3a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d26:	f023 0301 	bic.w	r3, r3, #1
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d32:	e002      	b.n	8007d3a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007d34:	bf00      	nop
 8007d36:	e000      	b.n	8007d3a <prvProcessReceivedCommands+0x1a6>
					break;
 8007d38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d3a:	4b08      	ldr	r3, [pc, #32]	@ (8007d5c <prvProcessReceivedCommands+0x1c8>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	1d39      	adds	r1, r7, #4
 8007d40:	2200      	movs	r2, #0
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fbce 	bl	80064e4 <xQueueReceive>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f47f af26 	bne.w	8007b9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
 8007d54:	3730      	adds	r7, #48	@ 0x30
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20001204 	.word	0x20001204

08007d60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d66:	e049      	b.n	8007dfc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d68:	4b2e      	ldr	r3, [pc, #184]	@ (8007e24 <prvSwitchTimerLists+0xc4>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d72:	4b2c      	ldr	r3, [pc, #176]	@ (8007e24 <prvSwitchTimerLists+0xc4>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fe f8db 	bl	8005f3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d02f      	beq.n	8007dfc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	4413      	add	r3, r2
 8007da4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d90e      	bls.n	8007dcc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dba:	4b1a      	ldr	r3, [pc, #104]	@ (8007e24 <prvSwitchTimerLists+0xc4>)
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	f7fe f880 	bl	8005eca <vListInsert>
 8007dca:	e017      	b.n	8007dfc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dcc:	2300      	movs	r3, #0
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f7ff fd58 	bl	800788c <xTimerGenericCommand>
 8007ddc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10b      	bne.n	8007dfc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	603b      	str	r3, [r7, #0]
}
 8007df6:	bf00      	nop
 8007df8:	bf00      	nop
 8007dfa:	e7fd      	b.n	8007df8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dfc:	4b09      	ldr	r3, [pc, #36]	@ (8007e24 <prvSwitchTimerLists+0xc4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1b0      	bne.n	8007d68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e06:	4b07      	ldr	r3, [pc, #28]	@ (8007e24 <prvSwitchTimerLists+0xc4>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e0c:	4b06      	ldr	r3, [pc, #24]	@ (8007e28 <prvSwitchTimerLists+0xc8>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a04      	ldr	r2, [pc, #16]	@ (8007e24 <prvSwitchTimerLists+0xc4>)
 8007e12:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e14:	4a04      	ldr	r2, [pc, #16]	@ (8007e28 <prvSwitchTimerLists+0xc8>)
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	6013      	str	r3, [r2, #0]
}
 8007e1a:	bf00      	nop
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	200011fc 	.word	0x200011fc
 8007e28:	20001200 	.word	0x20001200

08007e2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e32:	f000 f969 	bl	8008108 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e36:	4b15      	ldr	r3, [pc, #84]	@ (8007e8c <prvCheckForValidListAndQueue+0x60>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d120      	bne.n	8007e80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e3e:	4814      	ldr	r0, [pc, #80]	@ (8007e90 <prvCheckForValidListAndQueue+0x64>)
 8007e40:	f7fd fff2 	bl	8005e28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e44:	4813      	ldr	r0, [pc, #76]	@ (8007e94 <prvCheckForValidListAndQueue+0x68>)
 8007e46:	f7fd ffef 	bl	8005e28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e4a:	4b13      	ldr	r3, [pc, #76]	@ (8007e98 <prvCheckForValidListAndQueue+0x6c>)
 8007e4c:	4a10      	ldr	r2, [pc, #64]	@ (8007e90 <prvCheckForValidListAndQueue+0x64>)
 8007e4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e50:	4b12      	ldr	r3, [pc, #72]	@ (8007e9c <prvCheckForValidListAndQueue+0x70>)
 8007e52:	4a10      	ldr	r2, [pc, #64]	@ (8007e94 <prvCheckForValidListAndQueue+0x68>)
 8007e54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e56:	2300      	movs	r3, #0
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	4b11      	ldr	r3, [pc, #68]	@ (8007ea0 <prvCheckForValidListAndQueue+0x74>)
 8007e5c:	4a11      	ldr	r2, [pc, #68]	@ (8007ea4 <prvCheckForValidListAndQueue+0x78>)
 8007e5e:	2110      	movs	r1, #16
 8007e60:	200a      	movs	r0, #10
 8007e62:	f7fe f8ff 	bl	8006064 <xQueueGenericCreateStatic>
 8007e66:	4603      	mov	r3, r0
 8007e68:	4a08      	ldr	r2, [pc, #32]	@ (8007e8c <prvCheckForValidListAndQueue+0x60>)
 8007e6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e6c:	4b07      	ldr	r3, [pc, #28]	@ (8007e8c <prvCheckForValidListAndQueue+0x60>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d005      	beq.n	8007e80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e74:	4b05      	ldr	r3, [pc, #20]	@ (8007e8c <prvCheckForValidListAndQueue+0x60>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	490b      	ldr	r1, [pc, #44]	@ (8007ea8 <prvCheckForValidListAndQueue+0x7c>)
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fe fd24 	bl	80068c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e80:	f000 f974 	bl	800816c <vPortExitCritical>
}
 8007e84:	bf00      	nop
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20001204 	.word	0x20001204
 8007e90:	200011d4 	.word	0x200011d4
 8007e94:	200011e8 	.word	0x200011e8
 8007e98:	200011fc 	.word	0x200011fc
 8007e9c:	20001200 	.word	0x20001200
 8007ea0:	200012b0 	.word	0x200012b0
 8007ea4:	20001210 	.word	0x20001210
 8007ea8:	08008948 	.word	0x08008948

08007eac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3b04      	subs	r3, #4
 8007ebc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3b04      	subs	r3, #4
 8007eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f023 0201 	bic.w	r2, r3, #1
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3b04      	subs	r3, #4
 8007eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007edc:	4a0c      	ldr	r2, [pc, #48]	@ (8007f10 <pxPortInitialiseStack+0x64>)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3b14      	subs	r3, #20
 8007ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3b04      	subs	r3, #4
 8007ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f06f 0202 	mvn.w	r2, #2
 8007efa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3b20      	subs	r3, #32
 8007f00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f02:	68fb      	ldr	r3, [r7, #12]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	08007f15 	.word	0x08007f15

08007f14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f1e:	4b13      	ldr	r3, [pc, #76]	@ (8007f6c <prvTaskExitError+0x58>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f26:	d00b      	beq.n	8007f40 <prvTaskExitError+0x2c>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	60fb      	str	r3, [r7, #12]
}
 8007f3a:	bf00      	nop
 8007f3c:	bf00      	nop
 8007f3e:	e7fd      	b.n	8007f3c <prvTaskExitError+0x28>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	60bb      	str	r3, [r7, #8]
}
 8007f52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f54:	bf00      	nop
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0fc      	beq.n	8007f56 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f5c:	bf00      	nop
 8007f5e:	bf00      	nop
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	20000018 	.word	0x20000018

08007f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f70:	4b07      	ldr	r3, [pc, #28]	@ (8007f90 <pxCurrentTCBConst2>)
 8007f72:	6819      	ldr	r1, [r3, #0]
 8007f74:	6808      	ldr	r0, [r1, #0]
 8007f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7a:	f380 8809 	msr	PSP, r0
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f04f 0000 	mov.w	r0, #0
 8007f86:	f380 8811 	msr	BASEPRI, r0
 8007f8a:	4770      	bx	lr
 8007f8c:	f3af 8000 	nop.w

08007f90 <pxCurrentTCBConst2>:
 8007f90:	20000cd4 	.word	0x20000cd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop

08007f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f98:	4808      	ldr	r0, [pc, #32]	@ (8007fbc <prvPortStartFirstTask+0x24>)
 8007f9a:	6800      	ldr	r0, [r0, #0]
 8007f9c:	6800      	ldr	r0, [r0, #0]
 8007f9e:	f380 8808 	msr	MSP, r0
 8007fa2:	f04f 0000 	mov.w	r0, #0
 8007fa6:	f380 8814 	msr	CONTROL, r0
 8007faa:	b662      	cpsie	i
 8007fac:	b661      	cpsie	f
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	df00      	svc	0
 8007fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fba:	bf00      	nop
 8007fbc:	e000ed08 	.word	0xe000ed08

08007fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fc6:	4b47      	ldr	r3, [pc, #284]	@ (80080e4 <xPortStartScheduler+0x124>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a47      	ldr	r2, [pc, #284]	@ (80080e8 <xPortStartScheduler+0x128>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d10b      	bne.n	8007fe8 <xPortStartScheduler+0x28>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	613b      	str	r3, [r7, #16]
}
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	e7fd      	b.n	8007fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80080e4 <xPortStartScheduler+0x124>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a3f      	ldr	r2, [pc, #252]	@ (80080ec <xPortStartScheduler+0x12c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d10b      	bne.n	800800a <xPortStartScheduler+0x4a>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	60fb      	str	r3, [r7, #12]
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop
 8008008:	e7fd      	b.n	8008006 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800800a:	4b39      	ldr	r3, [pc, #228]	@ (80080f0 <xPortStartScheduler+0x130>)
 800800c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	b2db      	uxtb	r3, r3
 8008014:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	22ff      	movs	r2, #255	@ 0xff
 800801a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	b2db      	uxtb	r3, r3
 8008022:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	b2db      	uxtb	r3, r3
 8008028:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800802c:	b2da      	uxtb	r2, r3
 800802e:	4b31      	ldr	r3, [pc, #196]	@ (80080f4 <xPortStartScheduler+0x134>)
 8008030:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008032:	4b31      	ldr	r3, [pc, #196]	@ (80080f8 <xPortStartScheduler+0x138>)
 8008034:	2207      	movs	r2, #7
 8008036:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008038:	e009      	b.n	800804e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800803a:	4b2f      	ldr	r3, [pc, #188]	@ (80080f8 <xPortStartScheduler+0x138>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3b01      	subs	r3, #1
 8008040:	4a2d      	ldr	r2, [pc, #180]	@ (80080f8 <xPortStartScheduler+0x138>)
 8008042:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	b2db      	uxtb	r3, r3
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	b2db      	uxtb	r3, r3
 800804c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800804e:	78fb      	ldrb	r3, [r7, #3]
 8008050:	b2db      	uxtb	r3, r3
 8008052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008056:	2b80      	cmp	r3, #128	@ 0x80
 8008058:	d0ef      	beq.n	800803a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800805a:	4b27      	ldr	r3, [pc, #156]	@ (80080f8 <xPortStartScheduler+0x138>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f1c3 0307 	rsb	r3, r3, #7
 8008062:	2b04      	cmp	r3, #4
 8008064:	d00b      	beq.n	800807e <xPortStartScheduler+0xbe>
	__asm volatile
 8008066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	60bb      	str	r3, [r7, #8]
}
 8008078:	bf00      	nop
 800807a:	bf00      	nop
 800807c:	e7fd      	b.n	800807a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800807e:	4b1e      	ldr	r3, [pc, #120]	@ (80080f8 <xPortStartScheduler+0x138>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	021b      	lsls	r3, r3, #8
 8008084:	4a1c      	ldr	r2, [pc, #112]	@ (80080f8 <xPortStartScheduler+0x138>)
 8008086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008088:	4b1b      	ldr	r3, [pc, #108]	@ (80080f8 <xPortStartScheduler+0x138>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008090:	4a19      	ldr	r2, [pc, #100]	@ (80080f8 <xPortStartScheduler+0x138>)
 8008092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	b2da      	uxtb	r2, r3
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800809c:	4b17      	ldr	r3, [pc, #92]	@ (80080fc <xPortStartScheduler+0x13c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a16      	ldr	r2, [pc, #88]	@ (80080fc <xPortStartScheduler+0x13c>)
 80080a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80080a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080a8:	4b14      	ldr	r3, [pc, #80]	@ (80080fc <xPortStartScheduler+0x13c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a13      	ldr	r2, [pc, #76]	@ (80080fc <xPortStartScheduler+0x13c>)
 80080ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80080b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080b4:	f000 f8da 	bl	800826c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080b8:	4b11      	ldr	r3, [pc, #68]	@ (8008100 <xPortStartScheduler+0x140>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080be:	f000 f8f9 	bl	80082b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080c2:	4b10      	ldr	r3, [pc, #64]	@ (8008104 <xPortStartScheduler+0x144>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008104 <xPortStartScheduler+0x144>)
 80080c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80080cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080ce:	f7ff ff63 	bl	8007f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080d2:	f7ff f831 	bl	8007138 <vTaskSwitchContext>
	prvTaskExitError();
 80080d6:	f7ff ff1d 	bl	8007f14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	e000ed00 	.word	0xe000ed00
 80080e8:	410fc271 	.word	0x410fc271
 80080ec:	410fc270 	.word	0x410fc270
 80080f0:	e000e400 	.word	0xe000e400
 80080f4:	20001300 	.word	0x20001300
 80080f8:	20001304 	.word	0x20001304
 80080fc:	e000ed20 	.word	0xe000ed20
 8008100:	20000018 	.word	0x20000018
 8008104:	e000ef34 	.word	0xe000ef34

08008108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	607b      	str	r3, [r7, #4]
}
 8008120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008122:	4b10      	ldr	r3, [pc, #64]	@ (8008164 <vPortEnterCritical+0x5c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3301      	adds	r3, #1
 8008128:	4a0e      	ldr	r2, [pc, #56]	@ (8008164 <vPortEnterCritical+0x5c>)
 800812a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800812c:	4b0d      	ldr	r3, [pc, #52]	@ (8008164 <vPortEnterCritical+0x5c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d110      	bne.n	8008156 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008134:	4b0c      	ldr	r3, [pc, #48]	@ (8008168 <vPortEnterCritical+0x60>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <vPortEnterCritical+0x4e>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	603b      	str	r3, [r7, #0]
}
 8008150:	bf00      	nop
 8008152:	bf00      	nop
 8008154:	e7fd      	b.n	8008152 <vPortEnterCritical+0x4a>
	}
}
 8008156:	bf00      	nop
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	20000018 	.word	0x20000018
 8008168:	e000ed04 	.word	0xe000ed04

0800816c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008172:	4b12      	ldr	r3, [pc, #72]	@ (80081bc <vPortExitCritical+0x50>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10b      	bne.n	8008192 <vPortExitCritical+0x26>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	607b      	str	r3, [r7, #4]
}
 800818c:	bf00      	nop
 800818e:	bf00      	nop
 8008190:	e7fd      	b.n	800818e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008192:	4b0a      	ldr	r3, [pc, #40]	@ (80081bc <vPortExitCritical+0x50>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3b01      	subs	r3, #1
 8008198:	4a08      	ldr	r2, [pc, #32]	@ (80081bc <vPortExitCritical+0x50>)
 800819a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800819c:	4b07      	ldr	r3, [pc, #28]	@ (80081bc <vPortExitCritical+0x50>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d105      	bne.n	80081b0 <vPortExitCritical+0x44>
 80081a4:	2300      	movs	r3, #0
 80081a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	f383 8811 	msr	BASEPRI, r3
}
 80081ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	20000018 	.word	0x20000018

080081c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081c0:	f3ef 8009 	mrs	r0, PSP
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	4b15      	ldr	r3, [pc, #84]	@ (8008220 <pxCurrentTCBConst>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	f01e 0f10 	tst.w	lr, #16
 80081d0:	bf08      	it	eq
 80081d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081da:	6010      	str	r0, [r2, #0]
 80081dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80081e4:	f380 8811 	msr	BASEPRI, r0
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f7fe ffa2 	bl	8007138 <vTaskSwitchContext>
 80081f4:	f04f 0000 	mov.w	r0, #0
 80081f8:	f380 8811 	msr	BASEPRI, r0
 80081fc:	bc09      	pop	{r0, r3}
 80081fe:	6819      	ldr	r1, [r3, #0]
 8008200:	6808      	ldr	r0, [r1, #0]
 8008202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008206:	f01e 0f10 	tst.w	lr, #16
 800820a:	bf08      	it	eq
 800820c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008210:	f380 8809 	msr	PSP, r0
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	f3af 8000 	nop.w

08008220 <pxCurrentTCBConst>:
 8008220:	20000cd4 	.word	0x20000cd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop

08008228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	607b      	str	r3, [r7, #4]
}
 8008240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008242:	f7fe febf 	bl	8006fc4 <xTaskIncrementTick>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800824c:	4b06      	ldr	r3, [pc, #24]	@ (8008268 <xPortSysTickHandler+0x40>)
 800824e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	2300      	movs	r3, #0
 8008256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f383 8811 	msr	BASEPRI, r3
}
 800825e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800826c:	b480      	push	{r7}
 800826e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008270:	4b0b      	ldr	r3, [pc, #44]	@ (80082a0 <vPortSetupTimerInterrupt+0x34>)
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008276:	4b0b      	ldr	r3, [pc, #44]	@ (80082a4 <vPortSetupTimerInterrupt+0x38>)
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800827c:	4b0a      	ldr	r3, [pc, #40]	@ (80082a8 <vPortSetupTimerInterrupt+0x3c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a0a      	ldr	r2, [pc, #40]	@ (80082ac <vPortSetupTimerInterrupt+0x40>)
 8008282:	fba2 2303 	umull	r2, r3, r2, r3
 8008286:	099b      	lsrs	r3, r3, #6
 8008288:	4a09      	ldr	r2, [pc, #36]	@ (80082b0 <vPortSetupTimerInterrupt+0x44>)
 800828a:	3b01      	subs	r3, #1
 800828c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800828e:	4b04      	ldr	r3, [pc, #16]	@ (80082a0 <vPortSetupTimerInterrupt+0x34>)
 8008290:	2207      	movs	r2, #7
 8008292:	601a      	str	r2, [r3, #0]
}
 8008294:	bf00      	nop
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	e000e010 	.word	0xe000e010
 80082a4:	e000e018 	.word	0xe000e018
 80082a8:	2000000c 	.word	0x2000000c
 80082ac:	10624dd3 	.word	0x10624dd3
 80082b0:	e000e014 	.word	0xe000e014

080082b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80082c4 <vPortEnableVFP+0x10>
 80082b8:	6801      	ldr	r1, [r0, #0]
 80082ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80082be:	6001      	str	r1, [r0, #0]
 80082c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082c2:	bf00      	nop
 80082c4:	e000ed88 	.word	0xe000ed88

080082c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082ce:	f3ef 8305 	mrs	r3, IPSR
 80082d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b0f      	cmp	r3, #15
 80082d8:	d915      	bls.n	8008306 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082da:	4a18      	ldr	r2, [pc, #96]	@ (800833c <vPortValidateInterruptPriority+0x74>)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4413      	add	r3, r2
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082e4:	4b16      	ldr	r3, [pc, #88]	@ (8008340 <vPortValidateInterruptPriority+0x78>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	7afa      	ldrb	r2, [r7, #11]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d20b      	bcs.n	8008306 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	607b      	str	r3, [r7, #4]
}
 8008300:	bf00      	nop
 8008302:	bf00      	nop
 8008304:	e7fd      	b.n	8008302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008306:	4b0f      	ldr	r3, [pc, #60]	@ (8008344 <vPortValidateInterruptPriority+0x7c>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800830e:	4b0e      	ldr	r3, [pc, #56]	@ (8008348 <vPortValidateInterruptPriority+0x80>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	429a      	cmp	r2, r3
 8008314:	d90b      	bls.n	800832e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	603b      	str	r3, [r7, #0]
}
 8008328:	bf00      	nop
 800832a:	bf00      	nop
 800832c:	e7fd      	b.n	800832a <vPortValidateInterruptPriority+0x62>
	}
 800832e:	bf00      	nop
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	e000e3f0 	.word	0xe000e3f0
 8008340:	20001300 	.word	0x20001300
 8008344:	e000ed0c 	.word	0xe000ed0c
 8008348:	20001304 	.word	0x20001304

0800834c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08a      	sub	sp, #40	@ 0x28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008354:	2300      	movs	r3, #0
 8008356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008358:	f7fe fd78 	bl	8006e4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800835c:	4b5c      	ldr	r3, [pc, #368]	@ (80084d0 <pvPortMalloc+0x184>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008364:	f000 f924 	bl	80085b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008368:	4b5a      	ldr	r3, [pc, #360]	@ (80084d4 <pvPortMalloc+0x188>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4013      	ands	r3, r2
 8008370:	2b00      	cmp	r3, #0
 8008372:	f040 8095 	bne.w	80084a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d01e      	beq.n	80083ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800837c:	2208      	movs	r2, #8
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4413      	add	r3, r2
 8008382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	2b00      	cmp	r3, #0
 800838c:	d015      	beq.n	80083ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f023 0307 	bic.w	r3, r3, #7
 8008394:	3308      	adds	r3, #8
 8008396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f003 0307 	and.w	r3, r3, #7
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00b      	beq.n	80083ba <pvPortMalloc+0x6e>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	617b      	str	r3, [r7, #20]
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop
 80083b8:	e7fd      	b.n	80083b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d06f      	beq.n	80084a0 <pvPortMalloc+0x154>
 80083c0:	4b45      	ldr	r3, [pc, #276]	@ (80084d8 <pvPortMalloc+0x18c>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d86a      	bhi.n	80084a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083ca:	4b44      	ldr	r3, [pc, #272]	@ (80084dc <pvPortMalloc+0x190>)
 80083cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083ce:	4b43      	ldr	r3, [pc, #268]	@ (80084dc <pvPortMalloc+0x190>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083d4:	e004      	b.n	80083e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d903      	bls.n	80083f2 <pvPortMalloc+0xa6>
 80083ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1f1      	bne.n	80083d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083f2:	4b37      	ldr	r3, [pc, #220]	@ (80084d0 <pvPortMalloc+0x184>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d051      	beq.n	80084a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2208      	movs	r2, #8
 8008402:	4413      	add	r3, r2
 8008404:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	1ad2      	subs	r2, r2, r3
 8008416:	2308      	movs	r3, #8
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	429a      	cmp	r2, r3
 800841c:	d920      	bls.n	8008460 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800841e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4413      	add	r3, r2
 8008424:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	f003 0307 	and.w	r3, r3, #7
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00b      	beq.n	8008448 <pvPortMalloc+0xfc>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	613b      	str	r3, [r7, #16]
}
 8008442:	bf00      	nop
 8008444:	bf00      	nop
 8008446:	e7fd      	b.n	8008444 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	1ad2      	subs	r2, r2, r3
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800845a:	69b8      	ldr	r0, [r7, #24]
 800845c:	f000 f90a 	bl	8008674 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008460:	4b1d      	ldr	r3, [pc, #116]	@ (80084d8 <pvPortMalloc+0x18c>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	4a1b      	ldr	r2, [pc, #108]	@ (80084d8 <pvPortMalloc+0x18c>)
 800846c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800846e:	4b1a      	ldr	r3, [pc, #104]	@ (80084d8 <pvPortMalloc+0x18c>)
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	4b1b      	ldr	r3, [pc, #108]	@ (80084e0 <pvPortMalloc+0x194>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	429a      	cmp	r2, r3
 8008478:	d203      	bcs.n	8008482 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800847a:	4b17      	ldr	r3, [pc, #92]	@ (80084d8 <pvPortMalloc+0x18c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a18      	ldr	r2, [pc, #96]	@ (80084e0 <pvPortMalloc+0x194>)
 8008480:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	4b13      	ldr	r3, [pc, #76]	@ (80084d4 <pvPortMalloc+0x188>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	431a      	orrs	r2, r3
 800848c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008496:	4b13      	ldr	r3, [pc, #76]	@ (80084e4 <pvPortMalloc+0x198>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3301      	adds	r3, #1
 800849c:	4a11      	ldr	r2, [pc, #68]	@ (80084e4 <pvPortMalloc+0x198>)
 800849e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084a0:	f7fe fce2 	bl	8006e68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	f003 0307 	and.w	r3, r3, #7
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00b      	beq.n	80084c6 <pvPortMalloc+0x17a>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	60fb      	str	r3, [r7, #12]
}
 80084c0:	bf00      	nop
 80084c2:	bf00      	nop
 80084c4:	e7fd      	b.n	80084c2 <pvPortMalloc+0x176>
	return pvReturn;
 80084c6:	69fb      	ldr	r3, [r7, #28]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3728      	adds	r7, #40	@ 0x28
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	20004f10 	.word	0x20004f10
 80084d4:	20004f24 	.word	0x20004f24
 80084d8:	20004f14 	.word	0x20004f14
 80084dc:	20004f08 	.word	0x20004f08
 80084e0:	20004f18 	.word	0x20004f18
 80084e4:	20004f1c 	.word	0x20004f1c

080084e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d04f      	beq.n	800859a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084fa:	2308      	movs	r3, #8
 80084fc:	425b      	negs	r3, r3
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	4413      	add	r3, r2
 8008502:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	4b25      	ldr	r3, [pc, #148]	@ (80085a4 <vPortFree+0xbc>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4013      	ands	r3, r2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10b      	bne.n	800852e <vPortFree+0x46>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	60fb      	str	r3, [r7, #12]
}
 8008528:	bf00      	nop
 800852a:	bf00      	nop
 800852c:	e7fd      	b.n	800852a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00b      	beq.n	800854e <vPortFree+0x66>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	60bb      	str	r3, [r7, #8]
}
 8008548:	bf00      	nop
 800854a:	bf00      	nop
 800854c:	e7fd      	b.n	800854a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	4b14      	ldr	r3, [pc, #80]	@ (80085a4 <vPortFree+0xbc>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4013      	ands	r3, r2
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01e      	beq.n	800859a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d11a      	bne.n	800859a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	4b0e      	ldr	r3, [pc, #56]	@ (80085a4 <vPortFree+0xbc>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	43db      	mvns	r3, r3
 800856e:	401a      	ands	r2, r3
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008574:	f7fe fc6a 	bl	8006e4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	4b0a      	ldr	r3, [pc, #40]	@ (80085a8 <vPortFree+0xc0>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4413      	add	r3, r2
 8008582:	4a09      	ldr	r2, [pc, #36]	@ (80085a8 <vPortFree+0xc0>)
 8008584:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008586:	6938      	ldr	r0, [r7, #16]
 8008588:	f000 f874 	bl	8008674 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800858c:	4b07      	ldr	r3, [pc, #28]	@ (80085ac <vPortFree+0xc4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3301      	adds	r3, #1
 8008592:	4a06      	ldr	r2, [pc, #24]	@ (80085ac <vPortFree+0xc4>)
 8008594:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008596:	f7fe fc67 	bl	8006e68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800859a:	bf00      	nop
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20004f24 	.word	0x20004f24
 80085a8:	20004f14 	.word	0x20004f14
 80085ac:	20004f20 	.word	0x20004f20

080085b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80085ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085bc:	4b27      	ldr	r3, [pc, #156]	@ (800865c <prvHeapInit+0xac>)
 80085be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00c      	beq.n	80085e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3307      	adds	r3, #7
 80085ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f023 0307 	bic.w	r3, r3, #7
 80085d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	4a1f      	ldr	r2, [pc, #124]	@ (800865c <prvHeapInit+0xac>)
 80085e0:	4413      	add	r3, r2
 80085e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008660 <prvHeapInit+0xb0>)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008660 <prvHeapInit+0xb0>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	4413      	add	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085fc:	2208      	movs	r2, #8
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	1a9b      	subs	r3, r3, r2
 8008602:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0307 	bic.w	r3, r3, #7
 800860a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4a15      	ldr	r2, [pc, #84]	@ (8008664 <prvHeapInit+0xb4>)
 8008610:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008612:	4b14      	ldr	r3, [pc, #80]	@ (8008664 <prvHeapInit+0xb4>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2200      	movs	r2, #0
 8008618:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800861a:	4b12      	ldr	r3, [pc, #72]	@ (8008664 <prvHeapInit+0xb4>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	1ad2      	subs	r2, r2, r3
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008630:	4b0c      	ldr	r3, [pc, #48]	@ (8008664 <prvHeapInit+0xb4>)
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	4a0a      	ldr	r2, [pc, #40]	@ (8008668 <prvHeapInit+0xb8>)
 800863e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	4a09      	ldr	r2, [pc, #36]	@ (800866c <prvHeapInit+0xbc>)
 8008646:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008648:	4b09      	ldr	r3, [pc, #36]	@ (8008670 <prvHeapInit+0xc0>)
 800864a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800864e:	601a      	str	r2, [r3, #0]
}
 8008650:	bf00      	nop
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	20001308 	.word	0x20001308
 8008660:	20004f08 	.word	0x20004f08
 8008664:	20004f10 	.word	0x20004f10
 8008668:	20004f18 	.word	0x20004f18
 800866c:	20004f14 	.word	0x20004f14
 8008670:	20004f24 	.word	0x20004f24

08008674 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800867c:	4b28      	ldr	r3, [pc, #160]	@ (8008720 <prvInsertBlockIntoFreeList+0xac>)
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	e002      	b.n	8008688 <prvInsertBlockIntoFreeList+0x14>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	429a      	cmp	r2, r3
 8008690:	d8f7      	bhi.n	8008682 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	4413      	add	r3, r2
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d108      	bne.n	80086b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	441a      	add	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	441a      	add	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d118      	bne.n	80086fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	4b15      	ldr	r3, [pc, #84]	@ (8008724 <prvInsertBlockIntoFreeList+0xb0>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d00d      	beq.n	80086f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	441a      	add	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	e008      	b.n	8008704 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008724 <prvInsertBlockIntoFreeList+0xb0>)
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	e003      	b.n	8008704 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	429a      	cmp	r2, r3
 800870a:	d002      	beq.n	8008712 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008712:	bf00      	nop
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	20004f08 	.word	0x20004f08
 8008724:	20004f10 	.word	0x20004f10

08008728 <memset>:
 8008728:	4402      	add	r2, r0
 800872a:	4603      	mov	r3, r0
 800872c:	4293      	cmp	r3, r2
 800872e:	d100      	bne.n	8008732 <memset+0xa>
 8008730:	4770      	bx	lr
 8008732:	f803 1b01 	strb.w	r1, [r3], #1
 8008736:	e7f9      	b.n	800872c <memset+0x4>

08008738 <_reclaim_reent>:
 8008738:	4b29      	ldr	r3, [pc, #164]	@ (80087e0 <_reclaim_reent+0xa8>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4283      	cmp	r3, r0
 800873e:	b570      	push	{r4, r5, r6, lr}
 8008740:	4604      	mov	r4, r0
 8008742:	d04b      	beq.n	80087dc <_reclaim_reent+0xa4>
 8008744:	69c3      	ldr	r3, [r0, #28]
 8008746:	b1ab      	cbz	r3, 8008774 <_reclaim_reent+0x3c>
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	b16b      	cbz	r3, 8008768 <_reclaim_reent+0x30>
 800874c:	2500      	movs	r5, #0
 800874e:	69e3      	ldr	r3, [r4, #28]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	5959      	ldr	r1, [r3, r5]
 8008754:	2900      	cmp	r1, #0
 8008756:	d13b      	bne.n	80087d0 <_reclaim_reent+0x98>
 8008758:	3504      	adds	r5, #4
 800875a:	2d80      	cmp	r5, #128	@ 0x80
 800875c:	d1f7      	bne.n	800874e <_reclaim_reent+0x16>
 800875e:	69e3      	ldr	r3, [r4, #28]
 8008760:	4620      	mov	r0, r4
 8008762:	68d9      	ldr	r1, [r3, #12]
 8008764:	f000 f872 	bl	800884c <_free_r>
 8008768:	69e3      	ldr	r3, [r4, #28]
 800876a:	6819      	ldr	r1, [r3, #0]
 800876c:	b111      	cbz	r1, 8008774 <_reclaim_reent+0x3c>
 800876e:	4620      	mov	r0, r4
 8008770:	f000 f86c 	bl	800884c <_free_r>
 8008774:	6961      	ldr	r1, [r4, #20]
 8008776:	b111      	cbz	r1, 800877e <_reclaim_reent+0x46>
 8008778:	4620      	mov	r0, r4
 800877a:	f000 f867 	bl	800884c <_free_r>
 800877e:	69e1      	ldr	r1, [r4, #28]
 8008780:	b111      	cbz	r1, 8008788 <_reclaim_reent+0x50>
 8008782:	4620      	mov	r0, r4
 8008784:	f000 f862 	bl	800884c <_free_r>
 8008788:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800878a:	b111      	cbz	r1, 8008792 <_reclaim_reent+0x5a>
 800878c:	4620      	mov	r0, r4
 800878e:	f000 f85d 	bl	800884c <_free_r>
 8008792:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008794:	b111      	cbz	r1, 800879c <_reclaim_reent+0x64>
 8008796:	4620      	mov	r0, r4
 8008798:	f000 f858 	bl	800884c <_free_r>
 800879c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800879e:	b111      	cbz	r1, 80087a6 <_reclaim_reent+0x6e>
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 f853 	bl	800884c <_free_r>
 80087a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80087a8:	b111      	cbz	r1, 80087b0 <_reclaim_reent+0x78>
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 f84e 	bl	800884c <_free_r>
 80087b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80087b2:	b111      	cbz	r1, 80087ba <_reclaim_reent+0x82>
 80087b4:	4620      	mov	r0, r4
 80087b6:	f000 f849 	bl	800884c <_free_r>
 80087ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80087bc:	b111      	cbz	r1, 80087c4 <_reclaim_reent+0x8c>
 80087be:	4620      	mov	r0, r4
 80087c0:	f000 f844 	bl	800884c <_free_r>
 80087c4:	6a23      	ldr	r3, [r4, #32]
 80087c6:	b14b      	cbz	r3, 80087dc <_reclaim_reent+0xa4>
 80087c8:	4620      	mov	r0, r4
 80087ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80087ce:	4718      	bx	r3
 80087d0:	680e      	ldr	r6, [r1, #0]
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 f83a 	bl	800884c <_free_r>
 80087d8:	4631      	mov	r1, r6
 80087da:	e7bb      	b.n	8008754 <_reclaim_reent+0x1c>
 80087dc:	bd70      	pop	{r4, r5, r6, pc}
 80087de:	bf00      	nop
 80087e0:	2000001c 	.word	0x2000001c

080087e4 <__libc_init_array>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	4d0d      	ldr	r5, [pc, #52]	@ (800881c <__libc_init_array+0x38>)
 80087e8:	4c0d      	ldr	r4, [pc, #52]	@ (8008820 <__libc_init_array+0x3c>)
 80087ea:	1b64      	subs	r4, r4, r5
 80087ec:	10a4      	asrs	r4, r4, #2
 80087ee:	2600      	movs	r6, #0
 80087f0:	42a6      	cmp	r6, r4
 80087f2:	d109      	bne.n	8008808 <__libc_init_array+0x24>
 80087f4:	4d0b      	ldr	r5, [pc, #44]	@ (8008824 <__libc_init_array+0x40>)
 80087f6:	4c0c      	ldr	r4, [pc, #48]	@ (8008828 <__libc_init_array+0x44>)
 80087f8:	f000 f87e 	bl	80088f8 <_init>
 80087fc:	1b64      	subs	r4, r4, r5
 80087fe:	10a4      	asrs	r4, r4, #2
 8008800:	2600      	movs	r6, #0
 8008802:	42a6      	cmp	r6, r4
 8008804:	d105      	bne.n	8008812 <__libc_init_array+0x2e>
 8008806:	bd70      	pop	{r4, r5, r6, pc}
 8008808:	f855 3b04 	ldr.w	r3, [r5], #4
 800880c:	4798      	blx	r3
 800880e:	3601      	adds	r6, #1
 8008810:	e7ee      	b.n	80087f0 <__libc_init_array+0xc>
 8008812:	f855 3b04 	ldr.w	r3, [r5], #4
 8008816:	4798      	blx	r3
 8008818:	3601      	adds	r6, #1
 800881a:	e7f2      	b.n	8008802 <__libc_init_array+0x1e>
 800881c:	080089e4 	.word	0x080089e4
 8008820:	080089e4 	.word	0x080089e4
 8008824:	080089e4 	.word	0x080089e4
 8008828:	080089e8 	.word	0x080089e8

0800882c <__retarget_lock_acquire_recursive>:
 800882c:	4770      	bx	lr

0800882e <__retarget_lock_release_recursive>:
 800882e:	4770      	bx	lr

08008830 <memcpy>:
 8008830:	440a      	add	r2, r1
 8008832:	4291      	cmp	r1, r2
 8008834:	f100 33ff 	add.w	r3, r0, #4294967295
 8008838:	d100      	bne.n	800883c <memcpy+0xc>
 800883a:	4770      	bx	lr
 800883c:	b510      	push	{r4, lr}
 800883e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008846:	4291      	cmp	r1, r2
 8008848:	d1f9      	bne.n	800883e <memcpy+0xe>
 800884a:	bd10      	pop	{r4, pc}

0800884c <_free_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4605      	mov	r5, r0
 8008850:	2900      	cmp	r1, #0
 8008852:	d041      	beq.n	80088d8 <_free_r+0x8c>
 8008854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008858:	1f0c      	subs	r4, r1, #4
 800885a:	2b00      	cmp	r3, #0
 800885c:	bfb8      	it	lt
 800885e:	18e4      	addlt	r4, r4, r3
 8008860:	f000 f83e 	bl	80088e0 <__malloc_lock>
 8008864:	4a1d      	ldr	r2, [pc, #116]	@ (80088dc <_free_r+0x90>)
 8008866:	6813      	ldr	r3, [r2, #0]
 8008868:	b933      	cbnz	r3, 8008878 <_free_r+0x2c>
 800886a:	6063      	str	r3, [r4, #4]
 800886c:	6014      	str	r4, [r2, #0]
 800886e:	4628      	mov	r0, r5
 8008870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008874:	f000 b83a 	b.w	80088ec <__malloc_unlock>
 8008878:	42a3      	cmp	r3, r4
 800887a:	d908      	bls.n	800888e <_free_r+0x42>
 800887c:	6820      	ldr	r0, [r4, #0]
 800887e:	1821      	adds	r1, r4, r0
 8008880:	428b      	cmp	r3, r1
 8008882:	bf01      	itttt	eq
 8008884:	6819      	ldreq	r1, [r3, #0]
 8008886:	685b      	ldreq	r3, [r3, #4]
 8008888:	1809      	addeq	r1, r1, r0
 800888a:	6021      	streq	r1, [r4, #0]
 800888c:	e7ed      	b.n	800886a <_free_r+0x1e>
 800888e:	461a      	mov	r2, r3
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	b10b      	cbz	r3, 8008898 <_free_r+0x4c>
 8008894:	42a3      	cmp	r3, r4
 8008896:	d9fa      	bls.n	800888e <_free_r+0x42>
 8008898:	6811      	ldr	r1, [r2, #0]
 800889a:	1850      	adds	r0, r2, r1
 800889c:	42a0      	cmp	r0, r4
 800889e:	d10b      	bne.n	80088b8 <_free_r+0x6c>
 80088a0:	6820      	ldr	r0, [r4, #0]
 80088a2:	4401      	add	r1, r0
 80088a4:	1850      	adds	r0, r2, r1
 80088a6:	4283      	cmp	r3, r0
 80088a8:	6011      	str	r1, [r2, #0]
 80088aa:	d1e0      	bne.n	800886e <_free_r+0x22>
 80088ac:	6818      	ldr	r0, [r3, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	6053      	str	r3, [r2, #4]
 80088b2:	4408      	add	r0, r1
 80088b4:	6010      	str	r0, [r2, #0]
 80088b6:	e7da      	b.n	800886e <_free_r+0x22>
 80088b8:	d902      	bls.n	80088c0 <_free_r+0x74>
 80088ba:	230c      	movs	r3, #12
 80088bc:	602b      	str	r3, [r5, #0]
 80088be:	e7d6      	b.n	800886e <_free_r+0x22>
 80088c0:	6820      	ldr	r0, [r4, #0]
 80088c2:	1821      	adds	r1, r4, r0
 80088c4:	428b      	cmp	r3, r1
 80088c6:	bf04      	itt	eq
 80088c8:	6819      	ldreq	r1, [r3, #0]
 80088ca:	685b      	ldreq	r3, [r3, #4]
 80088cc:	6063      	str	r3, [r4, #4]
 80088ce:	bf04      	itt	eq
 80088d0:	1809      	addeq	r1, r1, r0
 80088d2:	6021      	streq	r1, [r4, #0]
 80088d4:	6054      	str	r4, [r2, #4]
 80088d6:	e7ca      	b.n	800886e <_free_r+0x22>
 80088d8:	bd38      	pop	{r3, r4, r5, pc}
 80088da:	bf00      	nop
 80088dc:	20005064 	.word	0x20005064

080088e0 <__malloc_lock>:
 80088e0:	4801      	ldr	r0, [pc, #4]	@ (80088e8 <__malloc_lock+0x8>)
 80088e2:	f7ff bfa3 	b.w	800882c <__retarget_lock_acquire_recursive>
 80088e6:	bf00      	nop
 80088e8:	20005060 	.word	0x20005060

080088ec <__malloc_unlock>:
 80088ec:	4801      	ldr	r0, [pc, #4]	@ (80088f4 <__malloc_unlock+0x8>)
 80088ee:	f7ff bf9e 	b.w	800882e <__retarget_lock_release_recursive>
 80088f2:	bf00      	nop
 80088f4:	20005060 	.word	0x20005060

080088f8 <_init>:
 80088f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fa:	bf00      	nop
 80088fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088fe:	bc08      	pop	{r3}
 8008900:	469e      	mov	lr, r3
 8008902:	4770      	bx	lr

08008904 <_fini>:
 8008904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008906:	bf00      	nop
 8008908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800890a:	bc08      	pop	{r3}
 800890c:	469e      	mov	lr, r3
 800890e:	4770      	bx	lr
